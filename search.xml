<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>基于Docker的中间件部署安装手册</title>
      <link href="/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html"/>
      <url>/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84%E4%B8%AD%E9%97%B4%E4%BB%B6%E9%83%A8%E7%BD%B2%E5%AE%89%E8%A3%85%E6%89%8B%E5%86%8C.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>本文通篇以流水账的形式叙述，主要是用来记录基于<code>docker</code>环境离线安装中间件的部署过程(命令行极速版，没有操作详解)。</p><div class="note info">软件基于<code>Ubuntu</code>搭建，其他操作系统可能不适用</div><a id="more"></a><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装<code>docker</code></h2><p>按照操作系统要求，选取合适的<code>docker</code>版本，下载地址：<a href="https://download.docker.com/linux/static/stable/x86_64/" target="_blank" rel="noopener">docker下载地址</a></p><ol><li><p>将下载好的软件包上传至服务器，并解压至<code>/usr/local</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf docker-20.10.22.tgz -C /usr/local</span><br></pre></td></tr></table></figure></li><li><p>进入<code>/etc/systemd/system</code>目录,并创建<code>docker.service</code>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>docker.service</code>服务文件(关注<code>ExecStart</code>启动命令)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Docker Application Container Engine</span><br><span class="line">Documentation=https://docs.docker.com</span><br><span class="line">After=network-online.target firewalld.service</span><br><span class="line">Wants=network-online.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=notify</span><br><span class="line"><span class="meta">#</span><span class="bash"> the default is not to use systemd <span class="keyword">for</span> cgroups because the delegate issues still</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> exists and systemd currently does not support the cgroup feature <span class="built_in">set</span> required</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> containers run by docker</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker默认数据目录为/var/lib/docker,使用df -hl /var/lib/docker查看磁盘空间是否足够，否则使用--graph重新指定docker的</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据目录，若内网搭建镜像仓库，可使用--insecure-registry=127.0.0.1(镜像仓库ip)指向自己的镜像仓库</span></span><br><span class="line">ExecStart=/usr/bin/dockerd --selinux-enabled=false --graph=/home/docker</span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line"><span class="meta">#</span><span class="bash"> Having non-zero Limit*s causes performance problems due to accounting overhead</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">in</span> the kernel. We recommend using cgroups to <span class="keyword">do</span> container-local accounting.</span></span><br><span class="line">LimitNOFILE=infinity</span><br><span class="line">LimitNPROC=infinity</span><br><span class="line">LimitCORE=infinity</span><br><span class="line"><span class="meta">#</span><span class="bash"> Uncomment TasksMax <span class="keyword">if</span> your systemd version supports it.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Only systemd 226 and above support this version.</span></span><br><span class="line"><span class="meta">#</span><span class="bash">TasksMax=infinity</span></span><br><span class="line">TimeoutStartSec=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">set</span> delegate yes so that systemd does not reset the cgroups of docker containers</span></span><br><span class="line">Delegate=yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">kill</span> only the docker process, not all processes <span class="keyword">in</span> the cgroup</span></span><br><span class="line">KillMode=process</span><br><span class="line"><span class="meta">#</span><span class="bash"> restart the docker process <span class="keyword">if</span> it exits prematurely</span></span><br><span class="line">Restart=on-failure</span><br><span class="line">StartLimitBurst=3</span><br><span class="line">StartLimitInterval=60s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li><p>给<code>docker.service</code>文件添加执行权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 /etc/systemd/system/docker.service</span><br></pre></td></tr></table></figure></li><li><p>重新加载配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>启动<code>docker</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure></li><li><p>设置开机启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker.service</span><br></pre></td></tr></table></figure></li><li><p>查看docker状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status docker.service</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装mysql集群（一主二从）"><a href="#安装mysql集群（一主二从）" class="headerlink" title="安装mysql集群（一主二从）"></a>安装<code>mysql</code>集群（一主二从）</h2><ol><li><p>下载<code>mysql</code>镜像上传至服务器，并解压镜像包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker load -i mysql.tar</span><br></pre></td></tr></table></figure></li><li><p>创建挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建配置目录和数据目录</span></span><br><span class="line">mkdir -p /home/mysql/conf /home/mysql/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建配置文件</span></span><br><span class="line">touch /home/mysql/conf/my.cnf</span><br></pre></td></tr></table></figure></li><li><p>编辑<code>my.cnf</code></p><ul><li>主节点配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置server_id,集群中每个服务的server_id不能存在相同</span></span><br><span class="line">server-id = 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置时区</span></span><br><span class="line">default-time-zone = '+08:00'</span><br><span class="line">pid-file = /var/run/mysqld/mysqld.pid</span><br><span class="line">socket = /var/run/mysqld/mysqld.sock</span><br><span class="line"><span class="meta">#</span><span class="bash"> 容器数据目录</span></span><br><span class="line">datadir = /var/lib/mysql</span><br><span class="line">secure-file-priv= NULL</span><br><span class="line"><span class="meta">#</span><span class="bash"> Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line">symbolic-links=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> Custom config should go here</span></span><br><span class="line">!includedir /etc/mysql/conf.d/</span><br><span class="line">max_connections=1000</span><br><span class="line">wait_timeout=28800</span><br><span class="line">interactive_timeout=28800</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开启binlog</span></span></span><br><span class="line">log-bin=mysql-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># binlog缓存</span></span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># binlog格式(mixed、statement、row,默认格式是statement)</span></span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#设置字符编码为utf8mb4</span></span></span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect='SET NAMES utf8mb4'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略大小写</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br></pre></td></tr></table></figure><ul><li>从节点配置</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置server_id,注意要唯一</span></span><br><span class="line">server-id=2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 忽略大小写</span></span><br><span class="line">lower_case_table_names=1</span><br><span class="line">max_connections=1000</span><br><span class="line">wait_timeout=28800</span><br><span class="line">interactive_timeout=28800</span><br><span class="line">default-time_zone = '+8:00'</span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启binlog</span></span><br><span class="line">log-bin=mysql-slave-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> relay_log配置中继日志</span></span><br><span class="line">relay_log=edu-mysql-relay-bin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要同步函数或者存储过程</span></span><br><span class="line">log_bin_trust_function_creators=true</span><br><span class="line"><span class="meta">#</span><span class="bash"> binlog缓存</span></span><br><span class="line">binlog_cache_size=1M</span><br><span class="line"><span class="meta">#</span><span class="bash"> binlog格式(mixed、statement、row,默认格式是statement)</span></span><br><span class="line">binlog_format=mixed</span><br><span class="line"><span class="meta">#</span><span class="bash">设置字符编码为utf8mb4</span></span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect='SET NAMES utf8mb4'</span><br><span class="line">slave_skip_errors=1062</span><br><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br></pre></td></tr></table></figure></li><li><p>运行实例</p><ul><li><p>主节点</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 \</span><br><span class="line">--name mysql-icp-master \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /home/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=sillybilly@2022 \</span><br><span class="line">70325c69f1fe</span><br></pre></td></tr></table></figure></li><li><p>从节点1</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 \</span><br><span class="line">--name  mysql-icp-slave1 \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /home/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=sillybilly@2022 \</span><br><span class="line">70325c69f1fe</span><br></pre></td></tr></table></figure></li><li><p>从节点2</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -p 3306:3306 \</span><br><span class="line">--name  mysql-icp-slave2 \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /home/mysql/conf/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v /home/mysql/data:/var/lib/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=sillybilly@2022 \</span><br><span class="line">70325c69f1fe</span><br></pre></td></tr></table></figure></li></ul></li><li><p>主从同步配置</p><ul><li><p>进入master节点容器，并执行mysql命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 进入mysql命令列界面</span></span><br><span class="line">mysql -uroot -psillybilly@2022</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看主节点信息</span></span><br><span class="line">SHOW MASTER STATUS;</span><br></pre></td></tr></table></figure><p>执行结果</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20230105/1.png" alt="result"></p></li><li><p>进入<code>mysql</code>从节点，编辑同步配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 配置连接的参数</span></span><br><span class="line">change master to master_host='10.10.33.102',master_user='root',master_password='sillybilly@2022',master_log_file='mysql-bin.000003',master_log_pos=62973466;</span><br></pre></td></tr></table></figure><p><code>master_host</code>:主节点ip</p><p><code>master_user</code>:主节点登录用户名</p><p><code>master_password</code>:主节点mysql登录密码</p><p><code>master_log_file</code>:主节点日志文件，修改为<code>master</code>节点执行<code>SHOW MASTER STATUS</code>结果后的<code>File</code>字段</p><p><code>master_log_pos</code>:二进制文件开始位置，修改为<code>master</code>节点执行<code>SHOW MASTER STATUS</code>结果后的<code>Position</code>字段</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止连接，如果一次成功无需使用该命令</span></span><br><span class="line">stop slave;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重置连接</span></span><br><span class="line">reset slave;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动同步</span></span><br><span class="line">start slave;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看从节点状态是否成功</span></span><br><span class="line">show slave status;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 观察两项都为Yes时代表成功。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Slave_IO_Running: Yes</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Slave_SQL_Running: Yes</span></span><br></pre></td></tr></table></figure><p>如果失败的话，需要执行<code>stop slave</code>并检查主节点的账号、密码，地址，<code>pos</code>等参数</p></li></ul></li></ol><h2 id="安装minio集群"><a href="#安装minio集群" class="headerlink" title="安装minio集群"></a>安装<code>minio</code>集群</h2><p>下载<code>minio docker</code>镜像包，并解压镜像，这里不过多赘述</p><h3 id="单机版"><a href="#单机版" class="headerlink" title="单机版"></a>单机版</h3><p>启动<code>docker</code>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">-p 9000:9000 \</span><br><span class="line">-p 19001:19001 \</span><br><span class="line">--name minio-icp \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /data/minio/data:/data \</span><br><span class="line">-e "MINIO_ROOT_USER=sillybilly" \</span><br><span class="line">-e "MINIO_ROOT_PASSWORD=sillybilly@2022" \</span><br><span class="line">minio/minio server /data \</span><br><span class="line">--console-address ":19001" \</span><br><span class="line">--address ":9000"</span><br></pre></td></tr></table></figure><p><code>MINIO_ROOT_USER</code>:用户名</p><p><code>MINIO_ROOT_PASSWORD</code>:密码</p><p><code>console-address</code>:web控制台端口，可不指定</p><p><code>address</code>:api访问端口</p><h3 id="集群版"><a href="#集群版" class="headerlink" title="集群版"></a>集群版</h3><ol><li><p>主机映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 57、58、59三台服务器添加主机映射</span></span><br><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在文件末尾添加以下信息 (实际需改成自己的ip地址，填内网ip,不能填公网ip)</span></span><br><span class="line">10.10.33.57 minio1</span><br><span class="line">10.10.33.58 minio2</span><br><span class="line">10.10.33.59 minio3</span><br></pre></td></tr></table></figure></li><li><p>每个节点指定两个数据目录，例如<code>/opt/data1</code>,<code>/opt/data2</code>,最好是两块单独的磁盘</p></li><li><p>启动<code>minio</code>实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name minio-icp \</span><br><span class="line">--restart&#x3D;always \</span><br><span class="line">--net&#x3D;host \</span><br><span class="line">-e &quot;MINIO_ROOT_USER&#x3D;sillybilly&quot; \</span><br><span class="line">-e &quot;MINIO_ROOT_PASSWORD&#x3D;sillybilly@2022&quot; \</span><br><span class="line">-v &#x2F;opt&#x2F;data1:&#x2F;data1 \</span><br><span class="line">-v &#x2F;opt&#x2F;data2:&#x2F;data2 \</span><br><span class="line">minio&#x2F;minio server \</span><br><span class="line">--address &quot;:9000&quot; \</span><br><span class="line">--console-address &quot;:19001&quot; \</span><br><span class="line">http:&#x2F;&#x2F;minio&#123;1...3&#125;&#x2F;data&#123;1...2&#125;</span><br></pre></td></tr></table></figure></li><li><p>访问<code>10.10.33.57:19001</code>验证</p></li></ol><h2 id="安装elasticsearch集群"><a href="#安装elasticsearch集群" class="headerlink" title="安装elasticsearch集群"></a>安装<code>elasticsearch</code>集群</h2><table><thead><tr><th>ip</th><th>hostname</th><th>default-role</th></tr></thead><tbody><tr><td>10.10.33.102</td><td>node1</td><td>master</td></tr><tr><td>10.10.33.57</td><td>node2</td><td>slave1</td></tr><tr><td>10.10.33.58</td><td>node3</td><td>slave2</td></tr></tbody></table><p><code>elasticsearch8.x</code>需要<code>jdk17</code>，因为我们大多数项目路使用<code>jdk8</code>，所以本次搭建使用<code>elasticsearch:7.17.8</code></p><ol><li><p>添加主机映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/hosts</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加主机映射关系至文件末尾</span></span><br><span class="line">10.10.33.102 node1</span><br><span class="line">10.10.33.57 node2</span><br><span class="line">10.10.33.58 node3</span><br></pre></td></tr></table></figure></li><li><p>调整系统打开文件句柄数以及用户创建进程数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 末尾添加</span></span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 131072</span><br><span class="line">* soft nproc 2048</span><br><span class="line">* hard nproc 4096</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">增大文件句柄数</span></span><br><span class="line">echo 'vm.max_map_count=262144' &gt;&gt;/etc/sysctl.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 立即生效</span></span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure></li><li><p>启动<code>elasticsearch</code>容器，拷贝<code>es</code>挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先简单起容器，方便从容器中把配置拷贝出来</span></span><br><span class="line">docker run -d --name elasticsearch \</span><br><span class="line">-p 9200:9200 \</span><br><span class="line">-p 9300:9300 \</span><br><span class="line">-e  "discovery.type=single-node" \</span><br><span class="line">-e ES_JAVA_OPTS="-Xms256m -Xmx256m" \</span><br><span class="line">elasticsearch:7.17.8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝挂载目录</span></span><br><span class="line">docker cp elasticsearch:/usr/share/elasticsearch/config /data1/elasticsearch</span><br><span class="line">docker cp elasticsearch:/usr/share/elasticsearch/logs /data1/elasticsearch</span><br><span class="line">docker cp elasticsearch:/usr/share/elasticsearch/data /data1/elasticsearch</span><br><span class="line">docker cp elasticsearch:/usr/share/elasticsearch/plugins /data1/elasticsearch</span><br></pre></td></tr></table></figure></li><li><p><code>elasticsearch.yml</code>配置</p><ul><li><p>master</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群名称，集群内所有节点的名称必须一致。</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">icp-es-cluster</span></span><br><span class="line"><span class="comment"># 设置节点名称，集群内节点名称必须唯一。</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node1</span></span><br><span class="line"><span class="comment"># 表示该节点会不会作为主节点，true表示会；false表示不会</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 当前节点是否用于存储数据，是：true、否：false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 索引数据存放的位置</span></span><br><span class="line"><span class="comment">#path.data: /usr/share/elasticsearch/data</span></span><br><span class="line"><span class="comment"># 日志文件存放的位置</span></span><br><span class="line"><span class="comment">#path.logs: /usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="comment"># 需求锁住物理内存，是：true、否：false</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment"># 监听地址，用于访问该es</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># es对外提供的http端口，默认 9200</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">19200</span></span><br><span class="line"><span class="comment"># TCP的默认监听端口，默认 9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">19300</span></span><br><span class="line"><span class="comment"># 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["10.10.33.102:19300",</span> <span class="string">"10.10.33.57:19300"</span><span class="string">,"10.10.33.58:19300"]</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["node1"]</span></span><br><span class="line"><span class="comment"># 是否支持跨域，是：true，在使用head插件时需要此配置</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># “*” 表示支持所有域名</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>slave1</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群名称，集群内所有节点的名称必须一致。</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">icp-es-cluster</span></span><br><span class="line"><span class="comment"># 设置节点名称，集群内节点名称必须唯一。</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node2</span></span><br><span class="line"><span class="comment"># 表示该节点会不会作为主节点，true表示会；false表示不会</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 当前节点是否用于存储数据，是：true、否：false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 索引数据存放的位置</span></span><br><span class="line"><span class="comment">#path.data: /usr/share/elasticsearch/data</span></span><br><span class="line"><span class="comment"># 日志文件存放的位置</span></span><br><span class="line"><span class="comment">#path.logs: /usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="comment"># 需求锁住物理内存，是：true、否：false</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment"># 监听地址，用于访问该es</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># es对外提供的http端口，默认 9200</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">19200</span></span><br><span class="line"><span class="comment"># TCP的默认监听端口，默认 9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">19300</span></span><br><span class="line"><span class="comment"># 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["10.10.33.102:19300",</span> <span class="string">"10.10.33.57:19300"</span><span class="string">,"10.10.33.57:19300"]</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["node1"]</span></span><br><span class="line"><span class="comment"># 是否支持跨域，是：true，在使用head插件时需要此配置</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># “*” 表示支持所有域名</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li><li><p>slave2</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置集群名称，集群内所有节点的名称必须一致。</span></span><br><span class="line"><span class="attr">cluster.name:</span> <span class="string">icp-es-cluster</span></span><br><span class="line"><span class="comment"># 设置节点名称，集群内节点名称必须唯一。</span></span><br><span class="line"><span class="attr">node.name:</span> <span class="string">node3</span></span><br><span class="line"><span class="comment"># 表示该节点会不会作为主节点，true表示会；false表示不会</span></span><br><span class="line"><span class="attr">node.master:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 当前节点是否用于存储数据，是：true、否：false</span></span><br><span class="line"><span class="attr">node.data:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># 索引数据存放的位置</span></span><br><span class="line"><span class="comment">#path.data: /usr/share/elasticsearch/data</span></span><br><span class="line"><span class="comment"># 日志文件存放的位置</span></span><br><span class="line"><span class="comment">#path.logs: /usr/share/elasticsearch/logs</span></span><br><span class="line"><span class="comment"># 需求锁住物理内存，是：true、否：false</span></span><br><span class="line"><span class="comment">#bootstrap.memory_lock: true</span></span><br><span class="line"><span class="comment"># 监听地址，用于访问该es</span></span><br><span class="line"><span class="attr">network.host:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line"><span class="comment"># es对外提供的http端口，默认 9200</span></span><br><span class="line"><span class="attr">http.port:</span> <span class="number">19200</span></span><br><span class="line"><span class="comment"># TCP的默认监听端口，默认 9300</span></span><br><span class="line"><span class="attr">transport.tcp.port:</span> <span class="number">19300</span></span><br><span class="line"><span class="comment"># 设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span></span><br><span class="line"><span class="attr">discovery.zen.minimum_master_nodes:</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，写入候选主节点的设备地址，在开启服务后可以被选为主节点</span></span><br><span class="line"><span class="attr">discovery.seed_hosts:</span> <span class="string">["10.10.33.102:19300",</span> <span class="string">"10.10.33.57:19300"</span><span class="string">,"10.10.33.58:19300"]</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_timeout:</span> <span class="string">1m</span></span><br><span class="line"><span class="attr">discovery.zen.fd.ping_retries:</span> <span class="number">5</span></span><br><span class="line"><span class="comment"># es7.x 之后新增的配置，初始化一个新的集群时需要此配置来选举master</span></span><br><span class="line"><span class="attr">cluster.initial_master_nodes:</span> <span class="string">["node1"]</span></span><br><span class="line"><span class="comment"># 是否支持跨域，是：true，在使用head插件时需要此配置</span></span><br><span class="line"><span class="attr">http.cors.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># “*” 表示支持所有域名</span></span><br><span class="line"><span class="attr">http.cors.allow-origin:</span> <span class="string">"*"</span></span><br><span class="line"><span class="attr">ingest.geoip.downloader.enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>初始化容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name=elasticsearch-icp \</span><br><span class="line">  --restart=always \</span><br><span class="line">  --network=host \</span><br><span class="line">  -v /data1/elasticsearch/config:/usr/share/elasticsearch/config \</span><br><span class="line">  -v /data1/elasticsearch/logs:/usr/share/elasticsearch/logs \</span><br><span class="line">  -v /data1/elasticsearch/data:/usr/share/elasticsearch/data \</span><br><span class="line">  -v /data1/elasticsearch/plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  elasticsearch:7.17.8</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 浏览器输入地址 查看3个节点是否都加入集群</span></span><br><span class="line">http://10.10.33.102:19200/_cat/nodes</span><br></pre></td></tr></table></figure></li><li><p>QA</p><p>如果出现新启动的节点无法加入集群，报错例如: <code>&quot;Caused by: org.elasticsearch.cluster.coordination.CoordinationStateRejectedException: This node previously joined a cluster with UUID [NR0YxxfATD2Y1q4PnhXfoA] and is now trying to join a different cluster with UUID [3d1d4hnwR2e5kU9yYH2K5w]. This is forbidden and usually indicates an incorrect discovery or cluster bootstrapping configuration. Note that the cluster UUID persists across restarts and can only be changed by deleting the contents of the node&#39;s data paths [] which will also remove any data held by this node.&quot;</code></p></li></ol><p>​        可以删除<code>/data1/elasticsearch/data</code>中的数据，再次重启容器</p><h3 id="安装kibana-单机"><a href="#安装kibana-单机" class="headerlink" title="安装kibana(单机)"></a>安装<code>kibana</code>(单机)</h3><ol><li><p><code>kibana.yml</code>配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Kibana的映射端口</span></span><br><span class="line"><span class="attr">server.port:</span> <span class="number">15601</span></span><br><span class="line"><span class="comment">#网关地址</span></span><br><span class="line"><span class="attr">server.host:</span> <span class="string">"0.0.0.0"</span></span><br><span class="line"><span class="comment">#Kibana实例对外展示的名称</span></span><br><span class="line"><span class="attr">server.name:</span> <span class="string">"kibana"</span></span><br><span class="line"><span class="comment">#Elasticsearch的集群地址，也就是说所有的集群IP</span></span><br><span class="line"><span class="attr">elasticsearch.hosts:</span> <span class="string">["http://10.10.33.102:19200","http://10.10.33.57:19200","http://10.10.33.58:19200"]</span></span><br><span class="line"><span class="comment">#设置页面语言，中文使用zh-CN，英文使用en</span></span><br><span class="line"><span class="attr">i18n.locale:</span> <span class="string">"zh-CN"</span></span><br><span class="line"><span class="attr">xpack.monitoring.ui.container.elasticsearch.enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># es用户名、密码</span></span><br><span class="line"><span class="attr">elasticsearch.username:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">elasticsearch.password:</span> <span class="string">""</span></span><br></pre></td></tr></table></figure></li><li><p>容器启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd \</span><br><span class="line">--network=host \</span><br><span class="line">-v /data1/kibana/kibana.yml:/usr/share/kibana/config/kibana.yml  \</span><br><span class="line">--name kibana-icp \</span><br><span class="line">kibana:7.17.8</span><br></pre></td></tr></table></figure></li></ol><h2 id="安装only-office-单机"><a href="#安装only-office-单机" class="headerlink" title="安装only-office(单机)"></a>安装<code>only-office</code>(单机)</h2><p>下载<code>only-office</code>镜像包，这里以<code>onlyoffice/documentserver:7.1</code>为例</p><ol><li><p>创建挂载目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 文档日志</span></span><br><span class="line">mkdir -p /home/onlyoffice/documentserver/logs</span><br><span class="line"><span class="meta">#</span><span class="bash"> 证书</span></span><br><span class="line">mkdir -p /home/onlyoffice/documentserver/data</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件缓存</span></span><br><span class="line">mkdir -p /home/onlyoffice/documentserver/lib</span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据库</span></span><br><span class="line">mkdir -p /home/onlyoffice/documentserver/db</span><br></pre></td></tr></table></figure></li><li><p>启动实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -i -t -d \</span><br><span class="line">--name office-icp \</span><br><span class="line">-p 7001:80 \</span><br><span class="line">--restart=always \</span><br><span class="line">-v /home/onlyoffice/documentserver/logs:/var/log/onlyoffice \</span><br><span class="line">-v /home/onlyoffice/documentserver/data:/var/www/onlyoffice/Data \</span><br><span class="line">-v /home/onlyoffice/documentserver/lib:/var/lib/onlyoffice \</span><br><span class="line">-v /home/onlyoffice/documentserver/db:/var/lib/postgresql \</span><br><span class="line">onlyoffice/documentserver:7.1</span><br></pre></td></tr></table></figure></li></ol><h2 id="未完待补充"><a href="#未完待补充" class="headerlink" title="未完待补充"></a>未完待补充</h2><p>…</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="docker命令"><a href="#docker命令" class="headerlink" title="docker命令"></a>docker命令</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 获取Docker中运行的组件的内网IP</span></span><br><span class="line">docker inspect --format='&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;' 【容器实例名称】</span><br></pre></td></tr></table></figure><h3 id="磁盘挂载"><a href="#磁盘挂载" class="headerlink" title="磁盘挂载"></a>磁盘挂载</h3><h4 id="新建分区"><a href="#新建分区" class="headerlink" title="新建分区"></a>新建分区</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出可用磁盘</span></span><br><span class="line">fdisk -l</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个新的磁盘分区 使用命令：<span class="string">"fdisk 磁盘名称"</span> （仅限2T磁盘的分区）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按提示依次操作</span></span><br><span class="line">fdisk /dev/sdb</span><br></pre></td></tr></table></figure><h4 id="格式化硬盘"><a href="#格式化硬盘" class="headerlink" title="格式化硬盘"></a>格式化硬盘</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure><h4 id="查询硬盘的UUID"><a href="#查询硬盘的UUID" class="headerlink" title="查询硬盘的UUID"></a>查询硬盘的<code>UUID</code></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo blkid</span><br></pre></td></tr></table></figure><h4 id="UUID写入配置"><a href="#UUID写入配置" class="headerlink" title="UUID写入配置"></a><code>UUID</code>写入配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件末尾添加磁盘信息 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> UUID为上一步查询的结果 /data为挂载目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ext4：文件系统类型 defaults:挂载参数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第五个字段为dump 参数 用检查一个文件系统是否应该进行 dump 备份。不需要就设置为 0，如果需要每天备份，设置为 1，不定期备份，设置为 2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 第六个字段为开机检查分区的次序。对于根分区，这个值为 1，表示优先。其它文件系统可以设置为 2，表示次优，如果为 0 或没有设置，开机跳过此文件系统的检查</span></span><br><span class="line">UUID=d6644d06-0532-49d7-b7d4-5875b555a29c /data ext4  defaults 0 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出编辑 重启</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> middleware </tag>
            
            <tag> deploy </tag>
            
            <tag> install </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自定义spring cloud loadbalancer负载路由规则</title>
      <link href="/%E8%87%AA%E5%AE%9A%E4%B9%89springcloud%20loadbalancer%E8%A7%84%E5%88%99%20.html"/>
      <url>/%E8%87%AA%E5%AE%9A%E4%B9%89springcloud%20loadbalancer%E8%A7%84%E5%88%99%20.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在微服务的架构中，虽然每个服务都是独立开发，但是如果一个服务由多个人协同开发，就会出现请求乱窜的问题。即服务A由甲乙两个人共同开发，<code>nacos</code>上会生成<code>A1</code>、<code>A2</code>两个服务实例，甲本地发起一个请求可能会打到乙启动的服务实例上，但该实例上并没有甲开发的新功能，就会导致请求报错。</p><p>为了解决这样尴尬的问题，通常我们都是在<code>naocs</code>上临时将其他节点下线，但这样不仅影响到其他人的开发进度，同时频繁的上下线也比较繁琐，所以从开发效率来看，需要我们另辟蹊径。</p><a id="more"></a><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><h4 id="新增nacos-namespace"><a href="#新增nacos-namespace" class="headerlink" title="新增nacos namespace"></a>新增<code>nacos namespace</code></h4><p><code>namespace</code>: 用于进行租户粒度的配置隔离。不同的命名空间下，可以存在相同的 <code>Group</code> 或 <code>Data ID</code> 的配置。<code>Namespace</code>的常用场景之一是不同环境的配置的区分隔离，例如开发测试环境和生产环境的资源（如配置、服务）隔离等</p><p>由上文描述可知，我们可以通过新增<code>namespace</code>隔离服务请求，这样做确实可以防止接口请求乱窜，但意味着我需要启动接口链路的所有服务，很明显这种方法只能配合环境切换时使用，并不适合我们开发联调阶段，所以<code>pass</code></p><h4 id="修改负载路由规则"><a href="#修改负载路由规则" class="headerlink" title="修改负载路由规则"></a>修改负载路由规则</h4><p>平台使用<code>nacos</code>作为注册中心,<code>spring cloud gateway</code>+<code>spring cloud loadbalancer</code>作为网关路由的负载均衡客户端。那么如何保证由甲发出的请求最后会打到甲A实例上面呢？</p><h5 id="ip路由"><a href="#ip路由" class="headerlink" title="ip路由"></a><code>ip</code>路由</h5><p>在网关中实现功能：获取调用方<code>ip</code>并与本机服务的<code>ip</code>做比较，如果一致则将请求下发给集群中对应<code>ip</code>的服务，否则按默认路由规则随机取一个实例。</p><p>这样可以让开发无感知的实现<code>ip</code>策略的路由，但存在一定的局限性</p><ul><li><p>网络环境千变万化，客户端真实的<code>ip</code>不一定能获取到</p></li><li><p>请求方(前端)和服务端需要在同一台电脑上，否则<code>ip</code>不一致，路由失效</p></li></ul><h5 id="充分利用nacos-metadata"><a href="#充分利用nacos-metadata" class="headerlink" title="充分利用nacos metadata"></a>充分利用<code>nacos metadata</code></h5><p><code>naocs</code>自带元数据管理,我们可以在<code>nacos</code>中自定义一个元数据键值(值由开发指定)，在前端项目中将该元数据键值塞入<code>header</code>中,定义路由规则：如果请求方<code>header</code>键值和服务实例中的元数据键值一致，则将请求下发给对应的服务，否则按默认路由规则随机取一个实例。</p><p>不同的方案对比之后，我决定还是采用第二种方案，虽然需要开发自己指定服务实例，但好在没有局限性，方案也比较可行,不会有什么阻力。</p><h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>敲定了方案，就可以开干了！上文说到整体微服务架构的网关是采用<code>spring cloud loadbalancer</code>作为负载均衡的手段的，方案的关键需要自定义路由匹配规则，那么我们需要大致了解一下<code>spring cloud loadbalancer</code>的实现方案。</p><h4 id="浅析loadbalancer"><a href="#浅析loadbalancer" class="headerlink" title="浅析loadbalancer"></a>浅析<code>loadbalancer</code></h4><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221201/1.png" alt="result"></p><p>为了简化理解，我们把<code>spring cloud balancer</code>抽成上方图中所示的5个主要类。</p><p><code>LoadBalancerClientFactory</code>: 创建客户端、负载均衡器和客户端配置实例的工厂</p><p><code>LoadBalancerClientConfiguration</code>: 负载均衡器配置类</p><p><code>ReactorServiceInstanceLoadBalancer</code>:响应式负载路由接口</p><p><code>RandomLoadBalancer</code>:随机路由的负载均衡器，实现<code>ReactorServiceInstanceLoadBalancer</code>接口</p><p><code>RoundRobinLoadBalancer</code>:轮询路由负载均衡器，实现<code>ReactorServiceInstanceLoadBalancer</code>接口</p><p>我们就是要实现<code>ReactorServiceInstanceLoadBalancer</code>接口，开发一个基于<code>naocs</code>元数据的轮询负载器。现在目标明确了，下面从代码入手看看我们应该如何实现。</p><h4 id="LoadBalancerClientFactory"><a href="#LoadBalancerClientFactory" class="headerlink" title="LoadBalancerClientFactory"></a><code>LoadBalancerClientFactory</code></h4><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221201/2.png" alt="result"></p><p><code>LoadBalancerClientFactory</code>默认注入<code>LoadBalancerClientConfiguration</code>作为负载均衡器的工厂类</p><h4 id="LoadBalancerClientConfiguration"><a href="#LoadBalancerClientConfiguration" class="headerlink" title="LoadBalancerClientConfiguration"></a><code>LoadBalancerClientConfiguration</code></h4><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221201/3.png" alt="result"></p><p>可以看出<code>spring cloud balancer</code>默认的负载器是<code>RoundRobinLoadBalancer</code>，并且因为方法中标有<code>@ConditionalOnMissingBean</code>注解,所以我们可以扩展一个自己的<code>ReactorLoadBalancer</code>。</p><p>注：这里注入的是 <code>LazyProvider</code>，这主要因为在注册这个<code>Bean</code>的时候依赖的其他 <code>Bean</code>可能还没有被加载，所以利用 <code>LazyProvider</code>机制，防止注入报错。</p><h4 id="RoundRobinLoadBalancer"><a href="#RoundRobinLoadBalancer" class="headerlink" title="RoundRobinLoadBalancer"></a><code>RoundRobinLoadBalancer</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; choose(Request request) &#123;</span><br><span class="line">    <span class="comment">// 注入的时候注入的是Lazy Provider，这里取出实际的类 ServiceInstanceListSupplier</span></span><br><span class="line">ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider</span><br><span class="line">.getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line">    <span class="comment">// 获取实例列表 并从列表中选择一个实例</span></span><br><span class="line"><span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">.map(serviceInstances -&gt; processInstanceResponse(supplier, serviceInstances));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">processInstanceResponse</span><span class="params">(ServiceInstanceListSupplier supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;</span><br><span class="line">Response&lt;ServiceInstance&gt; serviceInstanceResponse = getInstanceResponse(serviceInstances);</span><br><span class="line">    <span class="comment">// ServiceInstanceListSupplier实现了SelectedInstanceCallback的话，则执行下面的逻辑进行回调。SelectedInstanceCallback就是每次负载均衡器选择实例之后进行的回调方法</span></span><br><span class="line"><span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">getInstanceResponse</span><span class="params">(List&lt;ServiceInstance&gt; instances)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">log.warn(<span class="string">"No servers available for service: "</span> + serviceId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> EmptyResponse();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// TODO 加入一些自己的路由规则来获取ServiceInstance</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// Ignore the sign bit, this allows pos to loop sequentially from 0 to</span></span><br><span class="line"><span class="comment">// Integer.MAX_VALUE</span></span><br><span class="line">    <span class="comment">// 循环规则：原子自增取绝对值</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="keyword">this</span>.position.incrementAndGet() &amp; Integer.MAX_VALUE;</span><br><span class="line"><span class="comment">// 取模运算</span></span><br><span class="line">    ServiceInstance instance = instances.get(pos % instances.size());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> DefaultResponse(instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完上面三个类代码，已经不需要考虑<code>RoundRobinLoadBalancer</code>的实现了，我们只需要基于<code>RoundRobinLoadBalancer</code>代码魔改出一套自己的路由规则即可。由此我们需要编写配置类注入自己的<code>ReactorLoadBalancer</code>。</p><p>那么现在就只剩下一个问题，我们的配置类该如何注入？</p><h4 id="LoadBalancerAutoConfiguration"><a href="#LoadBalancerAutoConfiguration" class="headerlink" title="LoadBalancerAutoConfiguration"></a><code>LoadBalancerAutoConfiguration</code></h4><p>我是看他名字觉得像是”罪恶之源”，最后看代码并且打断点证实了我的想法,我们先看下他的源码</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221201/4.png" alt="result"></p><p>最后一个方法可以看出他是读取所有的<code>LoadBalancerClientSpecification</code>作为<code>LoadBalancerClientFactory</code>的配置,那就是要看</p><p>这些<code>LoadBalancerClientSpecification</code>是如何创建的？我也没有好的办法，在这个<code>jar</code>包中全局搜索<code>LoadBalancerClientSpecification.class</code>类，最后让我定位到<code>LoadBalancerClientConfigurationRegistrar</code>。那就看下他的代码实现吧。</p><h4 id="LoadBalancerClientConfigurationRegistrar"><a href="#LoadBalancerClientConfigurationRegistrar" class="headerlink" title="LoadBalancerClientConfigurationRegistrar"></a><code>LoadBalancerClientConfigurationRegistrar</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerClientConfigurationRegistrar</span> <span class="keyword">implements</span> <span class="title">ImportBeanDefinitionRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 代码省略</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerBeanDefinitions</span><span class="params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 这里获取LoadBalancerClients元数据</span></span><br><span class="line">        Map&lt;String, Object&gt; attrs = metadata.getAnnotationAttributes(LoadBalancerClients<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">true</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (attrs != <span class="keyword">null</span> &amp;&amp; attrs.containsKey(<span class="string">"value"</span>)) &#123;</span><br><span class="line">AnnotationAttributes[] clients = (AnnotationAttributes[]) attrs.get(<span class="string">"value"</span>);</span><br><span class="line"><span class="keyword">for</span> (AnnotationAttributes client : clients) &#123;</span><br><span class="line">registerClientConfiguration(registry, getClientName(client), client.get(<span class="string">"configuration"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 负载器默认配置类</span></span><br><span class="line"><span class="keyword">if</span> (attrs != <span class="keyword">null</span> &amp;&amp; attrs.containsKey(<span class="string">"defaultConfiguration"</span>)) &#123;</span><br><span class="line">String name;</span><br><span class="line"><span class="keyword">if</span> (metadata.hasEnclosingClass()) &#123;</span><br><span class="line">name = <span class="string">"default."</span> + metadata.getEnclosingClassName();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">name = <span class="string">"default."</span> + metadata.getClassName();</span><br><span class="line">&#125;</span><br><span class="line">registerClientConfiguration(registry, name, attrs.get(<span class="string">"defaultConfiguration"</span>));</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">// 获取LoadBalancerClient元数据</span></span><br><span class="line">Map&lt;String, Object&gt; client = metadata.getAnnotationAttributes(LoadBalancerClient<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>(), <span class="title">true</span>)</span>;</span><br><span class="line">        <span class="comment">// 这个方法代码省略的部分  其实就是获取服务名称且LoadBalancerClient注解不指定名称会抛出IllegalStateException</span></span><br><span class="line">String name = getClientName(client);</span><br><span class="line"><span class="keyword">if</span> (name != <span class="keyword">null</span>) &#123;</span><br><span class="line">registerClientConfiguration(registry, name, client.get(<span class="string">"configuration"</span>));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">registerClientConfiguration</span><span class="params">(BeanDefinitionRegistry registry, Object name,</span></span></span><br><span class="line"><span class="function"><span class="params">Object configuration)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// buider模式构建一个LoadBalancerClientSpecification对象</span></span><br><span class="line">BeanDefinitionBuilder builder = BeanDefinitionBuilder</span><br><span class="line">.genericBeanDefinition(LoadBalancerClientSpecification<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">builder.addConstructorArgValue(name);</span><br><span class="line">        <span class="comment">// 指定负载均衡器的配置类</span></span><br><span class="line">builder.addConstructorArgValue(configuration);</span><br><span class="line">        <span class="comment">// 注册对象</span></span><br><span class="line">registry.registerBeanDefinition(name + <span class="string">".LoadBalancerClientSpecification"</span>, builder.getBeanDefinition());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过我们不懈的调试，这块加载类加载流程也正如我们想的那样，我们可以在启动类上定义<code>@LoadBalancerClients</code>或者<code>@LoadBalancerClient</code>注解，指定负载均衡器的配置类，进而自动装配我的负载器完成需求。</p><p>整个源码看完，思路一下子就打开了，下面就到了实现环节了！</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>由上一节的代码分析可知，我们需要基于<code>RoundRobinLoadBalancer</code>轮询策略实现一套自己的<code>balancer</code>，我们起名为<code>ServerNameLoadBalancer</code>实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.Log;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.logging.LogFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.ObjectProvider;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.loadbalancer.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.NoopServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorServiceInstanceLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.SelectedInstanceCallback;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> reactor.core.publisher.Mono;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义路由规则 请求优先下发到指定的metadata.server-name</span></span><br><span class="line"><span class="comment"> * 主体方法拷贝至RoundRobinLoadBalancer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.cloud.loadbalancer.core.RoundRobinLoadBalancer#choose(Request)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022-11-30 10:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerNameLoadBalancer</span> <span class="keyword">implements</span> <span class="title">ReactorServiceInstanceLoadBalancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log log = LogFactory.getLog(ServerNameLoadBalancer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> String serviceId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> AtomicInteger position;</span><br><span class="line"></span><br><span class="line">    ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String INSTANCE_SERVER_NAME = <span class="string">"server-name"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceInstanceListSupplierProvider a provider of</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> ServiceInstanceListSupplier&#125; that will be used to get available instances</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serviceId id of the service for which to choose an instance</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerNameLoadBalancer</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,String serviceId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(serviceInstanceListSupplierProvider, serviceId, <span class="keyword">new</span> Random().nextInt(<span class="number">1000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ServerNameLoadBalancer</span><span class="params">(ObjectProvider&lt;ServiceInstanceListSupplier&gt; serviceInstanceListSupplierProvider,String serviceId, <span class="keyword">int</span> seedPosition)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.serviceId = serviceId;</span><br><span class="line">        <span class="keyword">this</span>.serviceInstanceListSupplierProvider = serviceInstanceListSupplierProvider;</span><br><span class="line">        <span class="keyword">this</span>.position = <span class="keyword">new</span> AtomicInteger(seedPosition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Mono&lt;Response&lt;ServiceInstance&gt;&gt; choose(Request request) &#123;</span><br><span class="line"></span><br><span class="line">        ServiceInstanceListSupplier supplier = serviceInstanceListSupplierProvider</span><br><span class="line">                .getIfAvailable(NoopServiceInstanceListSupplier::<span class="keyword">new</span>);</span><br><span class="line">        <span class="comment">// 这里额外传入request对象用于解析请求头</span></span><br><span class="line">        <span class="keyword">return</span> supplier.get(request).next()</span><br><span class="line">                .map(serviceInstances -&gt; <span class="keyword">this</span>.processInstanceResponse(request, supplier, serviceInstances));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">processInstanceResponse</span><span class="params">(Request request, ServiceInstanceListSupplier supplier,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                              List&lt;ServiceInstance&gt; serviceInstances)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// request对象带入getInstanceResponse方法</span></span><br><span class="line">        Response&lt;ServiceInstance&gt; serviceInstanceResponse = <span class="keyword">this</span>.getInstanceResponse(request, serviceInstances);</span><br><span class="line">        <span class="keyword">if</span> (supplier <span class="keyword">instanceof</span> SelectedInstanceCallback &amp;&amp; serviceInstanceResponse.hasServer()) &#123;</span><br><span class="line">            ((SelectedInstanceCallback) supplier).selectedServiceInstance(serviceInstanceResponse.getServer());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> serviceInstanceResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response&lt;ServiceInstance&gt; <span class="title">getInstanceResponse</span><span class="params">(Request request, List&lt;ServiceInstance&gt; instances)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instances.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                log.warn(<span class="string">"No servers available for service: "</span> + serviceId);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> EmptyResponse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取请求头server-name属性值</span></span><br><span class="line">        String serverName = StringUtils.EMPTY;</span><br><span class="line">        <span class="comment">// 路由实例</span></span><br><span class="line">        ServiceInstance instance = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != request.getContext() &amp;&amp; request.getContext() <span class="keyword">instanceof</span> RequestDataContext) &#123;</span><br><span class="line">            List&lt;String&gt; serverNames = ((RequestDataContext) request.getContext()).getClientRequest().getHeaders().get(INSTANCE_SERVER_NAME);</span><br><span class="line">            <span class="comment">// 有且只取其中一个</span></span><br><span class="line">            serverName = Optional.ofNullable(serverNames).map(m -&gt; m.get(<span class="number">0</span>)).orElse(StringUtils.EMPTY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// Metadata.server-name 优先匹配</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; instances.size(); i++) &#123;</span><br><span class="line">            ServiceInstance serviceInstance = instances.get(i);</span><br><span class="line">            <span class="comment">// serverName一致</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.equals(serviceInstance.getMetadata().get(INSTANCE_SERVER_NAME),serverName)) &#123;</span><br><span class="line">                instance = serviceInstance;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// instance为空说明未配置server-name,或请求头未带server-name，走默认路由规则</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == instance) &#123;</span><br><span class="line">            <span class="comment">// Ignore the sign bit, this allows pos to loop sequentially from 0 to</span></span><br><span class="line">            <span class="comment">// Integer.MAX_VALUE</span></span><br><span class="line">            <span class="keyword">int</span> pos = <span class="keyword">this</span>.position.incrementAndGet() &amp; Integer.MAX_VALUE;</span><br><span class="line"></span><br><span class="line">            instance = instances.get(pos % instances.size());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultResponse(instance);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们需要定义一个<code>LoadBalancer</code>配置类用于覆盖默认<code>ReactorLoadBalancer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.justai.icp.gateway.balancer.ServerNameLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.client.ServiceInstance;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ReactorLoadBalancer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.core.ServiceInstanceListSupplier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cloud.loadbalancer.support.LoadBalancerClientFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.env.Environment;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * LoadBalancer配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2022-11-30 16:53</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoadBalancerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 参考默认实现</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> org.springframework.cloud.loadbalancer.annotation.LoadBalancerClientConfiguration#reactorServiceInstanceLoadBalancer</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReactorLoadBalancer&lt;ServiceInstance&gt; <span class="title">reactorServiceInstanceLoadBalancer</span><span class="params">(Environment environment,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                                                   LoadBalancerClientFactory loadBalancerClientFactory)</span> </span>&#123;</span><br><span class="line">        String name = environment.getProperty(LoadBalancerClientFactory.PROPERTY_NAME);</span><br><span class="line">        <span class="comment">// 加载自定义负载器</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServerNameLoadBalancer(loadBalancerClientFactory.getLazyProvider(name, ServiceInstanceListSupplier<span class="class">.<span class="keyword">class</span>), <span class="title">name</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后在启动类添加注解<code>@LoadBalancerClients(defaultConfiguration = {LoadBalancerConfig.class})</code>，自定义网关负载器就实现啦！</p><p>后面就再也不用为服务乱窜而烦心了，哈哈~</p>]]></content>
      
      
      <categories>
          
          <category> spring cloud gateway </category>
          
          <category> spring cloud loadbalancer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> loadbalancer </tag>
            
            <tag> code analyze </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis mapper扫描问题</title>
      <link href="/mybatis%20Mapper%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98.html"/>
      <url>/mybatis%20Mapper%E6%98%A0%E5%B0%84%E9%97%AE%E9%A2%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>一个平凡的晚上，我悠闲自得的一边听歌一边码着代码，突然调试页面上报错500，查看后端显示<code>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found):xx</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/1.png" alt="result"></p><p>很显然这是<code>mybatis mapper</code>映射关系出了问题，但问题的原因分为很多种，且此前没有遇到过这样的情况，所以在此记录一下。</p><a id="more"></a><h2 id="三板斧"><a href="#三板斧" class="headerlink" title="三板斧"></a>三板斧</h2><p>每个人处理问题都有自己的一套流程，不太愿意遇到问题直接<code>debug</code>源码。所以我也是按照过往经验，逐个排查问题可能存在的原因。这里以若依（多模块单体应用）为例，复现问题场景。</p><h4 id="mapper-xml书写错误"><a href="#mapper-xml书写错误" class="headerlink" title="mapper.xml书写错误"></a><code>mapper.xml</code>书写错误</h4><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/2.png" alt="result"></p><p><code>xxMapper.xml</code>的<code>namespace</code>配置确认无误，查询<code>id</code>与<code>xxMapper.java</code>里的方法名也保持一致，所以不存在书写错误，这一情况直接否了。</p><h4 id="mapperLocations未正确配置"><a href="#mapperLocations未正确配置" class="headerlink" title="mapperLocations未正确配置"></a><code>mapperLocations</code>未正确配置</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Mybatis-plus</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br></pre></td></tr></table></figure><p>因为若依框架是多模块工程，需要扫描jar包内部的<code>mapper</code>文件，所以需要配置<code>classpath*</code>而不能配置为<code>classpath</code>。但我们这里配置是没有任何问题的。但我一度认为这个配置没有生效，于是乎手动定义<code>SqlSessionFactory</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">//实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">    String typeAliasesPackage = env.getProperty(<span class="string">"mybatis-plus.typeAliasesPackage"</span>);</span><br><span class="line">    <span class="comment">// 配置mapper.xml地址  </span></span><br><span class="line">    String mapperLocations = env.getProperty(<span class="string">"mybatis-plus.mapperLocations"</span>);</span><br><span class="line">    <span class="comment">// 驼峰转换与缓存配置</span></span><br><span class="line">    String configLocation = env.getProperty(<span class="string">"mybatis-plus.configLocation"</span>);</span><br><span class="line">    ...</span><br><span class="line">    sessionFactory.setDataSource(dataSource);</span><br><span class="line">    sessionFactory.setTypeAliasesPackage(typeAliasesPackage);</span><br><span class="line">    sessionFactory.setMapperLocations(<span class="keyword">new</span> PathMatchingResourcePatternResolver().getResources(mapperLocations));</span><br><span class="line">    sessionFactory.setConfigLocation(<span class="keyword">new</span> DefaultResourceLoader().getResource(configLocation));</span><br><span class="line">    <span class="keyword">return</span> sessionFactory.getObject();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>报错依然存在，于是排除<code>mapper-locations</code>的配置问题</p><h4 id="未及时maven-install"><a href="#未及时maven-install" class="headerlink" title="未及时maven install"></a>未及时<code>maven install</code></h4><p>因为是多模块开发，可能我在当前模块新增的<code>xxMapper.xml</code>文件，没有打包到启动<code>jar</code>包里面？虽然-但是经检查打包也没有什么问题。</p><h2 id="异常堆栈追溯"><a href="#异常堆栈追溯" class="headerlink" title="异常堆栈追溯"></a>异常堆栈追溯</h2><p>可惜一套三板斧挥完，却找不到问题的原因，无奈只能按照堆栈从源码入手了。</p><h4 id="MybatisMapperProxy"><a href="#MybatisMapperProxy" class="headerlink" title="MybatisMapperProxy"></a><code>MybatisMapperProxy</code></h4><p>了解过<code>mybatis</code>源码的应该都知道，我们获取的<code>mapper</code>映射对象是<code>jdk</code>生成的接口的动态代理类<code>org.apache.ibatis.binding.MapperProxy</code>，它实现了<code>InvocationHandler</code>接口,是我们<code>sql</code>执行的入口。</p><p>我们平台集成的<code>mybatis-plus</code>,它从<code>mybatis</code>中拷贝出<code>MapperProxy</code>，衍生出<code>MybatisMapperProxy</code>,所以一切报错的源头都要从这个类看起。因为是动态代理，这里执行<code>invoke</code>方法</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/3.png" alt="result"></p><p><code>if (Object.class.equals(method.getDeclaringClass()))</code>肯定不成立，我们直接跳过看<code>MybatisMapperProxy#cachedInvoker</code>方法。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/4.png" alt="result"></p><p><code>CollectionUtils.computeIfAbsent</code>其实就是调用的<code>concurrentHashMap#computeIfAbsent</code>,如果<code>methodCache.get(method)</code>为null,就执行内部匿名函数</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/5.png" alt="result"></p><p>所以我们大致能明白<code>methodCache</code>充当了一个二级缓存的效果,如果每次的查询的方法一致就直接从缓存中取出结果返回。</p><p>当然第一次执行的时候，我们的缓存中肯定是空的，且我们需要执行的方法并不是默认实现，所以就执行到这一步</p><p><code>return new PlainMethodInvoker(new MybatisMapperMethod(mapperInterface, method, sqlSession.getConfiguration()));</code></p><h4 id="MybatisMapperMethod"><a href="#MybatisMapperMethod" class="headerlink" title="MybatisMapperMethod"></a><code>MybatisMapperMethod</code></h4><p><code>PlainMethodInvoker</code>是<code>MybatisMapperProxy</code>一个内部类,它实现了<code>MapperMethodInvoker</code>接口,它的职责是通过<code>MyBatis</code>自定义的<code>MapperMethod</code>来执行对应的<code>sqlSession</code> 请求。我们需要先看<code>new MybatisMapperMethod</code>构造函数由哪些部分组成</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/6.png" alt="result"></p><p><code>SqlCommand</code>调用<code>resolveMappedStatement</code>获取一个映射语句<code>MappedStatement</code>，然后设置其<code>name</code>和<code>type</code></p><p><code>MethodSignature</code>类定义了<code>method</code>相关属性与本次排查无关。</p><p>所以呢，我们直接<code>rua</code>到<code>MapperMethod#SqlCommand</code>方法中</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/7.png" alt="result"></p><p>这里看到了我们的预期报错日志，那么就有理由怀疑<code>MappedStatement</code>对象为空,导致方法抛出<code>BindingException</code>异常</p><p>我们查看<code>resolveMappedStatement</code>执行情况来验证我们的猜想</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/8.png" alt="result"></p><p><code>statementId</code>很明显是请求接口的全限定名,当前参数<code>MapperInterface</code>和<code>declaringClass</code>一致，所以如果<code>configuration.hasStatement(statementId): false</code>,实际就是<code>Configuration#mappedStatements</code>中需要包含这个<code>statementId</code>，否则此方法便会走到<code>else if</code>分支，返回<code>null</code>导致页面报错。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/9.png" alt="result"></p><p>从上图执行结果来看，也确实如此，<code>mappedStatements</code>并没有包含我们想加载的<code>statementId</code>，所以下一步我们要看<code>mappedStatements</code>是如何初始化的</p><h4 id="MybatisPlusAutoConfiguration"><a href="#MybatisPlusAutoConfiguration" class="headerlink" title="MybatisPlusAutoConfiguration"></a><code>MybatisPlusAutoConfiguration</code></h4><p>前面饶了一大圈，主要是从报错方向入手找到问题的根本原因。因为我们知道<code>mappedStatements</code>是由<code>MybatisPlusAutoConfiguration#sqlSessionFactory</code>初始化而来， 所以现在又回到最初的起点。当然也可以通过打断点看调用链找到初始化源头</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/10.png" alt="result"></p><p>在<code>MybatisSqlSessionFactoryBean#buildSqlSessionFactory</code>方法中有这样一段</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历所有已加载的mapper.xml</span></span><br><span class="line"><span class="keyword">for</span> (Resource mapperLocation : <span class="keyword">this</span>.mapperLocations) &#123;</span><br><span class="line">  <span class="keyword">if</span> (mapperLocation == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    XMLMapperBuilder xmlMapperBuilder = <span class="keyword">new</span> XMLMapperBuilder(mapperLocation.getInputStream(),</span><br><span class="line">      targetConfiguration, mapperLocation.toString(), targetConfiguration.getSqlFragments());</span><br><span class="line">    <span class="comment">// 初始化mappedStatements入口</span></span><br><span class="line">    xmlMapperBuilder.parse();</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NestedIOException(<span class="string">"Failed to parse mapping resource: '"</span> + mapperLocation + <span class="string">"'"</span>, e);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ErrorContext.instance().reset();</span><br><span class="line">  &#125;</span><br><span class="line">  LOGGER.debug(() -&gt; <span class="string">"Parsed mapper file: '"</span> + mapperLocation + <span class="string">"'"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在调试过程中我发现<code>mapperLocations</code>中并不存在新增的<code>mapper.xml</code>,这是导致该<code>mapper</code>中的方法未加载到<code>mappedStatements</code>的根本原因。</p><p>那么为什么<code>yml</code>配置文件的<code>mapperLocations</code>正确配置，却未加载<code>xml</code>文件呢？带着问题，我们回到<code>MybatisPlusAutoConfiguration</code>看下<code>mapperLocations</code>的初始化方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (!ObjectUtils.isEmpty(this.properties.resolveMapperLocations())) &#123;</span><br><span class="line">factory.setMapperLocations(this.properties.resolveMapperLocations());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现源头在<code>this.properties.resolveMapperLocations()</code>方法中，主要是通过<code>ResourceLoader</code>作为统一资源定位器,获取正则目录下的所有<code>xml</code>文件</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/11.png" alt="result"></p><p>从上面的截图可以发现，所有加载的<code>xml</code>都是从编译后的<code>target</code>文件中获取的,且<code>sys</code>、<code>quartz</code>、<code>gen</code>模块都是能正常加载的。</p><p>第一反应，难不成新建的<code>crawler</code>模块下面没有可以加载的<code>xml</code>文件？所以跑去<code>target</code>下查看目录结构</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/12.png" alt="result"></p><p>乍一看好像没毛病，可为什么<code>sys</code>模块可以正常运行呢？</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/13.png" alt="result"></p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/14.png" alt="result"></p><p>猛然发现了一个华点！！为什么编译后<code>crawler</code>模块下的<code>mapper</code>和<code>crawler</code>没有分层？猛拍脑壳哈哈</p><p><code>idea</code>选中<code>resource</code>下的<code>mapper.crawler</code>右击<code>open in explorer</code></p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/20221124/15.png" alt="result"></p><p>果然！！<code>mapper.crawler</code>是一个文件，但在编译器中看不出差别,所以这就是<code>mapper-locations</code>配置为<code>classpath*:mapper/**/*Mapper.xml</code>却没有成功加载<code>mapper.xml</code>的根本原因，正则匹配不上…</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>经验 + 1 ， 三板斧 + 1</p>]]></content>
      
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT原理与基本使用</title>
      <link href="/JWT%E5%8E%9F%E7%90%86%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html"/>
      <url>/JWT%E5%8E%9F%E7%90%86%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>写这篇文章的原因是因为前段时间接手了一个项目，它并没有使用公司的统一的单点登录平台<code>sso</code>,而是通过调用<code>uim</code>接口来验证用户信息，并以<code>JWT</code>的实现方式生成一段token存到客户端的<code>localStorage</code>中，登录后的客户端每次携带该<code>token</code>去请求后端，经由后端服务器自定义的<code>filter</code>解析校验<code>token</code>完成登录。</p><p>究其原因，可能目前<code>sso</code>的实现方案符合<code>cas</code>标准，需要利用浏览器的重定向功能，而<code>app</code>全是接口交互，所以在系统需要兼容<code>web</code>端与移动端的情况下，采用了<code>JWT</code>来实现登录认证流程。之前我对于<code>JWT</code>是一种半了解的状态，于是乎趁此机会浅学了一波<code>JWT</code>的基本使用。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><code>JSON Web Token</code>简称<code>JWT</code>，在<code><a href="https://jwt.io/" target="_blank" rel="noopener">https://jwt.io/</a></code>中，有一段对于<code>JWT</code>的描述，大体意思为<code>JWT</code>拥有一套开放的行业标准(<code>RFC 7519</code>)，里面详细介绍了<code>JWT</code>的基本概念，<code>Claims</code>的含义、布局和算法实现等。<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/jwt/4.png" alt="result"><br><code>JWT</code>是一种紧凑的<code>Claims</code>声明格式，适用于空间受限的网络环境中传输，例如 <code>HTTP</code>授权标头和 <code>URI</code> 查询参数。<code>JWT</code> 对<code>Claims</code>编码并转化为<code> JSON [RFC7159]</code> 对象传输，它被用作<code>JWS[RFC 7515]</code>的有效载荷或者<code>JWE[RFC 7516]</code>（加密后）的字符串。<code>JWT</code> 使用 <code>JWS/JWE Compact</code> 序列化，使用<code>Message Authentication Code (MAC)</code>and/or 加密手段对claims签名并提供完整性保护。</p><p>以上概念摘自规范性文件<a href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noopener">RFC7519</a>，对于文中提到了<code>JWS</code>、<code>JWE</code>简单描述如下：</p><p><code>JWS</code>（祥见<a href="https://www.rfc-editor.org/info/rfc7515" target="_blank" rel="noopener">RFC 7515</a>）：<code>JSON Web Signature</code>，使用基于<code>JSON</code>的数据结构的数字签名或消息身份验证码（MAC），对传输的Claims提供了完整性保护（<code>Claims</code>内容不被篡改，但会暴露明文）。</p><p><code>JWE</code>（详见<a href="https://www.rfc-editor.org/info/rfc7516" target="_blank" rel="noopener">RFC 7516</a>）：<code>JSON Web Encryption</code>，使用基于<code> JSON</code> 的数据结构的加密内容、这使得<code>Claims</code>在传输过程中被破解的难度提高。</p><p>目前已知的主流框架大都未实现<code>JWE</code>,例如<code>JJWT、auth0</code>，故下文主要以<code>JWS</code>实现方式展开讨论。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Currently Unsupported Features(当前不支持的功能)</span><br><span class="line">Non-compact serialization and parsing.</span><br><span class="line">JWE (Encryption for JWT)</span><br></pre></td></tr></table></figure><h2 id="JWT布局"><a href="#JWT布局" class="headerlink" title="JWT布局"></a>JWT布局</h2><p><code>JWS</code>的紧凑布局定义为:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">BASE64URL(UTF8(JWS Protected Header)) || '.' ||</span><br><span class="line">BASE64URL(JWS Payload) || '.' ||</span><br><span class="line">BASE64URL(JWS Signature)</span><br></pre></td></tr></table></figure><p>可以看出<code>JWT</code>由三个部分组成，并且各个部分分别使用Base64url编码，然后以句点连接，他的表现形式如下:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const token = base64urlEncoding(header) + '.' + base64urlEncoding(payload) + '.' + base64urlEncoding(signature)</span><br></pre></td></tr></table></figure><p>此外还有非紧凑布局，将<code>header</code>、<code>payload</code>、<code>signature</code>组合成一个json形式展示，此次不展开讨论（有关紧凑布局、非紧凑布局的概念详见<a href="https://datatracker.ietf.org/doc/html/rfc7515#section-3.2" target="_blank" rel="noopener"><code>JWS JSON</code>序列化概述</a>）</p><h3 id="header"><a href="#header" class="headerlink" title="header"></a>header</h3><p><code>JWT</code>中的header又称<code>Jose header</code>，包含描述加密操作和对象签名的参数。下方是<code>JWT</code>中常用的<code>header</code>字段:</p><table><thead><tr><th>code(简拼)</th><th>name（全拼）</th><th>description（描述）</th></tr></thead><tbody><tr><td>typ</td><td>Token type</td><td>token类型(JWT、JWS、JWE)</td></tr><tr><td>cty</td><td>Content type</td><td>payload部分的MediaType(使用嵌套签名或加密，建议将其设置为JWT)</td></tr><tr><td>alg</td><td>Message authentication code algorithm</td><td>加解密算法</td></tr><tr><td>kid</td><td>Key ID</td><td>算法密钥</td></tr><tr><td>x5c</td><td>x.509 Certificate Chain</td><td>x509证书链（用于服务器验证签名是否有效以及令牌是否真实）</td></tr><tr><td>x5u</td><td>x.509 Certificate Chain URL</td><td>x509证书链的URL（服务器将检索并使用此信息来验证签名是否真实）</td></tr><tr><td>crit</td><td>Critical</td><td>用作实现定义的扩展，以便接受有效的令牌</td></tr></tbody></table><h3 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h3><p><code>payload</code>部分其实就是一个完整的<code>Claims</code>,而<code>Claims</code>本质上是一个<code>JSON</code>字符串，我们会以<code>k-v</code>的形式去定义它。<code>JWT</code>规范中定义了内置的一些<code>Claims</code>属性，我们可以选用或者自定义一些业务特定的<code>Claims</code>(当然不能和内置的<code>Claims</code>发生冲突)，由于payload部分在<code>JWS</code>中仅作base64编码，即明文是直接暴露在外面的，所以自定义<code>Claims</code>的内容不能涉敏。</p><p><code>JWT</code>中预定义的<code>Claims</code>:</p><table><thead><tr><th>code(简拼)</th><th>name（全拼）</th><th>description（描述）</th></tr></thead><tbody><tr><td>iss</td><td>Issuer</td><td>确定发布JWT的负责人</td></tr><tr><td>sub</td><td>Subject</td><td>确定JWT的主体</td></tr><tr><td>aud</td><td>Audience</td><td>标识JWT的目标收件人</td></tr><tr><td>exp</td><td>Expiration Time</td><td>过期时间</td></tr><tr><td>nbf</td><td>Not Before</td><td>确定JWT开始接受处理的时间。该值必须是NumericDate</td></tr><tr><td>iat</td><td>Issued at</td><td>确定发布JWT的时间。该值必须是NumericDate</td></tr><tr><td>jti</td><td>JWT ID</td><td>令牌的唯一标识符(区分大小写)</td></tr></tbody></table><h3 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h3><p><code>JWS</code>生成签名依赖特定的签名算法将<code>header、payload</code>部分进行一次签名加密，比较常见的如<code>HS256(HMAC-SHA256)、RS256(RSA-SHA256)</code>。在<code>base64UrlEncode(header).base64UrlEncode(payload).</code>之后拼上此次计算的签名（base64编码后）即为一个完整的<code>java web token</code>。</p><p> 以简单的<code>HMAC-SHA256</code>为例(伪)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义32位密钥</span></span><br><span class="line">String secretKey = <span class="string">"11111111111111111111111111111111"</span>;</span><br><span class="line"><span class="comment">// header payload 为base64编码后的值</span></span><br><span class="line">String content = header + <span class="string">"."</span> + payload;</span><br><span class="line">Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256,secretKey.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"><span class="comment">// 签名</span></span><br><span class="line"><span class="keyword">byte</span>[] output = mac.doFinal(content.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"><span class="comment">// base64得到最终签名结果</span></span><br><span class="line">String signaturePart = <span class="keyword">new</span> String(Base64.encodeBase64URLSafe(output), StandardCharsets.UTF_8);</span><br></pre></td></tr></table></figure><h2 id="JWT认证流程"><a href="#JWT认证流程" class="headerlink" title="JWT认证流程"></a>JWT认证流程</h2><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/jwt/3.png" alt="result"></p><p>由上图可知，整个<code>JWT</code>的认证流程分为6步：</p><ul><li>用户从浏览器携带用户名、密码等身份信息进行登录</li><li>服务端确认身份信息后，通过指定的签名算法生成<code>token</code>(不包含敏感信息)</li><li>服务器将<code>JWT</code>返回给浏览器端</li><li>浏览器之后的请求中会把<code>token</code>携带在<code>Authorization Header</code>中一起发给服务端</li><li>服务器验证<code>JWT</code>(包含签名以及特定的<code>Claims</code>属性)</li><li>服务器将验证结果返回给浏览器</li></ul><h2 id="JWT生成解析流程"><a href="#JWT生成解析流程" class="headerlink" title="JWT生成解析流程"></a>JWT生成解析流程</h2><p>基于前面对<code>JWT</code>的认知，我们可以通过硬编码的方式，实现一套<code>JWT(JWS)</code>的生成、解析、校验的流程。</p><p>引入<code>common、json</code>相关包：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-codec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;latest-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;latest-version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>生成<code>JWT</code>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT签名采用HMAC SHA-256散列算法</span></span><br><span class="line"><span class="comment"> * 为了简化开发 固定header内容</span></span><br><span class="line"><span class="comment"> * 为例简化开发 固定claims</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonGenerator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 256bit 密钥</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY = <span class="string">"11111111111111111111111111111111"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化序列化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ObjectMapper OBJECT_MAPPER = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// header</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,String&gt; HEADER = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// payload</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String,Object&gt; CLAIMS = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 定义Token类型</span></span><br><span class="line">        HEADER.put(<span class="string">"typ"</span>,<span class="string">"JWT"</span>);</span><br><span class="line">        <span class="comment">// 定义签名算法</span></span><br><span class="line">        HEADER.put(<span class="string">"alg"</span>,<span class="string">"HS256"</span>);</span><br><span class="line">        <span class="comment">// 定义发行方</span></span><br><span class="line">        CLAIMS.put(<span class="string">"iss"</span>, <span class="string">"iss"</span>);</span><br><span class="line">        <span class="comment">// uuid</span></span><br><span class="line">        CLAIMS.put(<span class="string">"jti"</span>, <span class="number">1234567890L</span>);</span><br><span class="line">        <span class="comment">// 过期时间</span></span><br><span class="line">        CLAIMS.put(<span class="string">"exp"</span>, <span class="number">1648652266914L</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码header</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">generateHeader</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] headerBytes = OBJECT_MAPPER.writeValueAsBytes(HEADER);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.encodeBase64URLSafe(headerBytes), StandardCharsets.US_ASCII);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 编码payload</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JsonProcessingException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">generatePayload</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] payloadBytes = OBJECT_MAPPER.writeValueAsBytes(CLAIMS);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.encodeBase64URLSafe(payloadBytes), StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对header、payload签名</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> header</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">generateSignature</span><span class="params">(String header, String payload)</span> </span>&#123;</span><br><span class="line">        String msg = header + <span class="string">"."</span> + payload;</span><br><span class="line">        Mac mac = HmacUtils.getInitializedMac(HmacAlgorithms.HMAC_SHA_256, KEY.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">byte</span>[] output = mac.doFinal(msg.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(Base64.encodeBase64URLSafe(output), StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        JsonGenerator jsonGenerator = <span class="keyword">new</span> JsonGenerator();</span><br><span class="line">        String header = jsonGenerator.generateHeader();</span><br><span class="line">        System.out.println(<span class="string">"生成header部分:"</span>+header);</span><br><span class="line">        String payload = jsonGenerator.generatePayload();</span><br><span class="line">        System.out.println(<span class="string">"生成payload部分"</span>+payload);</span><br><span class="line">        String signature = jsonGenerator.generateSignature(header, payload);</span><br><span class="line">        System.out.println(<span class="string">"最终生成的token:"</span>+ Stream.of(header,payload,signature).collect(Collectors.joining(<span class="string">"."</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行main函数可以看到控制台输出:</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">生成header部分:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</span><br><span class="line">生成payload部分eyJpc3MiOiJpc3MiLCJleHAiOjE2NDg2NTIyNjY5MTQsImp0aSI6MTIzNDU2Nzg5MH0</span><br><span class="line">最终生成的token:eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpc3MiLCJleHAiOjE2NDg2NTIyNjY5MTQsImp0aSI6MTIzNDU2Nzg5MH0.ZbddEf9xTWJJwnCiDNIWs4t1QUgYsIo7cg1hH4SfM1U</span><br></pre></td></tr></table></figure><p>可以将生成<code>token</code>放到<a href="https://jwt.io/" target="_blank" rel="noopener">jwt.io</a>解析验证<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/jwt/1.png" alt="result"></p><p>其实这个逆向过程很简单，只需要按分隔符”.”取出编码后的<code>header、payload</code>以及<code>Signature</code>,在对<code>header、payload</code>做base64解码即可，简单的代码实现如下:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String token = <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpc3MiLCJleHAiOjE2NDg2NTIyNjY5MTQsImp0aSI6MTIzNDU2Nzg5MH0.ZbddEf9xTWJJwnCiDNIWs4t1QUgYsIo7cg1hH4SfM1U"</span>;</span><br><span class="line">    StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(token, <span class="string">"."</span>);</span><br><span class="line">    <span class="comment">// 我们知道输入格式 所以这里简单写</span></span><br><span class="line">    String[] result = <span class="keyword">new</span> String[]&#123;tokenizer.nextToken(),tokenizer.nextToken(),tokenizer.nextToken()&#125;;</span><br><span class="line">    String header = <span class="keyword">new</span> String(Base64.decodeBase64(result[<span class="number">0</span>]), StandardCharsets.UTF_8);</span><br><span class="line">    String payload = <span class="keyword">new</span> String(Base64.decodeBase64(result[<span class="number">1</span>]), StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(<span class="string">"解析后的header:"</span>+header);</span><br><span class="line">    System.out.println(<span class="string">"解析后的payload:"</span>+payload);</span><br><span class="line">    System.out.println(<span class="string">"签名部分:"</span>+result[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 控制台输出</span></span><br><span class="line">解析后的header:&#123;<span class="string">"alg"</span>:<span class="string">"HS256"</span>,<span class="string">"typ"</span>:<span class="string">"JWT"</span>&#125;</span><br><span class="line">解析后的payload:&#123;<span class="string">"iss"</span>:<span class="string">"iss"</span>,<span class="string">"exp"</span>:<span class="number">1648652266914</span>,<span class="string">"jti"</span>:<span class="number">1234567890</span>&#125;</span><br><span class="line">签名部分:ZbddEf9xTWJJwnCiDNIWs4t1QUgYsIo7cg1hH4SfM1U</span><br></pre></td></tr></table></figure><p>最后非常重要的一步就是对<code>token</code>的完整与合法性校验。其一是验证上文解析出来的签名，其二是对<code>Claims</code>的重要属性做验证（例如过期时间）,伪代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">    String token = <span class="string">"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpc3MiLCJleHAiOjE2NDg2NTIyNjY5MTQsImp0aSI6MTIzNDU2Nzg5MH0.ZbddEf9xTWJJwnCiDNIWs4t1QUgYsIo7cg1hH4SfM1U"</span>;</span><br><span class="line">    StringTokenizer tokenizer = <span class="keyword">new</span> StringTokenizer(token, <span class="string">"."</span>);</span><br><span class="line">    <span class="comment">// 我们知道输入格式 所以这里简单写</span></span><br><span class="line">    String[] result = <span class="keyword">new</span> String[]&#123;tokenizer.nextToken(),tokenizer.nextToken(),tokenizer.nextToken()&#125;;</span><br><span class="line">    String header = <span class="keyword">new</span> String(Base64.decodeBase64(result[<span class="number">0</span>]), StandardCharsets.UTF_8);</span><br><span class="line">    String payload = <span class="keyword">new</span> String(Base64.decodeBase64(result[<span class="number">1</span>]), StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(<span class="string">"解析后的header:"</span>+header);</span><br><span class="line">    System.out.println(<span class="string">"解析后的payload:"</span>+payload);</span><br><span class="line">    System.out.println(<span class="string">"签名部分:"</span>+result[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验签名合法性</span></span><br><span class="line">    String signature = generateSignature(result[<span class="number">0</span>], result[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (!Objects.equals(signature,result[<span class="number">2</span>]))&#123;</span><br><span class="line">        <span class="comment">// 签名校验不通过 自定义异常处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Object&gt; payloadMap = OBJECT_MAPPER.readValue(payload, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, Object&gt;&gt;() &#123;&#125;);</span><br><span class="line">    <span class="keyword">long</span> exp = Long.parseLong(Objects.toString(payloadMap.get(<span class="string">"exp"</span>)));</span><br><span class="line">    <span class="comment">// claims校验 过期时间有效期为1小时</span></span><br><span class="line">    <span class="keyword">if</span> (System.currentTimeMillis() - exp &gt; <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>) &#123;</span><br><span class="line">        <span class="comment">// 签名已过期  自定义异常处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JJWT实现"><a href="#JJWT实现" class="headerlink" title="JJWT实现"></a>JJWT实现</h2><p>上节的代码实现仅是简单的描述了<code>JWT</code>从生成、解析再到校验的过程，使用的签名算法的安全性较低且方式过于粗暴。在实际应用中还是需要采用主流的<code>JWT</code>框架,避免重复造轮子的同时，活跃的社区也能让问题快速的得到响应。</p><p>以开源项目<code>JJWT</code>为例，生成<code>JWT</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createJWT</span><span class="params">(String id, String issuer, String subject, <span class="keyword">long</span> ttlMillis)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 签名算法</span></span><br><span class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义密钥</span></span><br><span class="line">        String secretKey = <span class="string">"11111111111111111111111111111111"</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</span><br><span class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置Claims</span></span><br><span class="line">        JwtBuilder builder = Jwts.builder().setId(id)</span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                .setSubject(subject)</span><br><span class="line">                .setIssuer(issuer)</span><br><span class="line">                .signWith(<span class="keyword">new</span> SecretKeySpec(secretKey.getBytes(), <span class="string">"HmacSHA256"</span>), signatureAlgorithm);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置过期时间</span></span><br><span class="line">        <span class="keyword">if</span> (ttlMillis &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> expMillis = nowMillis + ttlMillis;</span><br><span class="line">            Date exp = <span class="keyword">new</span> Date(expMillis);</span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构建 JWT 并将其序列化为紧凑的 URL 安全字符串</span></span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解析校验<code>token</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">parseJWT</span><span class="params">(String jwt)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 定义密钥</span></span><br><span class="line">        String secretKey = <span class="string">"11111111111111111111111111111111"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 解析token</span></span><br><span class="line">        Claims claims = Jwts.parserBuilder()</span><br><span class="line">                .setSigningKey(<span class="keyword">new</span> SecretKeySpec(secretKey.getBytes(), <span class="string">"HmacSHA256"</span>))</span><br><span class="line">                .build()</span><br><span class="line">             <span class="comment">// 解析payload部分</span></span><br><span class="line">             <span class="comment">// 进行签名校验，失败会抛出SignatureException异常 </span></span><br><span class="line">             <span class="comment">// token失效过期会抛出ExpiredJwtException异常</span></span><br><span class="line">                .parseClaimsJws(jwt)</span><br><span class="line">                .getBody();</span><br><span class="line">        System.out.println(<span class="string">"ID: "</span> + claims.getId());</span><br><span class="line">        System.out.println(<span class="string">"Subject: "</span> + claims.getSubject());</span><br><span class="line">        System.out.println(<span class="string">"Issuer: "</span> + claims.getIssuer());</span><br><span class="line">        System.out.println(<span class="string">"Expiration: "</span> + claims.getExpiration());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>JWT</code>本质上是一种无状态的<code>token</code>令牌，它设计的初衷就是更关注<code>Claims</code>的完整性，任何拿到<code>JWT</code>的客户端都可以无障碍的和服务器进行交互。这既是它的优势（支持跨域验证，可以应用于单点登录），同时也是它的劣势（<code>JWS</code>只签名不加密，<code>token</code>泄漏后会有安全问题），所以我们需要在算法选型时尽量选择复杂算法，严格校验<code>Claims</code>中的属性并且<code>Claims</code>中不能有敏感字段。</p><blockquote>为了处理<code>token</code>过期刷新的问题，前文提到的项目在程序设计上会利用<code>redis key</code>的<code>expire</code>机制，将<code>JWT</code>持久化到<code>redis</code>中。这一点其实有些违背了<code>JWT</code>的设计理念，并且让整个系统强依赖<code>redis</code>（redis挂了系统无法登录）。</blockquote><p><code>JWT</code>与<code>CAS</code>不同的是，它的用户信息是以<code>token</code>的形式存储在客户端，而非存储在服务端。对于过期刷新的问题，其实可以参考<code>OAuth2</code>中<code>refresh token</code>的概念。</p><p><strong>参考</strong></p><p><a href="https://datatracker.ietf.org/doc/html/rfc7519" target="_blank" rel="noopener">规范性文件RFC7519</a></p><p><a href="https://github.com/jwtk/jjwt" target="_blank" rel="noopener">JJWT</a></p><p><a href="https://en.wikipedia.org/wiki/JSON_Web_Token" target="_blank" rel="noopener">维基百科</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> jwt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger接口文档同步yapi定义标准</title>
      <link href="/swagger%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%90%8C%E6%AD%A5yapi%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86.html"/>
      <url>/swagger%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3%E5%90%8C%E6%AD%A5yapi%E5%AE%9A%E4%B9%89%E6%A0%87%E5%87%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在与前端约定yapi接口后，后端可能会与前端私下沟通修改接口方案或者业务调整未同步至yapi,导致经常性会出现实际开发接口与yapi维护的接口不统一的情况。滞后的接口文档，给后续介入开发的人员会造成很大的困惑，这也是这块未统一规范的体现。所以文章旨在通过一种定义标准（选型：swagger），通过实际开发中的代码生成yapi接口文档。一般情况下，联调接口会先于开发定义出来，所以需要定义两套文档，一套用于与前端或业务系统联调，另一套生成用于业务系统实际的开发接口。</p><a id="more"></a><h2 id="swagger使用"><a href="#swagger使用" class="headerlink" title="swagger使用"></a>swagger使用</h2><h3 id="配置swagger"><a href="#配置swagger" class="headerlink" title="配置swagger"></a>配置swagger</h3><p><strong>以Swagger2为例，添加jar包</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.springfox&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><strong>定义配置SwaggerConfig</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableSwagger2</span><br><span class="line">public class SwaggerConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入ip:port/swagger-ui.html，默认swagger页面的结构</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/01.png" alt="image.png"></p><p>接口分类信息：例如可以区分定义外部接口和内部接口，用Swagger Docket实例的groupName分组显示</p><p>项目基本信息：通过Swagger Docket实例的apiInfo方法描述</p><p>接口列表：Swagger Docket实例中指定过滤条件后，Controller层所有接口的展示与调用</p><p><strong>定义Docket实例</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger</span>2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">docker</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 构造函数传入初始化规范，这是swagger2规范</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                <span class="comment">//apiInfo： 添加api详情信息，参数为ApiInfo类型的参数，这个参数包含了项目基本信息的必要条件</span></span><br><span class="line">                .apiInfo(apiInfo())</span><br><span class="line">                <span class="comment">//groupName 指定接口的分组信息</span></span><br><span class="line">                .groupName(<span class="string">"groupTest"</span>)</span><br><span class="line">                <span class="comment">//配置是否启用Swagger，如果是false，在浏览器将无法访问。生产环境需要置为false</span></span><br><span class="line">                .enable(<span class="keyword">true</span>)</span><br><span class="line">                .select()</span><br><span class="line">                <span class="comment">//apis： 添加过滤条件,</span></span><br><span class="line">                <span class="comment">//.apis(RequestHandlerSelectors.basePackage("com.swagger.demo"))</span></span><br><span class="line">                <span class="comment">//paths： 这里是控制哪些路径的api会被显示出来，比如下方的参数就是除了/test以外的其它路径都会生成api文档</span></span><br><span class="line">                <span class="comment">//.paths((String test) -&gt; !a.equals("/test"))</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Contact contact = <span class="keyword">new</span> Contact(<span class="string">"项目名称：name"</span>, <span class="string">"项目连接地址：http://xxx.xxx.com/"</span>, <span class="string">"联系人邮箱：XXX"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfo(</span><br><span class="line">                <span class="string">"标题内容"</span>,</span><br><span class="line">                <span class="string">"描述内容"</span>,</span><br><span class="line">                <span class="string">"版本内容：v1.0"</span>,</span><br><span class="line">                <span class="string">"链接：http://terms.service.url/"</span>,</span><br><span class="line">                contact,</span><br><span class="line">                <span class="string">"许可"</span>,</span><br><span class="line">                <span class="string">"许可链接"</span>,</span><br><span class="line">                <span class="comment">// 扩展信息</span></span><br><span class="line">                <span class="keyword">new</span> ArrayList&lt;&gt;()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实体类定义"><a href="#实体类定义" class="headerlink" title="实体类定义"></a>实体类定义</h3><p><strong>@ApiModel 用于swagger标记实体类</strong></p><table><thead><tr><th>属性</th><th>类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>String</td><td>类名</td><td>类的备用名称</td></tr><tr><td>description</td><td>String</td><td>“”</td><td>类的详细描述</td></tr><tr><td>parent</td><td>Class&lt;?&gt;</td><td>Void.class</td><td>提供父类以允许描述继承关系</td></tr><tr><td>discriminator</td><td>String</td><td>“”</td><td>支持模型继承和多态，使用鉴别器的字段的名称，可以断言需要使用哪个子类型</td></tr><tr><td>subTypes</td><td>Class&lt;?&gt;[]</td><td>{}</td><td>继承该类的子类型数组</td></tr><tr><td>reference</td><td>String</td><td>“”</td><td>指定对应类型定义的引用，覆盖指定的任何其他元数据</td></tr></tbody></table><p><strong>@ApiModelProperty用于swagger标记实体类属性</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>简洁的介绍字段描述</td></tr><tr><td>name</td><td>如果设置这个字段，会覆盖原本属性的名字</td></tr><tr><td>allowableValues</td><td>标明字段的取值范围，例如range[1, infinity] 就是大于等于1</td></tr><tr><td>access</td><td>允许从API文档中过滤属性，参见 io.swagger.core.filter.SwaggerSpecFilter</td></tr><tr><td>notes</td><td>应该是预留字段，未被使用</td></tr><tr><td>dataType</td><td>参数的数据类型</td></tr><tr><td>required</td><td>表示的是当前字段是否是必须的，默认是<code>false</code></td></tr><tr><td>position</td><td>属性在文档中的位置排序</td></tr><tr><td>hidden</td><td>表示的是是否隐藏当前字段，默认是<code>false</code></td></tr><tr><td>example</td><td>样例说明</td></tr><tr><td>readOnly</td><td>过时，用accessMode代替</td></tr><tr><td>accessMode</td><td>一个枚举<code>AccessMode</code>的值，其中包括<code>AUTO</code>、<code>READ_ONLY</code>、<code>READ_WRITE</code></td></tr><tr><td>reference</td><td>指定了属性的类型引用，如果设置了当前属性，会覆盖任何其他的元数据(<code>不常使用</code>)</td></tr><tr><td>allowEmptyValue</td><td>是否允许该字段为空，默认是<code>false</code></td></tr><tr><td>extensions</td><td>该属性用于进行额外的描述。是一个可选项的数组组成</td></tr></tbody></table><p><strong>样例说明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"用户信息"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"名称"</span>,required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"价格"</span>,example = <span class="string">"1.0"</span>)</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"状态 0-未删除 1-逻辑删除"</span>,allowableValues = <span class="string">"0,1"</span>,example = <span class="string">"0"</span>)</span><br><span class="line">    <span class="keyword">private</span> String status;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"时间"</span>,allowEmptyValue = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime localDateTime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h3><p><strong>@Api 注解用于标注类为swagger资源</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>无实义，官网推荐用tags替代</td></tr><tr><td>tags</td><td>tags标签用于将我们的请求分类</td></tr><tr><td>description</td><td>弃用</td></tr><tr><td>basePath</td><td>弃用</td></tr><tr><td>position</td><td>弃用</td></tr><tr><td>produces</td><td>指定返回的内容类型，仅当<code>request</code>请求头中的(<code>Accept</code>)类型中包含该指定类型才返回，例如:<code>application/json</code></td></tr><tr><td>consumes</td><td>指定处理请求的提交内容类型(<code>Content-Type</code>)，例如<code>application/json</code></td></tr><tr><td>protocols</td><td>标识的是当前的请求支持的协议，例如：<code>http</code>、<code>https</code>、<code>ws</code>、<code>wss</code></td></tr><tr><td>authorizations</td><td>高级特性认证时配置</td></tr><tr><td>hidden</td><td>配置为<code>true</code>将在文档中隐藏。隐藏整个<code>Controller</code>资源。作用与<code>@ApiIgnore</code>类似，但是没有<code>@ApiIgnore</code>功能强大</td></tr></tbody></table><p><strong>@ApiOperation注解一般用于方法上，用作一个HTTP请求的方法描述</strong></p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>表示的是这个方法的一个总结性的描述</td></tr><tr><td>notes</td><td>标识的是对于一个方法的具体性的描述</td></tr><tr><td>tags</td><td>和@Api的tags功能类似</td></tr><tr><td>response</td><td>这个属性设置的是当前请求的返回值类型</td></tr><tr><td>responseContainer</td><td>说明的是包装相应的容器。默认情况下，有效值为 <code>List</code>、<code>Set</code>、<code>Map</code>，任何其它值都将被忽略</td></tr><tr><td>responseReference</td><td>这里设置的是一个相应类型的引用。这个引用可以是本地的，也可以是远程的。如果设置了这个值，将会覆盖<code>response</code>属性的值</td></tr><tr><td>httpMethod</td><td>请求方式，例如<code>GET</code>、<code>HEAD</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>OPTIONS</code></td></tr><tr><td>position</td><td>弃用</td></tr><tr><td>nickname</td><td>这个字段对应的是<code>operationId</code>字段。第三方工具使用<code>operationId</code>来唯一表示此操作.在<code>Swagger2.0</code>之后的版本中，这个字段是不在强制的，如果没有，则系统默认为空</td></tr><tr><td>produces</td><td>指定返回的内容类型，仅当<code>request</code>请求头中的(<code>Accept</code>)类型中包含该指定类型才返回，例如:<code>application/json</code></td></tr><tr><td>consumes</td><td>指定处理请求的提交内容类型(<code>Content-Type</code>)，例如<code>application/json</code></td></tr><tr><td>protocols</td><td>标识的是当前的请求支持的协议，例如：<code>http</code>、<code>https</code>、<code>ws</code>、<code>wss</code></td></tr><tr><td>authorizations</td><td>高级特性认证时配置</td></tr><tr><td>hidden</td><td>配置为<code>true</code>将在文档中隐藏。隐藏整个<code>Controller</code>资源。作用与<code>@ApiIgnore</code>类似，但是没有<code>@ApiIgnore</code>功能强大</td></tr><tr><td>responseHeaders</td><td>指定<code>response</code>中<code>header</code>的信息列表</td></tr><tr><td>code</td><td>http返回状态码</td></tr><tr><td>extensions</td><td>可选的扩展数组,举例：<code>extensions = @Extension(properties ={@ExtensionProperty(name = &quot;author&quot;, value = &quot;test@xx.com&quot;)})</code></td></tr><tr><td>ignoreJsonView</td><td>忽略<code>JsonView</code>注解，主要的目的是为了做到向下兼容</td></tr></tbody></table><p><strong>样例说明</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"swaggger测试"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"总结性描述测试1"</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/test1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> APIResult&lt;String&gt; <span class="title">test1</span><span class="params">(InfoVO infoVO)</span></span>&#123;</span><br><span class="line">        <span class="comment">//TODO save operation</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">return</span> APIResult.ofSuccess(<span class="string">"数据保存成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>swagger页面显示结果</strong></p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/02.png" alt="image.png"></p><h2 id="基于swagger同步yapi规范"><a href="#基于swagger同步yapi规范" class="headerlink" title="基于swagger同步yapi规范"></a>基于swagger同步yapi规范</h2><p>因为swaggger对代码的浸入性很强，所以我们尽可能的定义yapi中所需要的接口信息，摒去无用的定义。</p><h3 id="实体类定义-1"><a href="#实体类定义-1" class="headerlink" title="实体类定义"></a>实体类定义</h3><p>非代码生成器生成的与数据库表结构相关联的domain类，例如与前端交互的VO类、与外部服务进行数据交换的DTO类，需在类头加上@ApiModel注解，在类属性加上@ApiModelProperty注解，便于补全接口文档的同时又可替换类注释。</p><h4 id="ApiModel注解"><a href="#ApiModel注解" class="headerlink" title="@ApiModel注解"></a><strong>@ApiModel注解</strong></h4><p>@apiModel主要用于标记实体类，定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"xxx"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXX</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>必填项</th><th>描述</th></tr></thead><tbody><tr><td>description</td><td>是</td><td>定义为类的详细描述</td></tr></tbody></table><p>该属性定义后，接口返回类型为Object时，yapi中会显示对象的备注</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/03.png" alt="image.png"></p><h4 id="ApiModelProperty注解"><a href="#ApiModelProperty注解" class="headerlink" title="@ApiModelProperty注解"></a><strong>@ApiModelProperty注解</strong></h4><p>@ApiModelProperty用于标记swagger实体类属性，定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty</span>(value = <span class="string">"xxx"</span>,required = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">private</span> String xxx;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>必填项</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>是</td><td>定义为字段的详细描述</td></tr><tr><td>required</td><td>否</td><td>如果字段为必填项，则需要定义required = true 默认为false</td></tr></tbody></table><p>定义该属性用于展示在yapi接口中请求参数、返回参数的字段备注、是否必须项信息</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/04.png" alt="1628059935(1).png"></p><h3 id="接口定义-1"><a href="#接口定义-1" class="headerlink" title="接口定义"></a>接口定义</h3><h4 id="Api注解"><a href="#Api注解" class="headerlink" title="@Api注解"></a><strong>@Api注解</strong></h4><p>@Api用于标注类为swagger资源，定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"XXX"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XXXController</span></span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>必填项</th><th>描述</th></tr></thead><tbody><tr><td>tags</td><td>是</td><td>将接口请求分类</td></tr></tbody></table><p>定义tags属性，主要用于维护yapi中的文档分类</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/05.png" alt="1628060896(1).png"></p><h4 id="ApiOperation注解"><a href="#ApiOperation注解" class="headerlink" title="@ApiOperation注解"></a><strong>@ApiOperation注解</strong></h4><p>@ApiOperation用作一个HTTP请求的方法描述，定义格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"xxx"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/xxx"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> APIResult&lt;String&gt; <span class="title">xxx</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>必填项</th><th>描述</th></tr></thead><tbody><tr><td>value</td><td>是</td><td>一个方法总结性的描述</td></tr></tbody></table><p>定义ApiOperation的value属性，主要用于维护yapi中主分类的接口信息</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/06.png" alt="1628061351.png"></p><h4 id="ApiImplicitParams和-ApiImplicitParam"><a href="#ApiImplicitParams和-ApiImplicitParam" class="headerlink" title="@ApiImplicitParams和@ApiImplicitParam"></a><strong>@ApiImplicitParams和@ApiImplicitParam</strong></h4><p>@ApiImplicitParams和@ApiImplicitParam组合使用作用于方法上，这里主要用于定义yapi中请求参数的header属性。如非必须尽量不要使用，代码侵入性太严重了。</p><p>定义格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@ApiImplicitParams(&#123;</span><br><span class="line">      @ApiImplicitParam(paramType &#x3D; &quot;header&quot;, name &#x3D; &quot;xxx&quot;, value &#x3D; &quot;xxx&quot;, dataType &#x3D; &quot;xxx&quot;, required &#x3D; true),</span><br><span class="line">      ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>必填项</th><th>描述</th></tr></thead><tbody><tr><td>paramType</td><td>是</td><td>定义为header,这里只用作生成yapi中入参的header属性</td></tr><tr><td>name</td><td>是</td><td>参数名称</td></tr><tr><td>value</td><td>是</td><td>参数的具体含义，用作生成yapi中的备注信息</td></tr><tr><td>dataType</td><td>否</td><td>参数的数据类型</td></tr><tr><td>required</td><td>否</td><td>如果字段为必填项，则需要定义required = true 默认为false</td></tr></tbody></table><p>yapi中显示结果以及定义方式:</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/07.png" alt="1628064186.png"></p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>例如以下的几个接口，均不符合标准</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第一种情况 入参为JsonStr  出参为Map</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"错误示范1"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/errTest1"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title">errTest1</span><span class="params">(@RequestBody String infoVo)</span></span>&#123;</span><br><span class="line">    <span class="comment">//TODO save operation</span></span><br><span class="line">    ...</span><br><span class="line">    Map&lt;String,Object&gt; res = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    res.put(<span class="string">"msg"</span>,<span class="string">"ok"</span>);</span><br><span class="line">    res.put(<span class="string">"code"</span>,<span class="number">200</span>);</span><br><span class="line">    res.put(<span class="string">"data"</span>,<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种情况 使用javabean传参、出参，但javabean中包含Map、Object的情况</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ApiModel</span>(description = <span class="string">"test4"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test4</span> </span>&#123;</span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"名称"</span>,required = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//object属性 swagger不能识别</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"值"</span>)</span><br><span class="line">    <span class="keyword">private</span> Object value;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//尽可能将map、object定义成新的javaBean</span></span><br><span class="line">    <span class="meta">@ApiModelProperty</span>(value = <span class="string">"用户信息"</span>)</span><br><span class="line">    <span class="keyword">private</span> InfoVO infoVo;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiOperation</span>(value = <span class="string">"错误示范2"</span>)</span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/errTest2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> APIResult&lt;Test4&gt; <span class="title">errTest2</span><span class="params">(Test4 test4)</span></span>&#123;</span><br><span class="line">    <span class="comment">//TODO save operation</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> APIResult.ofSuccess(test4);;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上方定义的接口生成的swagger文档示例如下<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/08.png" alt="1628062044(1).png"><br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/09.png" alt="1628062189(1).png"></p><p>yapi中的接口展示:</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/10.png" alt="1628062695(1).png"><br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/swagger/11.png" alt="1628062819(1).png"></p><p>错误示例定义出来的接口文档，增大了接口联调的测试难度。接口数据同步到yapi上，因为缺失了必要的字段信息，也会导致接口和代码的可阅读性较差。</p><p><strong>所以在实际接口定义过程中，尽量使用javaBean，而不要使用Map、Object、JSON String等方式定义接口的出入参。如果是通用返回结果集，尽量使用泛型替换Object。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 接口文档 </category>
          
          <category> swagger </category>
          
          <category> yapi </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 接口文档 </tag>
            
            <tag> swagger </tag>
            
            <tag> yapi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql8.0.22-rpm安装</title>
      <link href="/mysql8-0-22-rpm%E5%AE%89%E8%A3%85.html"/>
      <url>/mysql8-0-22-rpm%E5%AE%89%E8%A3%85.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>某个远古系统，随着业务量的增长，服务的响应速度过慢，导致用户体验较差。就数据库层面而言，为了寻求优化方案，听闻mysql8对比系统依赖的mysql5.7快了不止一倍，所以本文就mysql的升级安装做一个总结。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="历史数据备份"><a href="#历史数据备份" class="headerlink" title="历史数据备份"></a>历史数据备份</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果需要指定表名 可以添加 --tables [表名] 命令</span></span><br><span class="line">mysqldump -h [ip地址:默认localhost] -u[用户名] -p[密码] [数据库名] &gt; demo.sql</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="删除原有mysql服务"><a href="#删除原有mysql服务" class="headerlink" title="删除原有mysql服务"></a>删除原有mysql服务</h3><p>(以下操作确保mysql服务已停止)<br>查看历史安装过哪些mysql的rpm包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/1.png" alt="result"></p><p>删除rpm包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#例如： </span></span><br><span class="line">rpm -e --nodeps mysql-community-common-5.7.30-1.el7.x86_64 </span><br><span class="line"><span class="comment">#多个rpm以逗号分开或者执行多次</span></span><br></pre></td></tr></table></figure><p>查询所有Mysql对应的文件夹</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whereis mysql</span><br><span class="line">find / -name mysql</span><br><span class="line"><span class="comment">#删除所有</span></span><br><span class="line">rm -rf [*]</span><br></pre></td></tr></table></figure><p>检查mysql用户组和用户是否存在，没有则创建</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#检查</span></span><br><span class="line">cat /etc/group | grep mysql</span><br><span class="line">cat /etc/passwd |grep mysql</span><br><span class="line"><span class="comment">#添加</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure><h3 id="rpm包下载"><a href="#rpm包下载" class="headerlink" title="rpm包下载"></a>rpm包下载</h3><p>官网地址: <a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></p><p>centos7 mysql version8.0.22 需要下载的rpm包如下:</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/2.png" alt="result"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="rpm包安装"><a href="#rpm包安装" class="headerlink" title="rpm包安装"></a>rpm包安装</h3><p>因为mysql rpm包的server、client存在依赖关系，所以需要有顺序的执行安装rpm包，可以按如下方法操作</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.22-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.22-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>执行 <code>rpm -qa | grep mysql</code> 查看rpm包是否安装成功</p><h3 id="my-cnf配置"><a href="#my-cnf配置" class="headerlink" title="my.cnf配置"></a>my.cnf配置</h3><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/3.png" alt="result"></p><p>可用上图中的<code>df -h</code>命令查看每个挂载磁盘的剩余空间容量，一般而言根目录即 / 目录空间分配都不会太大。而mysql默认的数据目录存放在/var/lib/mysql下，在业务数据量很大的时候，很容易让磁盘占满导致数据无法写入，这样不仅会影响本服务，同时在该服务器上的其他业务系统也会受到影响，这显然是不可取的。<br>所以我们需要修改mysql的数据目录地址，上图中可以看出/home下的磁盘较为充裕</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/home/mysql充当新的数据目录</span></span><br><span class="line">mkdir -p /home/mysql</span><br><span class="line"><span class="comment">#指定用户组</span></span><br><span class="line">chown -R mysql:mysql /home/mysql</span><br><span class="line"><span class="comment">#添加权限</span></span><br><span class="line">chmod -R 755 /home/mysql</span><br></pre></td></tr></table></figure><p>还不算完，这里有个坑，但不深追。需要关闭SELinux，可操作方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1、临时关闭（不用重启机器）：</span></span><br><span class="line">setenforce 0</span><br><span class="line"><span class="comment">#2.修改/etc/selinux/config 文件</span></span><br><span class="line">将SELINUX=enforcing改为SELINUX=disabled</span><br><span class="line"><span class="comment">#重启机器即可</span></span><br></pre></td></tr></table></figure><p>否则在后续启动mysql时会发现权限不足<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/4.png" alt="result"></p><p>my.cnf调优的配置参考（默认位置 /etc/my.cnf）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># For advice on how to change settings please see</span><br><span class="line"># http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;server-configuration-defaults.html</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line">#</span><br><span class="line"># Remove leading # and set to the amount of RAM for the most important data</span><br><span class="line"># cache in MySQL. Start at 70% of total RAM for dedicated server, else 10%.</span><br><span class="line">innodb_buffer_pool_size &#x3D; 64G</span><br><span class="line">#</span><br><span class="line"># Remove the leading &quot;# &quot; to disable binary logging</span><br><span class="line"># Binary logging captures changes between backups and is enabled by</span><br><span class="line"># default. It&#39;s default setting is log_bin&#x3D;binlog</span><br><span class="line"># disable_log_bin</span><br><span class="line">#</span><br><span class="line"># Remove leading # to set options mainly useful for reporting servers.</span><br><span class="line"># The server defaults are faster for transactions and fast SELECTs.</span><br><span class="line"># Adjust sizes as needed, experiment to find the optimal values.</span><br><span class="line"># join_buffer_size &#x3D; 128M</span><br><span class="line">read_buffer_size &#x3D; 4M</span><br><span class="line">sort_buffer_size &#x3D; 8M</span><br><span class="line">read_rnd_buffer_size &#x3D; 8M</span><br><span class="line">#</span><br><span class="line"># Remove leading # to revert to previous value for default_authentication_plugin,</span><br><span class="line"># this will increase compatibility with older clients. For background, see:</span><br><span class="line"># https:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;8.0&#x2F;en&#x2F;server-system-variables.html#sysvar_default_authentication_plugin</span><br><span class="line"># default-authentication-plugin&#x3D;mysql_native_password</span><br><span class="line">#指定新的数据目录</span><br><span class="line">datadir&#x3D;&#x2F;home&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</span><br><span class="line">#忽略大小写 默认为0 在mysqld --initialize执行完成后 无法通过命令修改</span><br><span class="line">lower_case_table_names&#x3D;1</span><br><span class="line">log-error&#x3D;&#x2F;var&#x2F;log&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</span><br><span class="line">innodb_log_buffer_size &#x3D; 20M</span><br><span class="line">tmp_table_size &#x3D; 16M</span><br><span class="line">#mysql8默认编码utf8mb4,兼容utf8这里可以不指定</span><br></pre></td></tr></table></figure><h3 id="编译启动mysql"><a href="#编译启动mysql" class="headerlink" title="编译启动mysql"></a>编译启动mysql</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化mysql</span></span><br><span class="line">mysqld --initialize --user=mysql --datadir=/home/mysql</span><br></pre></td></tr></table></figure><p>查看默认密码<code>grep 'temporary password' /var/log/mysqld.log</code></p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/5.png" alt="result"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动mysql</span></span><br><span class="line">service mysqld start</span><br><span class="line"><span class="comment">#关闭mysql</span></span><br><span class="line">service mysqld stop</span><br><span class="line"><span class="comment">#重启</span></span><br><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><h3 id="修改默认密码和开放远程连接"><a href="#修改默认密码和开放远程连接" class="headerlink" title="修改默认密码和开放远程连接"></a>修改默认密码和开放远程连接</h3><p>执行<code>mysql -uroot -p</code>,跳出<code>enter password:</code>输入默认密码即可进入mysql命令列界面。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/6.png" alt="result"><br>由上图可以看到，执行mysql其他命令之前，我们需要重置mysql的密码，当然除此之外，我们还需要指定加密方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#更改加密方式</span></span><br><span class="line">alter user <span class="string">'root'</span>@<span class="string">'localhost'</span> identified with mysql_native_password by <span class="string">'123456'</span>;</span><br><span class="line"><span class="comment">#开放远程连接</span></span><br><span class="line">use mysql;</span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">'%'</span> <span class="built_in">where</span> user = <span class="string">'root'</span>;</span><br><span class="line"><span class="comment">#刷新到策略到缓存 </span></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>原因是mysql8的caching_sha2_password属于强加密规则，远程连接工具navicat可能会不支持，并抛出2059错误<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/8.png" alt="result"><br>再次访问，可以看到命令成功执行<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/mysql/7.png" alt="result"></p><h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>在有些机器上安装mysql8，出现了登陆密码的弱口令校验，所以不能设置为像 “123456”这样简单的密码，为了安全考虑，可以将密码设置为中英文+大小写的组合</p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#第一种方法</span></span><br><span class="line">mysql -u[用户名] -p[密码]  [数据库名] &lt; demo.sql</span><br><span class="line"><span class="comment">#第二种方法 </span></span><br><span class="line">mysql -u[用户名] -p[密码]</span><br><span class="line"><span class="comment">#进入命令列界面</span></span><br><span class="line">mysql&gt;use database;</span><br><span class="line">mysql&gt;<span class="built_in">source</span> demo.sql;</span><br></pre></td></tr></table></figure><h2 id="数据目录迁移"><a href="#数据目录迁移" class="headerlink" title="数据目录迁移"></a>数据目录迁移</h2><p>如果出现磁盘空间不足，需要扩展空间时，可以采用软连接的方式快速的将业务数据迁移出去。(前提:关闭SELinux)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##一定要先关闭数据库</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"></span><br><span class="line"><span class="comment">#在磁盘充足环境创建mysql目录</span></span><br><span class="line">mkdir -p /home/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#找到数据目录(例子datadir=/var/lib/mysql)</span></span><br><span class="line">cat /etc/my.cnf|grep datadir</span><br><span class="line"></span><br><span class="line"><span class="comment">#拷贝数据到新的mysql目录下</span></span><br><span class="line">cp /var/lib/mysql/*  /home/mysql/</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定用户组</span></span><br><span class="line">chown -R mysql:mysql /home/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改数据目录名字(先保留原先数据目录 验证完可删除)</span></span><br><span class="line">mv /var/lib/mysql /var/lib/mysql_bak</span><br><span class="line"></span><br><span class="line"><span class="comment">#建立软连接(在原数据目录下)</span></span><br><span class="line">ln -s  /home/mysql  /var/lib/mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#启动数据库验证</span></span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单点登录-无插件式SSO（cas标准）流程</title>
      <link href="/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95-%E6%97%A0%E6%8F%92%E4%BB%B6%E5%BC%8FSSO%EF%BC%88cas%E6%A0%87%E5%87%86%EF%BC%89%E6%B5%81%E7%A8%8B.html"/>
      <url>/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95-%E6%97%A0%E6%8F%92%E4%BB%B6%E5%BC%8FSSO%EF%BC%88cas%E6%A0%87%E5%87%86%EF%BC%89%E6%B5%81%E7%A8%8B.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>现有用户使用阿里的IDass作为统一身份认证平台，所以我们需要为此做一个定制化开发，舍弃公司原有的登录门户，转而对接阿里单点登录。由于之前并没有类似的经验，所以本人此次学到了不少单点登录的知识，在此做一些记录，方便以后查漏补缺。</p><h2 id="单点登录概述"><a href="#单点登录概述" class="headerlink" title="单点登录概述"></a>单点登录概述</h2><p>单点登录（SSO），英文全称为 Single Sign On。 SSO 是指在多个应用系统中，用户只需要登录一次，就可以访问所有相互信任的应用系统。IDaaS SSO 服务用于解决同一公司不同业务应用之间的身份认证问题，只需要登录一次，即可访问所有添加的应用。</p><a id="more"></a><h3 id="插件式SSO（JWT）"><a href="#插件式SSO（JWT）" class="headerlink" title="插件式SSO（JWT）"></a>插件式SSO（JWT）</h3><p>JWT 协议的流程是，浏览器在 IDaaS 中发起一个 SSO 请求的时候，IDaaS 会利用秘钥产生一个token ，然后将 token 放到请求里面作为参数 id_token 的值传到业务系统中去，业务系统就需要解析这个 token 进行身份识别，但是解析token 的关键就是需要集成我们提供的一个解析使用的 SDK，结合业务系统在 IDaaS 中添加应用的时候生成的一个不变的公钥，SDK+公钥才能对 token 进行校验识别。</p><h3 id="无插件式SSO（Cas标准）"><a href="#无插件式SSO（Cas标准）" class="headerlink" title="无插件式SSO（Cas标准）"></a>无插件式SSO（Cas标准）</h3><p>CAS 协议的流程是浏览器在 IDaaS 中发起一个 SSO 请求的时候 IDaaS 会产生一个一次性随机code（类似于 JWT 中的 token ）作为参数 code 的值传到业务系统，然后业务系统并不解析这个code，而是通过一个 callback 回调在将其原封不动的传给 IDaaS ， IDaaS 对这个code进行验证，如果是我们传过去的就说明请求合法，IDaaS 会将用户信息传给业务系统，如果不是就验证失败。</p><p>本着代码改动量最少的优先原则，此次改造选取系统原有单点登录的方式，即以cas方式接入阿里平台。</p><h2 id="cas原理与协议"><a href="#cas原理与协议" class="headerlink" title="cas原理与协议"></a>cas原理与协议</h2><p>使用CAS 标准时，首先是由 CAS Client 发起， CAS Client 会重定向到 CAS Server（由 IDaaS 充当）进行登录，由 CAS Server 进行账户校验且多个 CAS Client 之间可以共享登录的 session ，Server 和Client 是一对多的关系；</p><p>从结构上看，CAS 包含两个部分： CAS Server 和 CAS Client 。 CAS Server 需要独立部署，主要负责对用户的认证工作； CAS Client 负责处理对客户端受保护资源的访问请求，需要登录时，重定向到CAS Server。</p><p>下图是标准 CAS 最基本的协议过程：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/cas/cas%E5%8D%8F%E8%AE%AE%E8%BF%87%E7%A8%8B.png" alt="cas协议过程"></p><p style="text-indent:2em">CAS Client 与受保护的客户端应用部署在一起，以 Filter 方式保护受保护的资源。对于访问受保护资源的每个 Web 请求， CAS Client 会分析该请求的 Http 请求中是否包含 Service Ticket ，如果没有，则说明当前用户尚未登录，于是将请求重定向到指定好的 CAS Server 登录地址，并传递 Service（也就是要访问的目的资源地址），以便登录成功过后转回该地址。</p><p style="text-indent:2em">用户在 上图流程中的 第 3 步 输入认证信息，如果登录成功， CAS Server 随机产生一个相当长度、唯一、不可伪造的 Service Ticket ，并缓存以待将来验证，之后系统自动重定向到 Service 所在地址，并为客户端浏览器设置一个 Ticket Granted Cookie（TGC）， CAS Client 在拿到 Service 和新产生的 Ticket 过后，在第 5，6 步中与 CAS Server 进行身份核实，以确保 Service Ticket 的合法性。</p><p style="text-indent:2em">而在 IDaaS 中， 一个 CAS （标准）应用实现了标准的 CAS 流程。它充当一个 CAS Server的角色。当CAS client 决定使用 CAS （标准）应用作为 CAS Server 时。在登录认证时需要使用 IDaaS 系统中公司的主账号，密码进行认证。</p><h2 id="cas接入验证"><a href="#cas接入验证" class="headerlink" title="cas接入验证"></a>cas接入验证</h2><p>阿里方面并没有接入外网的测试环境，但其符合原生的cas标准，所以为了方便验证，需要在本地搭建一个cas服务。</p><h3 id="cas服务器端搭建"><a href="#cas服务器端搭建" class="headerlink" title="cas服务器端搭建"></a>cas服务器端搭建</h3><p>找一个编译后的版本，比如V4.0.0，下载地址：<a href="https://github.com/apereo/cas/releases/tag/v4.0.0" target="_blank" rel="noopener">https://github.com/apereo/cas/releases/tag/v4.0.0</a><br>将下载好的压缩包解压，并将modules下的cas-server-webapp-4.0.0.war（改名为cas.war）拿出来放到tomcat下部署，当前如果是作为练习的话，可以修改配置文件去掉https的要求。<br>1、WEB-INF/deployerConfigContext.xml修改,添加 p:requireSecure=”false”配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;proxyAuthenticationHandler&quot; class&#x3D;&quot;org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler&quot;</span><br><span class="line">          p:httpClient-ref&#x3D;&quot;httpClient&quot; p:requireSecure&#x3D;&quot;false&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>2、WEB-INF/spring-configuration/ticketGrantingTicketCookieGenerator.xml中将p:cookieSecure置为false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;ticketGrantingTicketCookieGenerator&quot; class&#x3D;&quot;org.jasig.cas.web.support.CookieRetrievingCookieGenerator&quot;</span><br><span class="line">p:cookieSecure&#x3D;&quot;false&quot;</span><br><span class="line">p:cookieMaxAge&#x3D;&quot;-1&quot;</span><br><span class="line">p:cookieName&#x3D;&quot;CASTGC&quot;</span><br><span class="line">p:cookiePath&#x3D;&quot;&#x2F;cas&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>3、WEB-INF/spring-configuration/warnCookieGenerator.xml中p:cookieSecure置为false</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;warnCookieGenerator&quot; class&#x3D;&quot;org.jasig.cas.web.support.CookieRetrievingCookieGenerator&quot;</span><br><span class="line">p:cookieSecure&#x3D;&quot;false&quot;</span><br><span class="line">p:cookieMaxAge&#x3D;&quot;-1&quot;</span><br><span class="line">p:cookieName&#x3D;&quot;CASPRIVACY&quot;</span><br><span class="line">p:cookiePath&#x3D;&quot;&#x2F;cas&quot; &#x2F;&gt;</span><br></pre></td></tr></table></figure><p>4、完成上述配置后就可以通过<a href="http://ip:port/cas/login">http://ip:port/cas/login</a> 访问cas server了。<red>当然该用户需要拥有系统权限，我们可以在WEB-INF/deployerConfigContext.xml配置真实的用户（实际上这里是需要JDBC支持的）,例如：</red></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id&#x3D;&quot;primaryAuthenticationHandler&quot;</span><br><span class="line">        class&#x3D;&quot;org.jasig.cas.authentication.AcceptUsersAuthenticationHandler&quot;&gt;</span><br><span class="line">      &lt;property name&#x3D;&quot;users&quot;&gt;</span><br><span class="line">          &lt;map&gt;</span><br><span class="line">              &lt;entry key&#x3D;&quot;admin&quot; value&#x3D;&quot;&quot;&#x2F;&gt;</span><br><span class="line">          &lt;&#x2F;map&gt;</span><br><span class="line">      &lt;&#x2F;property&gt;</span><br><span class="line">  &lt;&#x2F;bean&gt;</span><br></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/cas/cas-server%E7%99%BB%E5%BD%95%E9%A6%96%E9%A1%B5.png" alt="result"></p><h3 id="cas客户端验证"><a href="#cas客户端验证" class="headerlink" title="cas客户端验证"></a>cas客户端验证</h3><p>注：项目中需要引入<code>cas-client-core-{version}.jar</code></p><p>验证过程采用原生的方式配置，需要在项目的web.xml中配置（主要是用户认证和票据认证）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 用于单点退出，该过滤器用于实现单点登出功能，可选配置 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutHttpSessionListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 该过滤器用于实现单点登出功能，可选配置 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.session.SingleSignOutFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Single Sign Out Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 该过滤器负责用户的认证工作，必须启用它 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.authentication.AuthenticationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerLoginUrl<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://localhost:18080/cas/login<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!--这里的server是服务端的IP --&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:8080/CallBillAnalysis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CASFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责对Ticket的校验工作，必须启用它 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">        org.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>casServerUrlPrefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>https://localhost:18080/cas<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>serverName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>http://localhost:8080<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Validation Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 该过滤器负责实现HttpServletRequest请求的包裹， 比如允许开发者通过HttpServletRequest的getRemoteUser()方法获得SSO登录用户的登录名，可选配置 --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line">        org.jasig.cas.client.util.HttpServletRequestWrapperFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS HttpServletRequest Wrapper Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- 该过滤器使得开发者可以通过org.jasig.cas.client.util.AssertionHolder来获取用户的登录名。 比如AssertionHolder.getAssertion().getPrincipal().getName() --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.jasig.cas.client.util.AssertionThreadLocalFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>CAS Assertion Thread Local Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后启动web项目，可以在cas server控制台中看到，单点登录的验证被cas分成了以下四个流程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">2020-11-05 15:02:09,110 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: supplied credentials: [admin+password]</span><br><span class="line">ACTION: AUTHENTICATION_SUCCESS</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 15:02:09 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">SERVER IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">2020-11-05 15:02:09,115 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: TGT-1-eGvRWwn7rsB49Fll1eubp9vIWPY2G3hgsdsRke6p2rkSBCryRQ-cas01.example.org</span><br><span class="line"></span><br><span class="line">ACTION: TICKET_GRANTING_TICKET_CREATED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 15:02:09 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">SERVER IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">2020-11-05 15:02:09,122 INFO [org.jasig.cas.CentralAuthenticationServiceImpl] -</span><br><span class="line">&lt;Granted service ticket [ST-1-UsZN9ffonNXSOH1B9Qhx-cas01.example.org] for servic</span><br><span class="line">e [http:&#x2F;&#x2F;localhost:8080&#x2F;CallBillAnalysis&#x2F;CallBillAnalysis&#x2F;] for user [admin]&gt;</span><br><span class="line">2020-11-05 15:02:09,124 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: admin</span><br><span class="line">WHAT: ST-1-UsZN9ffonNXSOH1B9Qhx-cas01.example.org for http:&#x2F;&#x2F;localhost:8080&#x2F;Call</span><br><span class="line">BillAnalysis&#x2F;CallBillAnalysis&#x2F;</span><br><span class="line">ACTION: SERVICE_TICKET_CREATED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 15:02:09 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">SERVER IP ADDRESS: 0:0:0:0:0:0:0:1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">&gt;</span><br><span class="line">2020-11-05 15:02:09,156 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: ST-1-UsZN9ffonNXSOH1B9Qhx-cas01.example.org</span><br><span class="line">ACTION: SERVICE_TICKET_VALIDATED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 15:02:09 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 127.0.0.1</span><br><span class="line">SERVER IP ADDRESS: 127.0.0.1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p><code>Service ticket(ST)</code>：服务票据，由KDC的TGS发放。任何一台Workstation都需要拥有一张有效的 Service Ticket 才能访问域内部的应用(Applications)。<br><code>Ticket Granting tieckt(TGT)</code>：票据授权票据，由KDC的AS发放。即获取这样一张票据后，以后申请各种其他服务票据(ST)便不必再向KDC提交身份认证信息(准确术语是Credentials)。</p><ul><li>第一步、第二步,用户通过<code>Authentication service(AS)</code>即认证服务，之后索取credentials，用于发放TGT。</li><li>第三步，由于cas-client认证需要ST（票据服务），所以需要由<code>ticket-granting service(TGS)即票据授权服务</code>拿到上一步的TGT，并创建ST。</li><li>第四步，cas-client拿到ST之后，将票据和项目启动默认地址提交调用TicketValidator#validate(ST，#{project-start-default-url})提交给cas-server做验证。</li></ul><p>票据验证成功后，我们可以拿到用户名以及其它信息，用于系统后续的权限认证。</p><h3 id="项目接入cas"><a href="#项目接入cas" class="headerlink" title="项目接入cas"></a>项目接入cas</h3><p>在此之前，项目里拥有自己的单点登录模块，并重写了cas-client相关验证方法，所以我们沿用之前的配置的时候，难免有些地方会有出入，需要对原有代码进行改造。</p><h4 id="ST验证的Serice-url不一致"><a href="#ST验证的Serice-url不一致" class="headerlink" title="ST验证的Serice-url不一致"></a>ST验证的Serice-url不一致</h4><p>保证cas-server启动的情况下，将项目参数（sso server地址）配置完成，启动项目,成功被cas-server拦截在登录页面。</p><p>在输入用户名和密码后，页面一直在重定向跳转(cas-server用户认证成功，但在后续操作中失败导致不停的回滚重试)。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/cas/%E9%A1%B5%E9%9D%A2%E9%87%8D%E5%AE%9A%E5%90%91.png" alt="页面重定向"></p><p>并且服务器端报错，log日志如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">2020-11-05 18:11:15,221 ERROR [org.jasig.cas.CentralAuthenticationServiceImpl] -</span><br><span class="line"> &lt;ServiceTicket [ST-56-jt4cn4404nJEpJgYguD2-cas01.example.org] with service [htt</span><br><span class="line">p:&#x2F;&#x2F;localhost:8080&#x2F;CallBillAnalysis&#x2F;cas] does not match supplied service [http:&#x2F;</span><br><span class="line">&#x2F;localhost:8080&#x2F;CallBillAnalysis&#x2F;cas&#x2F;CallBillAnalysis&#x2F;cas]&gt;</span><br><span class="line">2020-11-05 18:11:15,222 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: ST-56-jt4cn4404nJEpJgYguD2-cas01.example.org</span><br><span class="line">ACTION: SERVICE_TICKET_VALIDATE_FAILED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 18:11:15 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 127.0.0.1</span><br><span class="line">SERVER IP ADDRESS: 127.0.0.1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>从服务器日志可以看出，cas-client拿到票据信息向服务端校验的时候失败了，失败原因是<a href="http://localhost:8080/CallBillAnalysis/cas和http://localhost:8080/CallBillAnalysis/cas/CallBillAnalysis/cas不匹配，在项目中发现这样一段代码：" target="_blank" rel="noopener">http://localhost:8080/CallBillAnalysis/cas和http://localhost:8080/CallBillAnalysis/cas/CallBillAnalysis/cas不匹配，在项目中发现这样一段代码：</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCasService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">StringBuffer req = request.getRequestURL();</span><br><span class="line">req.substring(<span class="number">0</span>, req.indexOf(request.getContextPath()));</span><br><span class="line"><span class="comment">//这里又拼了一次</span></span><br><span class="line">req.append(request.getContextPath()).append(<span class="string">"/cas"</span>);</span><br><span class="line"><span class="keyword">return</span> req.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把req.append(request.getContextPath()).append(“/cas”);这段代码注释掉，不再报此问题。</p><h4 id="票据验证的超时处理"><a href="#票据验证的超时处理" class="headerlink" title="票据验证的超时处理"></a>票据验证的超时处理</h4><p>页面仍然疯狂重定向，好巧不巧的我把断点打在了票据验证的方法上，因为需要查看票据验证的内部逻辑，所以有些耗时，而这种操作一般会大于ST票据的默认有效期（10秒），导致cas-server控制台又抛出错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">2020-11-05 18:31:44,126 INFO [org.jasig.cas.CentralAuthenticationServiceImpl] -</span><br><span class="line">&lt;ServiceTicket [ST-70-QmOkXqbaJcuKkZ5hqkWf-cas01.example.org] has expired.&gt;</span><br><span class="line">2020-11-05 18:31:44,130 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: ST-70-QmOkXqbaJcuKkZ5hqkWf-cas01.example.org</span><br><span class="line">ACTION: SERVICE_TICKET_VALIDATE_FAILED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 18:31:44 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 127.0.0.1</span><br><span class="line">SERVER IP ADDRESS: 127.0.0.1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>从日志中可以看出ServiceTicket has expired 已经过期了。所以我们需要修改cas server票据有效期的默认配置。</p><p>修改CAS服务器本身的超时判断时间,在WEB-INF/cas.properties中修改,将st.timeToKillInSeconds（默认10s）参数调大</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st.timeToKillInSeconds&#x3D;500</span><br></pre></td></tr></table></figure><h4 id="无法获取到用户名"><a href="#无法获取到用户名" class="headerlink" title="无法获取到用户名"></a>无法获取到用户名</h4><p>此时如果不出意外的话，TicketValidator#validate会校验成功，server控制台会出现SERVICE_TICKET_VALIDATED校验成功的字段。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2020-11-05 18:58:15,305 INFO [com.github.inspektr.audit.support.Slf4jLoggingAudi</span><br><span class="line">tTrailManager] - &lt;Audit trail record BEGIN</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">WHO: audit:unknown</span><br><span class="line">WHAT: ST-71-4uniggzr4MdFDUr3R936-cas01.example.org</span><br><span class="line">ACTION: SERVICE_TICKET_VALIDATED</span><br><span class="line">APPLICATION: CAS</span><br><span class="line">WHEN: Thu Nov 05 18:58:15 CST 2020</span><br><span class="line">CLIENT IP ADDRESS: 127.0.0.1</span><br><span class="line">SERVER IP ADDRESS: 127.0.0.1</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><p>但拿到的<code>casAssertion</code>却无法获取到登录名，调试结果如下：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/cas/%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E5%90%8D.png" alt="用户名无法访问"></p><p>在一番分析后，定位到AbstractUrlBasedTicketValidator#validate方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Assertion <span class="title">validate</span><span class="params">(String ticket, String service)</span> <span class="keyword">throws</span> TicketValidationException </span>&#123;</span><br><span class="line">    <span class="comment">//这里请求的地址为：http://localhost:18080/cas/validate?ticket=ST-74-ApfoBG1Eed6P4guj3Cb3-cas01.example.org&amp;service=http://localhost:8080/CallBillAnalysis/cas</span></span><br><span class="line">       String validationUrl = <span class="keyword">this</span>.constructValidationUrl(ticket, service);</span><br><span class="line">       <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">           <span class="keyword">this</span>.log.debug(<span class="string">"Constructing validation url: "</span> + validationUrl);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">this</span>.log.debug(<span class="string">"Retrieving response from server."</span>);</span><br><span class="line">           <span class="comment">//这里返回response为："yes\nadmin\n"</span></span><br><span class="line">           String serverResponse = <span class="keyword">this</span>.retrieveResponseFromServer(<span class="keyword">new</span> URL(validationUrl), ticket);</span><br><span class="line">           <span class="keyword">if</span> (serverResponse == <span class="keyword">null</span>) &#123;</span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> TicketValidationException(<span class="string">"The CAS server returned no response."</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="keyword">if</span> (<span class="keyword">this</span>.log.isDebugEnabled()) &#123;</span><br><span class="line">                   <span class="keyword">this</span>.log.debug(<span class="string">"Server response: "</span> + serverResponse);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">this</span>.parseResponseFromServer(serverResponse);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">catch</span> (MalformedURLException var5) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> TicketValidationException(var5);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//TuscTicketValidator#parseResponseFromServer</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> Assertion <span class="title">parseResponseFromServer</span><span class="params">(<span class="keyword">final</span> String response)</span> <span class="keyword">throws</span> TicketValidationException </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!response.startsWith(<span class="string">"yes"</span>)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> TicketValidationException(<span class="string">"sso Server could not validate ticket."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">final</span> BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> StringReader(response));</span><br><span class="line">reader.readLine();</span><br><span class="line"></span><br><span class="line">String name = <span class="string">""</span>;</span><br><span class="line">String line = <span class="string">""</span>;</span><br><span class="line">Map userMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"><span class="comment">//虽然response中包含用户名　但在这里Assertion装载的时候　显然并没有"=",导致name=null</span></span><br><span class="line"><span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> equalPositon = line.indexOf(<span class="string">"="</span>);</span><br><span class="line"><span class="keyword">if</span> (equalPositon != -<span class="number">1</span>) &#123;</span><br><span class="line">String key = line.substring(<span class="number">0</span>, equalPositon);</span><br><span class="line">String value = line.substring(equalPositon + <span class="number">1</span>, line.length());</span><br><span class="line"><span class="keyword">if</span> (!CommonUtils.isBlank(value))</span><br><span class="line">value = URLDecoder.decode(value, <span class="string">"UTF-8"</span>);</span><br><span class="line"><span class="keyword">if</span> (key.equals(<span class="string">"name"</span>)) &#123;</span><br><span class="line">name = value;</span><br><span class="line">&#125;</span><br><span class="line">userMap.put(key, value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Assertion assertion = <span class="keyword">new</span> AssertionImpl(<span class="keyword">new</span> AttributePrincipalImpl(name, userMap));</span><br><span class="line"><span class="keyword">return</span> assertion;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> IOException e) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> TicketValidationException(<span class="string">"Unable to parse response."</span>, e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但之前验证的demo中是可以获取到用户名的，所以把之前验证的流程又跑了一遍，debug到同处的代码,发现如下的结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">validationUrl &#x3D; http:&#x2F;&#x2F;localhost:18080&#x2F;cas&#x2F;serviceValidate?ticket&#x3D;ST-77-H20CVLaec7ndH20J5tIv-cas01.example.org&amp;service&#x3D;http:&#x2F;&#x2F;localhost:8080&#x2F;CallBillAnalysis&#x2F;CallBillAnalysis&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serverResponse &#x3D; &lt;cas:serviceResponse xmlns:cas&#x3D;&#39;http:&#x2F;&#x2F;www.yale.edu&#x2F;tp&#x2F;cas&#39;&gt;</span><br><span class="line">&lt;cas:authenticationSuccess&gt;</span><br><span class="line">&lt;cas:user&gt;admin&lt;&#x2F;cas:user&gt;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">&lt;&#x2F;cas:authenticationSuccess&gt;</span><br><span class="line">&lt;&#x2F;cas:serviceResponse&gt;</span><br></pre></td></tr></table></figure><p>通过postman调用两种不同的validationUrl，发现后者即以<a href="http://localhost:18080/cas/serviceValidate请求的票据验证才会返回这种xml形式的结果。" target="_blank" rel="noopener">http://localhost:18080/cas/serviceValidate请求的票据验证才会返回这种xml形式的结果。</a></p><p>以此可以定位到两者构造的TicketValidator类不相同，在UIMRealm#doGetAuthenticationInfo方法中</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法构造TicketValidator</span></span><br><span class="line">TicketValidator ticketValidator = ensureTicketValidator();</span><br><span class="line"></span><br><span class="line"><span class="comment">//原生方法　最终会创建Cas20ServiceTicketValidator类对象</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> TicketValidator <span class="title">createTicketValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String urlPrefix = <span class="keyword">this</span>.getCasServerUrlPrefix();</span><br><span class="line">    <span class="keyword">return</span> (TicketValidator)(<span class="string">"saml"</span>.equalsIgnoreCase(<span class="keyword">this</span>.getValidationProtocol()) ? <span class="keyword">new</span> Saml11TicketValidator(urlPrefix) : <span class="keyword">new</span> Cas20ServiceTicketValidator(urlPrefix));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Cas20ServiceTicketValidator#getUrlSuffix() -&gt; return "serviceValidate"</span><br><span class="line"></span><br><span class="line"><span class="comment">//平台改造重写了createTicketValidator()方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> TicketValidator <span class="title">createTicketValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String urlPrefix = getCasServerUrlPrefix();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TuscTicketValidator(urlPrefix);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TuscTicketValidator#getUrlSuffix() -&gt; return "validate"</span><br></pre></td></tr></table></figure><p>最后将此实例构造类替换为Cas20ServiceTicketValidator，这样就能够正确解析到用户名了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> TicketValidator <span class="title">createTicketValidator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String urlPrefix = getCasServerUrlPrefix();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Cas20ServiceTicketValidator(urlPrefix);</span><br><span class="line"><span class="comment">//return new TuscTicketValidator(urlPrefix);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LAST-BUT-NOT-LEAST"><a href="#LAST-BUT-NOT-LEAST" class="headerlink" title="LAST BUT NOT LEAST"></a>LAST BUT NOT LEAST</h4><p>通过获取到的用户名，查询数据库内人员组织信息，放入shiro中作权限管理 （no longer show it）</p>]]></content>
      
      
      <categories>
          
          <category> sso </category>
          
          <category> cas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次内存溢出的解决方案</title>
      <link href="/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html"/>
      <url>/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%86%85%E5%AD%98%E6%BA%A2%E5%87%BA%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在前文<a href="https://sillybilly-share.top/netty-ByteBuf%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8A%E6%94%BE.html">netty ButeBuf使用</a>中可以了解到JVM主要由堆、方法区、虚拟机栈、本地方法栈、程序计数器组成。由于在最近的项目中遇到了堆/堆外内存溢出(Java heap space/Direct buffer memory),所以这里结合自身对JVM的了解，讲述如果遇到内存溢出情况，我们应该如何解决。再次引入jvm内存结构图</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/netty/jvm.png" alt="JVM Model"></p><a id="more"></a><h2 id="JVM类加载"><a href="#JVM类加载" class="headerlink" title="JVM类加载"></a>JVM类加载</h2><p>编译的过程不多做解释，我们都知道JVM的编译过程是将我们程序员编写的<code>.java</code>文件通过javac命令编译为与平台无关的<code>.class</code>文件(与平台无关的字节码),然后通过JVM的java命令解释执行。</p><p>JVM的类加载过程，是将编译完成后的<code>.class</code>文件加载到内存，并且经过一系列的数据校验、解析、初始化，最终形成JVM可以直接使用的java类型的过程。</p><ul><li>二进制的<code>.class</code>文件字节码加载到内存，并将这些静态数据转换为方法区中的运行时数据结构，然后在堆中生成一个代表这个类的<code>java.lang.Class</code>对象，作为方法区数据的访问入口，这也时JVM反射<code>java.lang.reflect</code>得以实现的根本原因。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/jvm/1.png" alt="class文件加载到堆和方法区"></p><ul><li><p>验证，确保加载的类信息符合JVM规范，并且没有安全方面的问题。</p></li><li><p>准备，在方法区正式为被static修饰的类变量分配内存并设置内变量初始值,通常是0值。</p></li><li><p>解析，虚拟机常量池内的符号引用替换为直接引用的过程。</p></li><li><p>初始化，初始化是执行类构造器<clinit>()方法的过程。</p></li></ul><p><B>所以我们一般在程序中定义一个变量 A a;这时的a会被压入虚拟机栈，当我们去实例化A对象时<code> A a = new A()</code>,就会在堆中开辟一个A对象的空间，栈中的a就是该对象的引用，假设A中存在<code>A#getA()</code>方法，那么当写到<code>a.getA()</code>时，JVM会从方法区中找到A的二进制数据并调用getA()方法。</B></p><h2 id="内存溢出实例"><a href="#内存溢出实例" class="headerlink" title="内存溢出实例"></a>内存溢出实例</h2><h3 id="java-heap-space"><a href="#java-heap-space" class="headerlink" title="java heap space"></a>java heap space</h3><p>java heap space即堆内存溢出，大多数情况下是一次性加载过多的数据到内存中，导致Major GC时来不及释放所致的内存溢出。</p><p>在项目开发中，本人有幸遇到过两种场景出现过此类问题，还好在测试环境测修复了。</p><p>第一次遇到的是仿制logstash同步mysql数据到elasticsearch，需求的功能是和logstash一样，提供全量更新和增量更新两种实现方式（增量更新通过Spring quartz轮询updateTime or id），在全量更新时由于自己的疏忽，没有做切片,在开发环境的几百条数据没有问题，一到测试环境上万条数据全量查出来（包含mediumtext字段）上传到es，出现connection timeout还好处理，但瞬时的内存飙升，添加限制-Xmx1024m -Xms1024m，马上抛出OutOfMemory。即使同步功能是后台处理，不影响用户访问，这也是不可取的，所以需要按照实际的内存，设计切片大小，给每次同步的数据做切片，针对mysql数据库来说就是要分页查询，这样才能有效避免内存溢出。</p><p>第二次遇到的是大文件的下载，我们会用BufferedInputStream/BufferedOutputStream，一次性读写几kb而不是整个流全读取出来，这样避免大文件流一次性加载到内存，不仅前端浏览器一直处于阻塞状态影响用户体验，同样的如果内存分配不足也会造成内存溢出的情况。简单的代码实现可以是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"download"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(HttpServletResponse response)</span></span>&#123;</span><br><span class="line">        response.addHeader(<span class="string">"content-disposition"</span>,<span class="string">"attachment;filename=test.wmv"</span>);</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"E:\\上【电影圈吧】.wmv"</span>);</span><br><span class="line">        <span class="keyword">try</span>(BufferedInputStream inputStream = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(file));</span><br><span class="line">            BufferedOutputStream outputStream = <span class="keyword">new</span> BufferedOutputStream(response.getOutputStream())) &#123;</span><br><span class="line">            <span class="keyword">int</span> len = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">while</span> ((len = inputStream.read(bytes)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                outputStream.write(bytes,<span class="number">0</span>,len);</span><br><span class="line">                outputStream.flush();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然而在实际开发中，我发现即使这样处理了，在上传大文件时浏览器仍然会一直处于阻塞状态，后端也会出现内存溢出。最后顺藤摸瓜发现平台在security模块，用ContentCachingResponseWrapper缓存了一份响应数据用作监测。。。，修改了部分逻辑后，终于就能够正常分片下载了。</p><h3 id="Direct-buffer-memory"><a href="#Direct-buffer-memory" class="headerlink" title="Direct buffer memory"></a>Direct buffer memory</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><p>Direct buffer memory即堆外内存溢出，类似于netty那种NIO在堆外申请一片内存，存储在Java堆中的DirectByteBuffer对象作为这块内存的引用进行操作，目前的堆外内存的回收是通过system.gc()来处理，依赖于gc机制。<br>young GC时，如果这块内存的对象在堆内仍然被引用，导致一直未被回收，从而DirectByteBuffer对象进入年老代。下次young GC时，处于年老代的对象没有被释放，引用所指向的堆外内存就一直不被释放，就会导致堆外内存溢出。</p><img src = "https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/jvm/2.png" alt = "堆外内存申请" width="500px"><h4 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h4><p>在大文件上传时，都需要分片上传。前端将分片后的文件以异步的ajax传给后端服务器，考虑到并发情况，如果同一时间上传的人过多服务器就会出现堆外内存溢出的情况。</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li><p>JVM调优</p><ul><li><p>增大堆外内存参数（-XX：MaxDirectMemorySize）</p></li><li><p>增大JVM内存(-Xms，-Xmm)，因为JVM堆内存增大，年轻代Eden区(也可以通过-Xmn设置占比)随着的增大，可以保证young GC次数减少,Eden区ByteBuf对象可以在足够的时间内处理完等待释放，而不用转到Old区。</p></li></ul></li><li><p>代码调优(时间换空间)</p><ul><li><p>将前端传输异步改成同步，如果当前上传人数并不多并且服务器资源足够，这样极易影响用户上传体验，不推荐</p></li><li><p>采用信号量机制（Semaphore）,根据内存大小设定同一时间可访问接口的线程数，类似于做一个熔断阻塞的操作</p></li></ul></li></ul><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>最近开始迷惘，经常涉猎多个中间件却只是站在巨人的肩旁上看世界，自己并没有一次深入研究，脱离了封装好的API，甚至有些轮子都造不出。学习的方式是选择”广度优先”还是”深度优先”，我一直没有找到合适的切入点，希望尽快脱离这种状态吧 </p><p right>current time:<small>2020.7.15 20:00:01</small></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> jvm调优 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
            <tag> DirectByteBuffer </tag>
            
            <tag> heap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSR310日期类api解析</title>
      <link href="/JSR310%E6%97%A5%E6%9C%9F%E7%B1%BBapi%E8%A7%A3%E6%9E%90.html"/>
      <url>/JSR310%E6%97%A5%E6%9C%9F%E7%B1%BBapi%E8%A7%A3%E6%9E%90.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>之前在项目中零零散散的用到过java8新推的JSR310的日期规范，主要是<code>rt.jar</code>下的<code>java.time</code>的使用，因为实在是太好用了，所以本人誓要抽空系统的整理一遍。</p><h2 id="时区的理解"><a href="#时区的理解" class="headerlink" title="时区的理解"></a>时区的理解</h2><p>1863年，国际上首次出现时区的概念。时区通过设立一个区域的标准时间部分地解决了这个问题。世界各国位于地球不同位置上，因此不同国家，特别是东西跨度大的国家日出、日落时间必定有所偏差，这些偏差就是所谓的时差。</p><p>全球分为24个时区，东西各12个时区（中国位于东八区即北京时间）。</p><p>如果时间是以协调世界时<red>UTC</red>表示，则在时间后面直接加上一个“Z”（不加空格）。“Z”是协调世界时中0时区的标志。因此，“09:30 UTC”就写作“09:30Z”或是“0930Z”。“14:45:15 UTC”则为“14:45:15Z”或“144515Z”。UTC时间也被叫做祖鲁时间，因为在北约音标字母中用“Zulu”表示“Z”。</p><p>同样的，格林尼治标准时间<red>GMT</red>的正午是指当平太阳横穿格林尼治子午线时（也就是在格林尼治上空最高点时）的时间。</p><p><code>GMT+8</code>或者<code>UTC+8</code>均可视为中国时间，不过推荐用UTC+8因为地球每天的自转是有些不规则的，而且正在缓慢减速，因此格林尼治平时基于天文观测本身的缺陷，已经被原子钟报时的协调世界时（UTC）所取代。</p><a id="more"></a><p>有很多用缩写字母表示的时区，例如“EST、WST、CST”等。但是它们并不是ISO 8601标准的一部分，不应单独用它们作为时区的标识,<b>其中 CST (<code>China Standard Time</code>）即中国标准时间，CST = UCT+8/GMT+8</b></p><h3 id="jdk时区的使用"><a href="#jdk时区的使用" class="headerlink" title="jdk时区的使用"></a>jdk时区的使用</h3><p>时区ID，例如Europe/Paris、Asia/Shanghia。<br>ZoneId用于标识用于在Instant和之间转换的规则LocalDateTime。有两种不同的ID类型：</p><ul><li>固定偏移量-与UTC /格林威治标准时间完全抵消的偏移量，所有本地日期时间都使用相同的偏移量</li><li>地理区域-适用于从UTC /格林威治中查找偏移量的一组特定规则的区域</li></ul><p>大多数固定偏移量由ZoneOffset表示，它是以UTC/GMT为基准的偏移时间量，它有两种类型的表达方式</p><h4 id="固定偏移量-ZoneOffset"><a href="#固定偏移量-ZoneOffset" class="headerlink" title="固定偏移量-ZoneOffset"></a>固定偏移量-ZoneOffset</h4><p>它可以由“ Z”和以“ +”或“-”开头的ID组成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Z（即表示UTC&#x2F;GMT）</span><br><span class="line">+h&#x2F;-h (在UTC基础上偏移几个小时，比如中国位于东八区则表示为+8)</span><br><span class="line">+hh&#x2F;-hh </span><br><span class="line">+hh:mm&#x2F;-hh:mm</span><br><span class="line">+hh:mm:ss&#x2F;-hh:mm:ss</span><br><span class="line">+hhmmss&#x2F;-hhmmss</span><br></pre></td></tr></table></figure><p>以jdk中ZoneOffset#of(String zoneId)举几个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//协调世界时</span></span><br><span class="line">ZoneOffset zoneOffset = ZoneOffset.of(<span class="string">"Z"</span>);</span><br><span class="line"><span class="comment">//东八区</span></span><br><span class="line">zoneOffset = ZoneOffset.of(<span class="string">"+08:00"</span>);</span><br><span class="line"><span class="comment">//西八区</span></span><br><span class="line">zoneOffset = ZoneOffset.of(<span class="string">"-8"</span>);</span><br></pre></td></tr></table></figure><p>当然也可以用静态方法ZoneId#of(String zoneId)，它会逐步解析入参规则，匹配固定偏移量或者地理区域</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> ZoneId <span class="title">of</span><span class="params">(String var0, <span class="keyword">boolean</span> var1)</span> </span>&#123;</span><br><span class="line">        Objects.requireNonNull(var0, <span class="string">"zoneId"</span>);</span><br><span class="line">        <span class="keyword">if</span> (var0.length() &gt; <span class="number">1</span> &amp;&amp; !var0.startsWith(<span class="string">"+"</span>) &amp;&amp; !var0.startsWith(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!var0.startsWith(<span class="string">"UTC"</span>) &amp;&amp; !var0.startsWith(<span class="string">"GMT"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (ZoneId)(var0.startsWith(<span class="string">"UT"</span>) ? ofWithPrefix(var0, <span class="number">2</span>, var1) : ZoneRegion.ofId(var0, var1));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> ofWithPrefix(var0, <span class="number">3</span>, var1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> ZoneOffset.of(var0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="地理区域-ZoneRegion"><a href="#地理区域-ZoneRegion" class="headerlink" title="地理区域-ZoneRegion"></a>地理区域-ZoneRegion</h4><p>地址区域表示类<code>java.time.ZoneRegion</code>,不过其<code>ZoneRegion#ofId</code>是default修饰，所以我们只能通过<code>ZoneId#of</code>方法去设置地理区域，常用格式为：洲(州、国家)/城市.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ZoneId zoneId = ZoneId.systemDefault();</span><br><span class="line">System.out.println(zoneId);</span><br></pre></td></tr></table></figure><p>本人在上海，所以这里会打印出来<code>Asia/Shanghai</code></p><h2 id="JSR310常用Api"><a href="#JSR310常用Api" class="headerlink" title="JSR310常用Api"></a>JSR310常用Api</h2><p>在说JSR310的新特性之前不得不吐槽jdk8之前日期类非人类的设计，比如</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Date date = <span class="keyword">new</span> Date(<span class="number">2020</span>,<span class="number">7</span>,<span class="number">1</span>);</span><br><span class="line">System.out.println(date);</span><br></pre></td></tr></table></figure><p>这里打印出来的是：<code>Sun Aug 01 00:00:00 CST 3920</code>,我这里year还得减去1900…同样的定义的7月份输出却是8月份(Aug)，可读性极差。<br>所以我们不得不去Calendar类去表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.set(<span class="number">2020</span>, Calendar.JULY, <span class="number">1</span>);</span><br></pre></td></tr></table></figure><p>我们不必去考虑年份减去1900,然而Calendar.JULY代表着7月，数字却是6…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JANUARY = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FEBRUARY = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MARCH = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> APRIL = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAY = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JUNE = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> JULY = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> AUGUST = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SEPTEMBER = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> OCTOBER = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOVEMBER = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DECEMBER = <span class="number">11</span>;</span><br></pre></td></tr></table></figure><p>这种令人无语的设计，让我代码写着都膈应。<b>当然最重要的是，JSR310之前的设计很多类的属性都是可变的，而新增的日期时间类都是不可变类，每次通过其方法更变或者修改都是返回一个全新的对象，因此它们都是线程安全的。</b></p><h3 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h3><p>clock即时钟，用于使用时区访问当前时刻，日期和时间。<br>此类的实例用于查找当前时刻,可以使用存储的时区来解释当前时刻以查找当前日期和时间。因此,可以使用时钟代替System.currentTimeMillis() 和TimeZone.getDefault()。<br><code>java.time.Clock</code>提供以下的实例方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取用于创建日期和时间的时区</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ZoneId <span class="title">getZone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取时钟的当前时刻</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Instant <span class="title">instant</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取时钟的当前毫秒瞬间</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">millis</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//返回带有不同时区的此时钟的副本</span></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Clock <span class="title">withZone</span><span class="params">(ZoneId zoneId)</span></span>;</span><br></pre></td></tr></table></figure><p>clock包含了四个实现类<code>FixedClock、OffsetClock、SystemClock、TickClock</code>,下面的静态方法都源于这四个实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得始终返回相同时刻的时钟</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock <span class="title">fixed</span><span class="params">(Instant fixedInstant, ZoneId zone)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取一个时钟，该时钟从基础时钟返回瞬时值，并添加指定的时间偏移量</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">offset</span><span class="params">(Clock baseClock, Duration offsetDuration)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获得指定时区的时钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">system</span><span class="params">(ZoneId zone)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取当前时刻的时钟，并使用默认时区将其转换为日期和时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">systemDefaultZone</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取当前时刻的时钟，并使用UTC时区转换为日期和时间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">systemUTC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取一个时钟，该时钟返回从指定时钟被截断到指定持续时间的最接近值的瞬间</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">tick</span><span class="params">(Clock baseClock, Duration tickDuration)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获得一个时钟，该时钟使用指定时区并返回整分钟的当前时刻的时钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">tickMinutes</span><span class="params">(ZoneId zone)</span></span></span><br><span class="line"><span class="function"><span class="comment">//获取一个时钟，该时钟使用指定时区并返回整秒内的当前时刻的时钟</span></span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Clock  <span class="title">tickSeconds</span><span class="params">(ZoneId zone)</span></span></span><br></pre></td></tr></table></figure><p>看上去tickMinutes/tickSeconds的api注释比较拗口 其实tickSeconds计量到秒，tickMinutes计量到分（秒部分会置为0）</p><h3 id="Instant、LocalDate、LocalTime、LocalDateTime"><a href="#Instant、LocalDate、LocalTime、LocalDateTime" class="headerlink" title="Instant、LocalDate、LocalTime、LocalDateTime"></a>Instant、LocalDate、LocalTime、LocalDateTime</h3><ul><li>Instant: 瞬时时间，等价于以前的System.currentTimeMillis()。</li><li>LocalDate: ISO-8601日历系统中没有时区的日期，例如2020-07-01,只代表年-月-日</li><li>LocalTime: ISO-8601日历系统中没有时区的时间，例如20:00:00，只代表时-分-秒</li><li>LocalDateTime: ISO-8601日历系统中没有时区的日期时间，例如2020-07-01T20:00:00，通常被视为年-月-日-时-分-秒</li></ul><p>我们经常需要将Date类型转化为JSR310中的日期类计算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDate <span class="title">getLocalDate</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Instant.ofEpochMilli(date.getTime()).atZone(ZoneId.of(<span class="string">"+8"</span>)).toLocalDate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalTime <span class="title">getLocalTime</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Instant.ofEpochMilli(date.getTime()).atZone(ZoneId.of(<span class="string">"+8"</span>)).toLocalTime();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalDateTime <span class="title">getLocalDateTime</span><span class="params">(Date date)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Instant.ofEpochMilli(date.getTime()).atZone(ZoneId.of(<span class="string">"+8"</span>)).toLocalDateTime();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以利用JSR310新增的类用来比较两个日期是否处于同一天</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">compareTo</span><span class="params">(Date date1,Date date2)</span> </span>&#123;</span><br><span class="line">    LocalDate time1 = getLocalDate(date1);</span><br><span class="line">    LocalDate time2 = getLocalDate(date2);</span><br><span class="line">    <span class="keyword">return</span> time2.getYear() == time1.getYear() &amp;&amp; time2.getMonth().compareTo(time1.getMonth()) == <span class="number">0</span> &amp;&amp; time2.getDayOfMonth() == time1.getDayOfMonth();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们也可以处理String转Date、Date转String的格式处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">getDate</span><span class="params">(String date)</span></span>&#123;</span><br><span class="line">    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"EEE MMM dd HH:mm:ss zzz yyyy"</span>,Locale.CHINA);</span><br><span class="line">    LocalDateTime time = LocalDateTime.parse(date,formatter);</span><br><span class="line">    <span class="keyword">return</span> Date.from(time.atZone(ZoneId.systemDefault()).toInstant());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getString</span><span class="params">(Date date)</span></span>&#123;</span><br><span class="line">    LocalDateTime time = LocalDateTime.ofInstant(date.toInstant,ZoneId.systemDefault());</span><br><span class="line">    <span class="keyword">return</span> DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).format(time);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等等…参照jkd8 api文档，这里就不一一列举了。</p><h3 id="OffsetTime、OffsetDateTime、ZonedDateTime"><a href="#OffsetTime、OffsetDateTime、ZonedDateTime" class="headerlink" title="OffsetTime、OffsetDateTime、ZonedDateTime"></a>OffsetTime、OffsetDateTime、ZonedDateTime</h3><ul><li>OffsetTime: ISO-8601日历系统中的UTC/GMT带偏移量的时间，例如20:00:00+08:00</li><li>OffsetDateTime: ISO-8601日历系统中的UTC/GMT带偏移量的时间，例如2020-07-01T20:00:00+08:00 (不支持ZoneRegion的时区格式)</li><li>ZonedDateTime: ISO-8601日历系统中带有时区的日期时间，例如2020-07-01T20:00:00+08:00 Europe/Paris (支持ZoneRegion的时区格式)</li></ul><p>OffsetTime可以类比LocalTime,OffsetDateTime/ZonedDateTime可以类比LocalDateTime，相比之下，他们多存储了一个时区时间偏移量(zone offset)属性，其余的api方法相差不大。</p><h3 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h3><p>duration是一个基于时间的时间量，例如’34.5 seconds’，它用来表示两个瞬时时间的时间段。</p><p>举个最基本的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1天时差 类似的还有如ofHours()  </span></span><br><span class="line">Duration d2 = Duration.ofDays(<span class="number">1</span>);  </span><br><span class="line">System.out.println(d2.toDays());  </span><br><span class="line"></span><br><span class="line">console print: <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//比较两个日期的时间差</span></span><br><span class="line"><span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line">Instant instant1 = Instant.ofEpochMilli(now-<span class="number">1</span>);</span><br><span class="line">Instant instant2 = Instant.ofEpochMilli(now);</span><br><span class="line">Duration duration = Duration.between(instant1,instant2);</span><br><span class="line">System.out.println(duration.toMillis());</span><br><span class="line"></span><br><span class="line">console print: <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Year、YearMonth、MonthDay、Period"><a href="#Year、YearMonth、MonthDay、Period" class="headerlink" title="Year、YearMonth、MonthDay、Period"></a>Year、YearMonth、MonthDay、Period</h3><ul><li>Year: 基于ISO-8601日期系统下表示年份，例如2020</li><li>YearMonth: ISO-8601日历系统中的一年月，例如2020-07</li><li>MonthDay: ISO-8601日历系统中的一个月日，例如–07-01</li><li>Period: ISO-8601日历系统中基于日期的时间量，例如”2年，3个月和4天”</li></ul><p>这里主要针对Period即周期做个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//表示前1天</span></span><br><span class="line">Period period1 = Period.ofDays(<span class="number">1</span>);  </span><br><span class="line">System.out.println(period1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">console print: P1D</span><br><span class="line"><span class="comment">//2年5个月前  </span></span><br><span class="line">Period period2 = Period.of(<span class="number">2</span>, <span class="number">5</span>, <span class="number">0</span>);  </span><br><span class="line">System.out.println(period2);</span><br><span class="line"></span><br><span class="line">console print: P2Y5M</span><br></pre></td></tr></table></figure><h3 id="Chronology"><a href="#Chronology" class="headerlink" title="Chronology"></a>Chronology</h3><p>Chronology:主日期和时间API建立在ISO日历系统上,年表在后台进行操作，以表示日历系统的一般概念。主要用于对年历系统的支持，是java.util.Calendar的替代者。使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Chronology c  = HijrahChronology.INSTANCE;  </span><br><span class="line">ChronoLocalDateTime d = c.localDateTime(LocalDateTime.now());  </span><br><span class="line">System.out.println(d);</span><br><span class="line"></span><br><span class="line">console.print: Hijrah-umalqura AH <span class="number">1441</span>-<span class="number">11</span>-<span class="number">10</span>T18:<span class="number">10</span>:<span class="number">35.528</span></span><br></pre></td></tr></table></figure><h2 id="Spring对JSR310的支持"><a href="#Spring对JSR310的支持" class="headerlink" title="Spring对JSR310的支持"></a>Spring对JSR310的支持</h2><p>Spring Framework 4.0提供了对<code>java.time（JSR-310）</code>的相关类的支持</p><p>在springboot工程为背景，我们定义一个实体类如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DateTimeFat</span>(pattern = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime localDateTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"yyyy-MM-dd"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalDate localDate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DateTimeFormat</span>(pattern = <span class="string">"HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> LocalTime localTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写web层demo,调用<code>localhost:8080/test?localDateTime=2020-07-02 20:00:00&localDate=2020-07-02&localTime=20:00:00</code>，spring会自动进行类型转化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Time <span class="title">getTime</span><span class="params">(Time time)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> time;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>postMan测试:</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/java/1.png" alt="result"></p><p>或者我们可以使用Spring默认使用Jackson作为json的序列化工具，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Time</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = LocalDateTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonSerialize</span>(<span class="title">using</span> </span>= LocalDateTimeSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">LocalDateTime</span> <span class="title">localDateTime</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = LocalDateDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonSerialize</span>(<span class="title">using</span> </span>= LocalDateSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">LocalDate</span> <span class="title">localDate</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonDeserialize</span>(using = LocalTimeDeserializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    @<span class="title">JsonSerialize</span>(<span class="title">using</span> </span>= LocalTimeSerializer<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">private</span> <span class="title">LocalTime</span> <span class="title">localTime</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>补充说明: <b>对于常用的ORM框架，新版的mybatis也已经内置了mybatis-typehandlers-jsr310的依赖，所以对于数据库的增删改查也可以无感使用JSR310日期类开发啦！</b></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://docs.oracle.com/javase/8/docs/api/java/time/package-summary.html" target="_blank" rel="noopener">oracle java.time api</a></li><li><a href="https://zh.wikipedia.org/wiki/%E6%97%B6%E5%8C%BA" target="_blank" rel="noopener">维基百科-时区的定义</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊一聊分布式锁的不同实现</title>
      <link href="/%E8%81%8A%E4%B8%80%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0.html"/>
      <url>/%E8%81%8A%E4%B8%80%E8%81%8A%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E4%B8%8D%E5%90%8C%E5%AE%9E%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在平时遇到资源抢占的问题时，我们经常使用synchronized加锁的方式去实现资源同步，简单粗暴，并且在对性能要求不高的业务中实现起来屡试不爽。然而就目前而言，大部分的线上项目，为了避免单点故障，都实现了双击部署（or more），因此一些业务单靠线程加锁的实现方式是不完全可行的。所以，本文主要讲述自身在过去项目中使用的一些分布锁的使用与个人理解。</p><h2 id="mysql实现"><a href="#mysql实现" class="headerlink" title="mysql实现"></a>mysql实现</h2><h3 id="基于mysql的乐观锁"><a href="#基于mysql的乐观锁" class="headerlink" title="基于mysql的乐观锁"></a>基于mysql的乐观锁</h3><h4 id="乐观锁"><a href="#乐观锁" class="headerlink" title="乐观锁"></a>乐观锁</h4><p>乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则返回给用户错误的信息。</p><h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><p>mysql中基于version版本号实现，服务A、B同时查询数据库对应的lock_verion信息，在更新时将version=oldversion+1,并将oldversion作为条件更新记录。若最终影响行数不为0则更新成功，否则更新失败。</p><a id="more"></a><h4 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h4><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/1.png" alt="result"></p><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><p>尽量不参杂任务业务逻辑，我们在数据库新建一张表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SET NAMES utf8mb4;</span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 0;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Table structure for optimistic_lock</span><br><span class="line">-- ----------------------------</span><br><span class="line">DROP TABLE IF EXISTS &#96;optimistic_lock&#96;;</span><br><span class="line">CREATE TABLE &#96;optimistic_lock&#96;  (</span><br><span class="line">  &#96;id&#96; int(11) NOT NULL AUTO_INCREMENT COMMENT &#39;id&#39;,</span><br><span class="line">  &#96;lock_name&#96; varchar(50) CHARACTER SET utf8 COLLATE utf8_bin NULL DEFAULT NULL COMMENT &#39;乐观锁名称&#39;,</span><br><span class="line">  &#96;version&#96; int(255) NULL DEFAULT 0 COMMENT &#39;版本&#39;,</span><br><span class="line">  &#96;is_delete&#96; tinyint(2) NULL DEFAULT 0 COMMENT &#39;是否删除&#39;,</span><br><span class="line">  &#96;update_time&#96; datetime(0) NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP(0) COMMENT &#39;更新时间&#39;,</span><br><span class="line">  &#96;create_time&#96; datetime(0) NULL DEFAULT CURRENT_TIMESTAMP COMMENT &#39;创建时间&#39;,</span><br><span class="line">  PRIMARY KEY (&#96;id&#96;) USING BTREE</span><br><span class="line">) ENGINE &#x3D; InnoDB AUTO_INCREMENT &#x3D; 2 CHARACTER SET &#x3D; utf8 COLLATE &#x3D; utf8_bin ROW_FORMAT &#x3D; Dynamic;</span><br><span class="line"></span><br><span class="line">-- ----------------------------</span><br><span class="line">-- Records of optimistic_lock</span><br><span class="line">-- ----------------------------</span><br><span class="line">INSERT INTO &#96;optimistic_lock&#96; VALUES (1, &#39;try_lock&#39;, 15, 0, &#39;2020-06-15 14:22:18&#39;, &#39;2020-06-15 14:22:18&#39;);</span><br><span class="line"></span><br><span class="line">SET FOREIGN_KEY_CHECKS &#x3D; 1;</span><br></pre></td></tr></table></figure><p>新建一个springBoot工程,添加mysql驱动和mybatis-plus jar</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>添加yml配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  # MySQL</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:mysql:<span class="comment">//localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    username: root</span><br><span class="line">    password: <span class="number">123456</span></span><br><span class="line">    driver-class-name: com.mysql.cj.jdbc.Driver</span><br><span class="line">    druid:</span><br><span class="line">      initial-size: <span class="number">5</span></span><br><span class="line">      max-active: <span class="number">20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  mybatis:</span><br><span class="line">    mapper-locations:</span><br><span class="line">      - <span class="string">"classpath:/mapper/*Mapper.xml"</span></span><br><span class="line">      - <span class="string">"classpath:/mapper/**/*Dao.xml"</span></span><br><span class="line">    type-aliases-<span class="keyword">package</span>: com.sillybilly.test.lock.domain</span><br><span class="line">    configuration:</span><br><span class="line">      jdbc-type-<span class="keyword">for</span>-<span class="keyword">null</span>: <span class="string">'null'</span></span><br><span class="line">      map-underscore-to-camel-<span class="keyword">case</span>: <span class="keyword">true</span></span><br><span class="line">      cache-enabled: <span class="keyword">true</span></span><br><span class="line">      ds-name: $&#123;DS_NAME:dataSource&#125;</span><br><span class="line">      ds-type: $&#123;DS_TYPE:MySQL&#125;</span><br></pre></td></tr></table></figure><p>然后通过代码生成器生成实体类和持久层/mapper.xml文件，然后开始编写service代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MysqlLockImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OptimisticLockDao</span>, <span class="title">OptimisticLock</span>&gt; <span class="keyword">implements</span> <span class="title">MysqlLock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OptimisticLockDao optimisticLockDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getLock</span><span class="params">(String lockName)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义条件构造器</span></span><br><span class="line">        QueryWrapper&lt;OptimisticLock&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        wrapper.eq(<span class="string">"lock_name"</span>,lockName)</span><br><span class="line">        .eq(<span class="string">"is_delete"</span>,<span class="number">0</span>);</span><br><span class="line">        OptimisticLock lock = optimisticLockDao.selectOne(wrapper);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == lock)&#123;</span><br><span class="line">        <span class="comment">//当然为了简单，这里是事先定义好的lockName</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"未创建锁记录"</span>);</span><br><span class="line">            <span class="comment">//lock=null 同样可以自行创建该lockName的锁记录</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> version = lock.getVersion();</span><br><span class="line">        lock.setVersion(version+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">            wrapper.eq(<span class="string">"id"</span>,lock.getId())</span><br><span class="line">                    .eq(<span class="string">"version"</span>,version);</span><br><span class="line">            <span class="keyword">int</span> num = optimisticLockDao.update(lock,wrapper);</span><br><span class="line">            <span class="keyword">if</span> (num != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.warn(<span class="string">"thread interruped"</span>,e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>线程睡眠5秒钟，防止线程执行的优先级问题，导致服务AB会有一定的时间差获取锁，让乐观锁失效。方便测试，我们新建一个定时任务执行获取锁的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">cron</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MysqlLock mysqlLock;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每分钟的第0，10，20，30，40，50秒执行</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0,10,20,30,40,50 * * * * ? "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCron</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String lockName = <span class="string">"try_lock"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> isLock = mysqlLock.getLock(lockName);</span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            log.info(<span class="string">"hello world &amp; こんにちは世界"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            log.warn(<span class="string">"乐观锁加锁失败！lock_name:[&#123;&#125;]"</span>,lockName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们开启多个副本，来测试一下效果吧！</p><p>副本A：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/2.png" alt="result"><br>副本B：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/3.png" alt="result"></p><p>显然从结果中可以看出，每隔10s，有且只有一个副本抢占到乐观锁并执行定时任务，轻松解决分布式环境下的资源抢占问题。</p><h3 id="基于mysql的悲观锁"><a href="#基于mysql的悲观锁" class="headerlink" title="基于mysql的悲观锁"></a>基于mysql的悲观锁</h3><h4 id="悲观锁"><a href="#悲观锁" class="headerlink" title="悲观锁"></a>悲观锁</h4><p>&emsp;总是假设最坏的情况，每次取数据时都认为其他线程会修改，所以都会加（悲观）锁。一旦加锁，不同线程同时执行时,只能有一个线程执行，其他的线程在入口处等待，直到锁被释放。<br>&emsp;有很多基于悲观锁的广泛应用，比如:synchronized、基于数据库的spring quartz（行锁）等等。</p><h4 id="悲观锁实现"><a href="#悲观锁实现" class="headerlink" title="悲观锁实现"></a>悲观锁实现</h4><p>前提，数据库为InnoDB。所谓的读写锁、行锁、排他锁等都是悲观锁，我们需要关闭mysql数据库的自动提交属性，通过事务控制select (…) for update语句对锁住某条记录，在业务执行完成后commit释放掉锁，在此中间有其他业务查询时，会进入等待状态。俺就不造轮子了，具体参照spring quartz实现（通过triggers表时间戳，乐观锁和悲观锁的结合实现多副本下只执行一次定时任务）</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">优势：</span><br><span class="line">1、该实现的好处是基于数据库的项目，实现分布式锁可以不用再引入第三方插件，减少jar包依赖的同时也减轻了开发人员学习的负担</span><br><span class="line">2、基于乐观锁的实现并不用考虑什么时候释放锁，也完全不用担心死锁的情况</span><br><span class="line">劣势：</span><br><span class="line">1、由于乐观锁总是在更新时才会校验冲突，需要经常访问数据库，对数据库的压力很大</span><br><span class="line">2、目前平台都会依赖redis(除却老旧的系统)，那么用redis这种成熟的分布式锁方案替代数据库会更加合理</span><br></pre></td></tr></table></figure><h2 id="redis实现"><a href="#redis实现" class="headerlink" title="redis实现"></a>redis实现</h2><h3 id="基于jedis的分布式锁"><a href="#基于jedis的分布式锁" class="headerlink" title="基于jedis的分布式锁"></a>基于jedis的分布式锁</h3><p>从redis 2.6.12开始，set命令提供了可选的复合操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET key value [expiration EX seconds|PX milliseconds] [NX|XX]</span><br></pre></td></tr></table></figure><p>参数解释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">EX：设置超时时间，单位是秒。</span><br><span class="line">PX：设置超时时间，单位是毫秒。</span><br><span class="line">NX：IF NOT EXIST的缩写，只有KEY不存在的前提下才会设置值。</span><br><span class="line">XX：IF EXIST的缩写，只有在KEY存在的前提下才会设置值。</span><br></pre></td></tr></table></figure><p>这样合并的原子操作，让jedis实现分布式锁变得非常简单。尽管这种分布锁的方案存在很多问题，并且有很多文章剖析描述它的不足与隐患之处，但目前看来已经有很多项目把它应用在了实际的生产环境当中。</p><h4 id="代码设计"><a href="#代码设计" class="headerlink" title="代码设计"></a>代码设计</h4><p>添加jedis的jar包:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>编写简易的java类实现setnx操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JedisCron</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        JedisPoolConfig jpc = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jpc.setMaxTotal(<span class="number">100</span>);</span><br><span class="line">        jedisPool = <span class="keyword">new</span> JedisPool(jpc,<span class="string">"127.0.0.1"</span>,<span class="number">6379</span>,<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Jedis <span class="title">getJedis</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0,10,20,30,40,50 * * * * ? "</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scheduledMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String lockKey = <span class="string">"jedis:lock:key"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> lock = <span class="keyword">false</span>;</span><br><span class="line">        <span class="meta">@Cleanup</span> Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            jedis = getJedis();</span><br><span class="line">            SetParams params = <span class="keyword">new</span> SetParams().ex(<span class="number">300</span>).nx();</span><br><span class="line">            String code = jedis.set(lockKey, <span class="string">"1"</span>, params);</span><br><span class="line">            <span class="comment">// 加锁成功</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"OK"</span>.equals(code))&#123;</span><br><span class="line">                lock = <span class="keyword">true</span>;</span><br><span class="line">                <span class="comment">// 这里做调度正常业务逻辑</span></span><br><span class="line">                log.info(<span class="string">"start business"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (lock)&#123;</span><br><span class="line">                jedis.del(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上我们也确实不用考虑最终的删除操作是否成功，我们可以在finally加一层判断，以防止多余的delete操作。</p><h4 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h4><p>通过jedis调用redis的setnx特性完成分布式锁的设计比较简单直观，当然我们也可以结合spring+jedis来设计，不过目前spring推崇使用lettuce作为默认redis的java客户端（下面会讲述spring集成lettuce+lua脚本实现分布式锁），如果项目中用的jedis,那么还是直接用jedis反而会更便捷一点，<small><red>spring-data-redis</red></small>那套反而不太友好。</p><p>以上jedis的实现还会存在一些问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、倘若某个操作设置redis锁的超时时间很长，而finally模块因为一些不可抗力导致没有执行</span><br><span class="line">（比如执行到finally块之前突然断电，虽然几率相当于坠机概率），那么这个锁就在内存里长时间持有</span><br><span class="line">之后哪怕来电重启了服务，持有该锁才能执行的业务逻辑也会陷入长时间的瘫痪</span><br><span class="line">2、锁的持有和释放并非由一个操作这决定，A持有锁，同样的B可以恶意去释放该锁，这样显然时不安全的</span><br></pre></td></tr></table></figure><h3 id="基于lettuce分布式锁"><a href="#基于lettuce分布式锁" class="headerlink" title="基于lettuce分布式锁"></a>基于lettuce分布式锁</h3><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/lettuce-green-text@3x.png" alt="result"><br>目前大部分项目redis的java客户端都默认使用spring+lettuce的方式，对比jedis，lettuce的文档更加齐全，社区也更加活跃，是替代jedis的不二之选。<br>lettuce github:<a href="https://github.com/lettuce-io/lettuce-core" target="_blank" rel="noopener">https://github.com/lettuce-io/lettuce-core</a><br>lettuce wiki:<a href="https://github.com/lettuce-io/lettuce-core/wiki" target="_blank" rel="noopener">https://github.com/lettuce-io/lettuce-core/wiki</a><br>lettuce包含同步、异步和响应式的连接方式，在参考jedis和lettuce的pipLine机制的的时候，发现lettuce似乎并没有看到相关API，它通过netty NIO框架有效管理多个连接并实现了底层pipLine机制，这对于我们开发者而言是屏蔽的。另外<small><red>spring RedisTemplate#executePipelined()</red></small>有点假，实现速率上远不如jedis的pipline机制。这里就不细说了，有空深入了解一下lettuce的源码。</p><h4 id="Spring-lettuce-lua"><a href="#Spring-lettuce-lua" class="headerlink" title="Spring+lettuce+lua"></a>Spring+lettuce+lua</h4><h5 id="lua接口"><a href="#lua接口" class="headerlink" title="lua接口"></a>lua接口</h5><p>lettuce中的lua接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RedisScriptingCommands</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scriptFlush</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scriptKill</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">String <span class="title">scriptLoad</span><span class="params">(<span class="keyword">byte</span>[] var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function">List&lt;Boolean&gt; <span class="title">scriptExists</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">eval</span><span class="params">(<span class="keyword">byte</span>[] var1, ReturnType var2, <span class="keyword">int</span> var3, <span class="keyword">byte</span>[]... var4)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">evalSha</span><span class="params">(String var1, ReturnType var2, <span class="keyword">int</span> var3, <span class="keyword">byte</span>[]... var4)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">evalSha</span><span class="params">(<span class="keyword">byte</span>[] var1, ReturnType var2, <span class="keyword">int</span> var3, <span class="keyword">byte</span>[]... var4)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用eval对输入的脚本代码体（body）进行求值，我们可以定义一个静态代码块，for example:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">"if redis.call(\"get\",KEYS[1]) == ARGV[1] "</span>);</span><br><span class="line">        sb.append(<span class="string">"then "</span>);</span><br><span class="line">        sb.append(<span class="string">"    return redis.call(\"del\",KEYS[1]) "</span>);</span><br><span class="line">        sb.append(<span class="string">"else "</span>);</span><br><span class="line">        sb.append(<span class="string">"    return 0 "</span>);</span><br><span class="line">        sb.append(<span class="string">"end "</span>);</span><br><span class="line">        UNLOCK_LUA = sb.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过lua实现setnx的原子操作，向redis服务器发送请求。</p><h5 id="序列化器"><a href="#序列化器" class="headerlink" title="序列化器"></a>序列化器</h5><p>可选的修改redis存储的序列化器（默认jdk的序列化方式）,我们可以考虑采用redisson的例子实现kryo序列化器：<br><a href="https://github.com/redisson/redisson/blob/master/redisson/src/main/java/org/redisson/codec/KryoCodec.java" target="_blank" rel="noopener">https://github.com/redisson/redisson/blob/master/redisson/src/main/java/org/redisson/codec/KryoCodec.java</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoRedisSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> KryoPool kryoPool;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Collections.&lt;Class&lt;?&gt;&gt;emptyList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">(ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(Collections.&lt;Class&lt;?&gt;&gt;emptyList(), classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">(ClassLoader classLoader, List&lt;Class&lt;?&gt;&gt; classes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(classes, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classes)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(classes, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classes, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(<span class="keyword">new</span> KryoPoolImpl(classes, classLoader));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KryoRedisSerializer</span><span class="params">(KryoPool kryoPool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kryoPool = kryoPool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KryoPool</span> </span>&#123;</span><br><span class="line">        <span class="function">Kryo <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">yield</span><span class="params">(Kryo kryo)</span></span>;</span><br><span class="line">        <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line">        List&lt;Class&lt;?&gt;&gt; getClasses();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">KryoPoolImpl</span> <span class="keyword">implements</span> <span class="title">KryoPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Queue&lt;Kryo&gt; objects = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;Kryo&gt;();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> List&lt;Class&lt;?&gt;&gt; classes;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> ClassLoader classLoader;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">KryoPoolImpl</span><span class="params">(List&lt;Class&lt;?&gt;&gt; classes, ClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.classes = classes;</span><br><span class="line">            <span class="keyword">this</span>.classLoader = classLoader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Kryo <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Kryo kryo = objects.poll();</span><br><span class="line">            <span class="keyword">if</span> (kryo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                kryo = createInstance();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> kryo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">yield</span><span class="params">(Kryo kryo)</span> </span>&#123;</span><br><span class="line">            objects.offer(kryo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Sub classes can customize the Kryo instance by overriding this method</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> create Kryo instance</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Kryo <span class="title">createInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            Kryo kryo = <span class="keyword">new</span> Kryo();</span><br><span class="line">            <span class="keyword">if</span> (classLoader != <span class="keyword">null</span>) &#123;</span><br><span class="line">                kryo.setClassLoader(classLoader);</span><br><span class="line">            &#125;</span><br><span class="line">            kryo.setReferences(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">for</span> (Class&lt;?&gt; clazz : classes) &#123;</span><br><span class="line">                kryo.register(clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> kryo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Class&lt;?&gt;&gt; getClasses() &#123;</span><br><span class="line">            <span class="keyword">return</span> classes;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">getClassLoader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> classLoader;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T in) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Kryo kryo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            Output output = <span class="keyword">new</span> Output(baos);</span><br><span class="line">            kryo = kryoPool.get();</span><br><span class="line">            kryo.writeClassAndObject(output, in);</span><br><span class="line">            output.close();</span><br><span class="line">            <span class="keyword">return</span> baos.toByteArray();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"对象序列化失败!"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kryo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                kryoPool.yield(kryo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        Kryo kryo = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            kryo = kryoPool.get();</span><br><span class="line">            <span class="keyword">return</span> (T) kryo.readClassAndObject(<span class="keyword">new</span> Input(<span class="keyword">new</span> ByteArrayInputStream(bytes)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e <span class="keyword">instanceof</span> RuntimeException) &#123;</span><br><span class="line">                <span class="keyword">throw</span> (RuntimeException) e;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"对象反序列化失败!"</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (kryo != <span class="keyword">null</span>) &#123;</span><br><span class="line">                kryoPool.yield(kryo);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义redisConfig文件替换默认的jdk序列化机制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span><span class="comment">//开启缓存</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自由根据场景选择</span></span><br><span class="line">    <span class="meta">@Bean</span>(value = <span class="string">"redisTemplate"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">//（默认使用JDK的序列化方式）</span></span><br><span class="line">        template.setValueSerializer(<span class="keyword">new</span> KryoRedisSerializer&lt;&gt;());</span><br><span class="line">        <span class="comment">//使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StringRedisTemplate <span class="title">stringRedisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> </span>&#123;</span><br><span class="line">        StringRedisTemplate stringRedisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        stringRedisTemplate.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//启动redis事务</span></span><br><span class="line">        stringRedisTemplate.setEnableTransactionSupport(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分布式锁设计"><a href="#分布式锁设计" class="headerlink" title="分布式锁设计"></a>分布式锁设计</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">setRedis</span><span class="params">(String key,String identityId,<span class="keyword">final</span> <span class="keyword">long</span> expire)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisCallback&lt;Boolean&gt; callback = (connection) -&gt; connection.set(key.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)), identityId.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)), Expiration.milliseconds(expire), RedisStringCommands.SetOption.SET_IF_ABSENT);</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.execute(callback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"redis lock error.exception:"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过调用lua脚本实现了set if not exist的事件，当然如果需要添加重试机制，我们可以完善上面的代码，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">tryMutilock</span><span class="params">(String key, String identityId,<span class="keyword">long</span> expire, <span class="keyword">int</span> retryTimes, <span class="keyword">long</span> sleepMillis)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = setRedis(key,identityId,expire);</span><br><span class="line">        <span class="comment">// 如果获取锁失败，按照传入的重试次数进行重试</span></span><br><span class="line">        <span class="keyword">while</span> ((!result) &amp;&amp; retryTimes-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.debug(<span class="string">"lock failed, retrying lock...，available retryTimes：&#123;&#125;"</span>,retryTimes);</span><br><span class="line">                Thread.sleep(sleepMillis);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            result = setRedis(key,identityId,expire);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在业务执行完成后的finally块中执行释放锁的操作，具体方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">releaseLock</span><span class="params">(String key,String identityId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 释放锁的时候，有可能因为持锁之后方法执行时间大于锁的有效期，此时有可能已经被另外一个线程持有锁，所以不能直接删除</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            RedisCallback&lt;Boolean&gt; callback = (connection) -&gt; connection.eval(UNLOCK_LUA.getBytes(), ReturnType.BOOLEAN, <span class="number">1</span>, key.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)), identityId.getBytes(Charset.forName(<span class="string">"UTF-8"</span>)));</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.execute(callback);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"release lock occured an exception,exception:"</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在代码中的identity字段用于身份识别，防止A用户持有的锁被B用户释放，我们可以用UUID生成该身份标识，这样完美解决了上面说的jedis锁被恶意释放的问题。</p><h5 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h5><p>我们在创建锁的同时还需要设计好锁失效时间，若设计的redis失效时间小于业务处理的时间，这时业务A仍未处理完该数据但锁已被释放，业务B进来会获取到该锁，这样违背了同步的原则，会导致业务数据混乱，甚至代码报错。</p><h3 id="基于redisson的分布式锁"><a href="#基于redisson的分布式锁" class="headerlink" title="基于redisson的分布式锁"></a>基于redisson的分布式锁</h3><h4 id="redisson简介"><a href="#redisson简介" class="headerlink" title="redisson简介"></a>redisson简介</h4><p>Redisson采用了基于NIO的Netty框架，不仅能作为Redis底层驱动客户端，具备提供对Redis各种形式的连接功能，同样包含同步、异步、流、pipline、lua脚本连接处理redis数据。<br>Redisson还实现了<a href="http://www.redis.cn/topics/distlock.html" target="_blank" rel="noopener">Redis文档</a>中提到像分布式锁Lock这样的更高阶应用场景。事实上Redisson并没有不止步于此，在分布式锁的基础上还提供了联锁（MultiLock），读写锁（ReadWriteLock），公平锁（Fair Lock），红锁（RedLock），信号量（Semaphore），可过期性信号量（PermitExpirableSemaphore）和闭锁（CountDownLatch）这些实际当中对多线程高并发应用至关重要的基本部件，这里主要redisson分布式锁的设计展开讨论。</p><p>Redisson目前支持Redis 2.8以上版本，支持Java1.6+以上版本 当前时间:2020/6/16</p><h4 id="redisson加锁流程图"><a href="#redisson加锁流程图" class="headerlink" title="redisson加锁流程图"></a>redisson加锁流程图</h4><p>我用pd大致描绘了一下redisson的加锁机制：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/4.png" alt="result"></p><p>可以看见，redisson相比与lettuce较好了一点在于，它有一个类似于看门狗的轮询机制，它的作用是在Redisson实例被关闭前，不断的延长锁的有效期。默认情况下，看门狗的检查锁的超时时间是30秒钟，也可以通过修改<a href="https://github.com/redisson/redisson/wiki/2.-%E9%85%8D%E7%BD%AE%E6%96%B9%E6%B3%95#lockwatchdogtimeout%E7%9B%91%E6%8E%A7%E9%94%81%E7%9A%84%E7%9C%8B%E9%97%A8%E7%8B%97%E8%B6%85%E6%97%B6%E5%8D%95%E4%BD%8D%E6%AF%AB%E7%A7%92" target="_blank" rel="noopener">Config.lockWatchdogTimeout</a>来另行指定。<br>[注]：<red>watchdog的默认超时时间为30000毫秒，且只适用于分布式锁的加锁请求中未明确使用leaseTimeout参数的情况。watchdog有点影响性能，如果能明确业务处理时间，最好指定缓存的失效时间</red></p><h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><p>首先添加redisson的jar包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.redisson&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;redisson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;最新版本&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>Redisson的分布式锁设计是可重入式锁RLock，它实现了<code>java.util.concurrent.locks.Lock</code>接口，一般性常见的使用方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redisson.getLock(<span class="string">"anyLock"</span>);</span><br><span class="line">lock.lock();</span><br></pre></td></tr></table></figure><p>这里不设置锁的超时时间，会启动看门狗每隔10秒监测redisson实例，防止业务逻辑未处理完锁被主动释放。<br>然而一般我们推荐设置过期时间，通过leaseTime参数指定加锁时间，尽量减少因为看门狗的轮询执行而影响业务效率，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加锁以后10秒钟自动解锁</span></span><br><span class="line"><span class="comment">// 无需调用unlock方法手动解锁</span></span><br><span class="line">lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尝试加锁，最多等待100秒，上锁以后10秒自动解锁</span></span><br><span class="line"><span class="keyword">boolean</span> res = lock.tryLock(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line"><span class="keyword">if</span> (res) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     ...</span><br><span class="line">   &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">       lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>redisson和lettuce一样，也支持异步的加锁方式，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RLock lock = redisson.getLock(<span class="string">"anyLock"</span>);</span><br><span class="line">lock.lockAsync();</span><br><span class="line">lock.lockAsync(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">Future&lt;Boolean&gt; res = lock.tryLockAsync(<span class="number">100</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><p>redisson同样不会存在jedis那样的恶意释放锁的情况，如果进程A创建了该锁，B去释放锁时会抛出<code>IllegalMonitorStateException</code>。如果需要其他进程也能释放锁，那么可以考虑采用<a href="https://github.com/redisson/redisson/wiki/8.-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E5%92%8C%E5%90%8C%E6%AD%A5%E5%99%A8#86-%E4%BF%A1%E5%8F%B7%E9%87%8Fsemaphore" target="_blank" rel="noopener">分布式信号量Semaphore对象</a>。</p><h4 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h4><p>个人认为如果项目中以redis作为公共组件，并且集成了redisson作为java客户端的话，推荐使用redisson实现分布式加锁，实际生产环境中应该尽量使用主流的可靠的类库，在我编写本文的时候，redisson的star数已经到13.4K了，相关性的问题都能得到即时的反馈。特别在分布式锁的设计上，redisson考虑比较全面，避免了开发者悲催的重复造轮子,开发者也可以根据项目中的应用场景选用redisson不同的加锁实现。</p><h2 id="zookeeper实现"><a href="#zookeeper实现" class="headerlink" title="zookeeper实现"></a>zookeeper实现</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>zookeeper(又名动物园园长)是一个分布式的高性能协调服务，zookeeper本身支持集群部署以选举的方式选择master节点，保证服务的高可用性。</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/zkservice.jpg" alt="result"></p><p>同时它支持文件配置的统一管理、分布式锁、集群管理以及发布与订阅功能等等。我们都知道ZooKeeper提供的名称空间与标准文件系统的名称空间非常相似。名称是由斜杠（/）分隔的一系列路径元素。ZooKeeper命名空间中的每个节点都由路径标识，它的层次命名空间：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/zknamespace.jpg" alt="result"></p><p>与标准文件系统不同，ZooKeeper命名空间中的每个节点都可以具有与其关联的数据以及子节点。就像拥有一个文件系统一样，该文件系统也允许文件成为目录。（ZooKeeper旨在存储协调数据：状态信息，配置，位置信息等，因此每个节点上存储的数据通常很小，在字节到千字节范围内。）我们使用术语znode来明确表示在谈论ZooKeeper数据节点，它包含以下几种节点创建类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PERSISTENT              持久化节点</span><br><span class="line">PERSISTENT_SEQUENTIAL   顺序自动编号持久化节点，这种节点会根据当前已存在的节点数自动加 1</span><br><span class="line">EPHEMERAL   临时节点，   客户端session超时这类节点就会被自动删除</span><br><span class="line">EPHEMERAL_SEQUENTIAL    临时自动编号节点</span><br></pre></td></tr></table></figure><p>在这里，我们可以利用zookeeper节点的临时有序的特性实现分布式锁,即<code>EPHEMERAL_SEQUENTIAL</code>节点类型。</p><h3 id="流程设计"><a href="#流程设计" class="headerlink" title="流程设计"></a>流程设计</h3><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/lock/zklock.png" alt="result"></p><h3 id="代码设计-1"><a href="#代码设计-1" class="headerlink" title="代码设计"></a>代码设计</h3><p>添加pom依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.101tec&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;zkclient&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;最新版本&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>前提你有zookeeper的环境，无论本地或者远程测试。如何安装和启动这里不赘述了，启动服务后，我们可以获取一个ZkClient对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ZkClient <span class="title">getZkClient</span><span class="params">(ZkSerializer zkSerializer)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ZkClient(IP_PORT,SESSION_TIMEOUT,CONNECTIOIN_TIMEOUT,zkSerializer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每一个服务获取锁的时候，需要在预定义的根目录创建一个临时有序的节点，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> isDone = <span class="keyword">false</span>;</span><br><span class="line"><span class="keyword">int</span> retryCount = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 网络问题重试</span></span><br><span class="line"><span class="keyword">while</span> (!isDone) &#123;</span><br><span class="line">    isDone = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 创建临时有序子节点</span></span><br><span class="line">            finalCurrentNodePath = zkClient.createEphemeralSequential(rootName/$&#123;子节点前缀&#125;, <span class="string">"testLock"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZkNoNodeException e) &#123;</span><br><span class="line">            <span class="comment">// 如果有父节点不存在，那么先创建父节点,父节点路径即为:rootName</span></span><br><span class="line">            myZkClient.createPersistent(rootName, <span class="keyword">true</span>);</span><br><span class="line">            <span class="comment">// 再次创建临时有序子节点</span></span><br><span class="line">            finalCurrentNodePath = zkClient.createEphemeralSequential(rootName/$&#123;子节点前缀&#125;, <span class="string">"testLock"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ZkNodeExistsException e) &#123;</span><br><span class="line">            <span class="comment">// 由于网络闪断？？</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//TODO 判断当前节点是否为最小节点 true-&gt;加锁成功</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZkNoNodeException e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (retryCount++ &lt; $&#123;最大重试次数&#125;) &#123;</span><br><span class="line">            isDone = <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当前拿到的finalCurrentNodePath结果是<red>${rootName}/${子节点前缀}0000000001</red>,后面的一串数字即为有序的临时节点号，当下次有某个服务过来抢占该rootName的锁时，它创建的临时结点为：<red>${rootName}/${子节点前缀}0000000002</red>。这时候我们需要判断当前服务拿到的节点号的序列是否为最小序列，所以我们需要把rootName下所有子节点排序，我们可以这样做：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">getSortedChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        List&lt;String&gt; children = zkClient.getChildren(rootName);</span><br><span class="line">        children.sort(Comparator.comparing(String::valueOf));</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ZkNoNodeException e) &#123;</span><br><span class="line">        <span class="comment">//没有父节点时，创建父节点</span></span><br><span class="line">        myZkClient.createPersistent(rootName, <span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//递归调用</span></span><br><span class="line">        <span class="keyword">return</span> getSortedChildren();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们拿着排序后的子节点和当前节点比对，如果当前节点是最小的节点则获取锁成功，否则需要监听比它次小的节点，伪代码实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前客户端对应的节点 所在集合中的位置</span></span><br><span class="line"><span class="keyword">int</span> ourIndex = children.indexOf($&#123;当前客户端对应的节点序号&#125;);</span><br><span class="line"><span class="comment">// 如果集合中不存在该节点，那么抛出异常</span></span><br><span class="line"><span class="keyword">if</span> (ourIndex &lt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> ZkNoNodeException(<span class="string">"此节点不存在: "</span> + $&#123;当前客户端对应的节点序号&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 当前客户端对应的节点  排在集合开头时，表示该此客户端获得锁</span></span><br><span class="line"><span class="keyword">boolean</span> isLock = ourIndex == <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 当前客户端 应该监视的节点的名字</span></span><br><span class="line"><span class="keyword">if</span> (isLock) &#123;</span><br><span class="line">    <span class="comment">//加锁成功 执行业务代码</span></span><br><span class="line">    doBusiness()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有获取到锁，我们可以通过一个jdk自带的闭锁来实现等待前置锁释放</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 倒计时锁</span></span><br><span class="line"><span class="keyword">final</span> CountDownLatch latch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 创建监听器  阻塞一直等到监听节点消失 即 计数器值为0</span></span><br><span class="line"><span class="keyword">final</span> IZkDataListener previousListener = <span class="keyword">new</span> IZkDataListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataDeleted</span><span class="params">(String dataPath)</span> </span>&#123;</span><br><span class="line">        latch.countDown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleDataChange</span><span class="params">(String dataPath, Object data)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// ignore</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>获取前置子节点全路径，并开启监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前客户端 应该监视的节点的名字</span></span><br><span class="line">String watchName = shouldGetTheLock ? <span class="keyword">null</span> : children.get(ourIndex - <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 组装当前客户端 应该监视的节点的路径</span></span><br><span class="line">String realPath = $&#123;rootName&#125;.concat(<span class="string">"/"</span>).concat(watchName);</span><br><span class="line"><span class="comment">// 如果节点不存在会出现异常（需要使用重写了ZkClient类的watchForData方法的客户端）</span></span><br><span class="line"><span class="comment">// 添加监听器 </span></span><br><span class="line">zkClient.subscribeDataChanges(realPath, previousListener);</span><br></pre></td></tr></table></figure><p>当然这样进程会一直阻塞等待获取zk锁，我们可以优化代码，添加抢锁的最大等待时间</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 超时 自动解除闭锁状态</span></span><br><span class="line">latch.await($&#123;等待时长&#125;, TimeUnit.MICROSECONDS);</span><br></pre></td></tr></table></figure><p>最终在finally块中我们需要取消监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消监听</span></span><br><span class="line">zkClient.unsubscribeDataChanges(realPath, previousListener);</span><br></pre></td></tr></table></figure><p>获取锁的服务在业务执行完成后调用 <code>zkClient.delete(${当前服务节点全路径});</code>,就释放了锁，这时下一个最小节点的服务就能抢占到资源。当然因为是临时的节点的原因，在zkclient连接关闭后，对应zookeeper上的节点也会删除，所以不用担心节点被持久化，服务一直处于等待状态。<br>这样一个基于zookeeper的分布式锁就已经实现了，但美中不足的是并没有实现可重入、也无法防止恶意解锁。</p><h3 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h3><h4 id="恶意解锁问题思路"><a href="#恶意解锁问题思路" class="headerlink" title="恶意解锁问题思路"></a>恶意解锁问题思路</h4><p>为了解决只有持有锁的对象才能释放锁的问题，我们可以在服务内部新建一个<code>ConcurrentMap</code>对象用于保存zk客户端和节点信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> ConcurrentMap&lt;ZkClient, NodeInfo&gt; zkClientInfo = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;(<span class="number">8</span>);</span><br></pre></td></tr></table></figure><p>在每次取得锁的同时，保存服务与节点的对应关系，在释放锁时候加个验证，如果本地缓存并没有找到关联信息，则无法释放，伪代码可以这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">NodeInfo nodeInfo = zkClientInfo.get($&#123;客户端信息&#125;);</span><br><span class="line"><span class="keyword">if</span> (nodeInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">"你不是锁: "</span> + $&#123;rootName&#125; + <span class="string">"的拥有者,无法执行此操作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//正常释放锁</span></span><br><span class="line">    releaseLock($&#123;节点全路径&#125;);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    zkClientInfo.remove($&#123;客户端信息&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现重入锁思路"><a href="#实现重入锁思路" class="headerlink" title="实现重入锁思路"></a>实现重入锁思路</h4><p>为了实现锁的可重入，我们可以在定义NodeInfo的时候，添加一个计数器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeInfo</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * NodeInfo类的构造器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> nodePath</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">NodeInfo</span><span class="params">(String nodePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.nodePath = nodePath;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对应的节点路径</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> String nodePath;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *该客户端内,使用该锁资源的线程数 计数器 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">final</span> AtomicInteger lockCount = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每次获取锁的时候，先从zkClientInfo对象中找，若该服务已获取到zk锁，则使计数器+1,获取锁逻辑返回true 并执行业务逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">NodeInfo nodeInfo = zkClientInfo.get($&#123;客户端信息&#125;);</span><br><span class="line"><span class="keyword">if</span> (nodeInfo != <span class="keyword">null</span>) &#123; <span class="comment">// 如果此线程已经获取了锁</span></span><br><span class="line">    System.out.println($&#123;客户端信息&#125; + <span class="string">"已经获得了该锁了！"</span>);</span><br><span class="line">    nodeInfo.lockCount.incrementAndGet();   <span class="comment">//计数器加一</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在释放锁的时候，也是需要注意:仅当<code>lockCount.decrementAndGet</code>=0时，才会正常释放锁,所以需要在之前释放锁的逻辑上稍加修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">NodeInfo nodeInfo = zkClientInfo.get($&#123;客户端信息&#125;);</span><br><span class="line"><span class="keyword">if</span> (nodeInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">"你不是锁: "</span> + $&#123;rootName&#125; + <span class="string">"的拥有者,无法执行此操作！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计数器-1</span></span><br><span class="line"><span class="keyword">int</span> count = nodeInfo.lockCount.decrementAndGet();</span><br><span class="line"><span class="comment">// 当还有其他线程在使用锁时，那么还不能释放</span></span><br><span class="line"><span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123; </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException(<span class="string">"锁计数器为负数: "</span> + $&#123;rootName&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//只有当计数器为0时 正常释放锁</span></span><br><span class="line">    releaseLock($&#123;节点全路径&#125;);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    zkClientInfo.remove($&#123;客户端信息&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><p>基于zookeeper的实现比较复杂，考虑的东西也比较多，如果不是特别熟悉zk的架构，最好还是用redis这种封装好的api应用到代码开发中去。因为年前做通信网关时用到zookeeper这个组件，当时主要用来做服务的注册监听与路由转发，顺带考虑了用它来实现分布式加锁的方案,期间参考了官网和一些博客(虽然最后还是用的redis(～￣▽￣)～)，但不妨碍它在分布式集群的中的广泛应用（比如kafka啦，每次装kafka都要先装zookeeper 蛋疼哦…）,可能以后会有场景用到吧！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>1、<a href="https://lettuce.io/core/release/reference/index.html" target="_blank" rel="noopener">lettuce Guide</a><br>2、<a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95" target="_blank" rel="noopener">redisson Guide</a><br>3、<a href="https://zookeeper.apache.org/doc/current/index.html" target="_blank" rel="noopener">zookeeper Guide</a></p>]]></content>
      
      
      <categories>
          
          <category> distributed system </category>
          
          <category> lock </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> distributed-lock </tag>
            
            <tag> redis </tag>
            
            <tag> zookeeper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cxf动态构建webservice</title>
      <link href="/cxf%E5%8A%A8%E6%80%81%E6%9E%84%E5%BB%BAwebservice.html"/>
      <url>/cxf%E5%8A%A8%E6%80%81%E6%9E%84%E5%BB%BAwebservice.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>平台需要提供一个可配置的webservice接口，用于其他服务的远程调用，并且可以依照项目不同的业务意义自定义webservice接口的上下文。本文主要描述如何通过cxf动态构建webservice接口。<br>维基百科上基于web服务的体系结构流程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、服务提供者将WSDL文件发送到UDDI。</span><br><span class="line">2、服务请求者联系UDDI以找出谁是其所需数据的提供者，然后使用SOAP协议联系服务提供者。</span><br><span class="line">3、服务提供者使用SOAP协议验证服务请求并以XML文件发送结构化数据。</span><br><span class="line">4、服务请求者将使用XSD文件再次验证该XML文件。</span><br></pre></td></tr></table></figure><p>大概的流程图：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/1.png" alt="result"></p><a id="more"></a><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h3 id="webservice"><a href="#webservice" class="headerlink" title="webservice"></a>webservice</h3><p>Web Service也叫XML Web Service WebService。它是一种构建应用程序的普遍模型,可以在任何支持网络通信的操作系统中实施运行;它是一种新的web应用程序分支，是自包含、自描述、模块化的应用，可以发布、定位、通过web调用。WebService是一个应用组件,它逻辑性的为其他应用程序提供数据与服务.各应用程序通过网络协议和规定的一些标准数据格式（Http，XML，Soap)来访问WebService,通过WebService内部执行得到所需结果.WebService可以执行从简单的请求到复杂商务处理的任何功能。一旦部署以后，其他WebService应用程序可以发现并调用它部署的服务。</p><p>WSDL简介：<br><b>1、WSDL 文档的组成部分</b><br>　　<red>[portType]</red>：web service 执行的操作<br>　　<red>[message]</red>：web service 使用的消息<br>　　<red>[types]</red>：web service 使用的数据类型<br>　　<red>[binding]</red>：web service 使用的通信协议<br><b>2、WSDL元素介绍</b></p><p>WSDL规范为了不会产生歧义，定义了特有名词来表述功能与服务。<br>    &emsp;&emsp;<red>[portType]</red>：[portType]元素是最重要的 WSDL 元素。它可描述一个 Web Service、可被执行的操作，以及相关的消息。 可以把 [portType]元素比作传统编程语言中的一个函数库（或一个模块、或一个类）。<br>　　<red>[operation]</red>：[operation]是对服务中所支持的操作的抽象描述，一般单个Operation描述了一个访问入口的请求/响应消息对。<br>　　<red>[message]</red>：[message]元素定义一个操作的数据元素。 每个消息均由一个或多个部件组成。可以把这些部件比作传统编程语言中一个函数调用的参数。 通信消息的数据结构的抽象类型化定义。使用Types所定义的类型来定义整个消息的数据结构。<br>　　<red>[types]</red>： [types]元素定义WebService 使用的数据类型。为了最大程度的平台中立性，WSDL 使用 XML Schema 语法来定义数据类型。<br>　　<red>[binding]</red>： [binding]元素为每个端口定义消息格式和协议细节。</p><h3 id="cxf"><a href="#cxf" class="headerlink" title="cxf"></a>cxf</h3><p>apache cxf 用户指南 <a href="http://cxf.apache.org/docs/index.html" target="_blank" rel="noopener">http://cxf.apache.org/docs/index.html</a></p><p>Apache CXF™是一个开放源代码服务框架。可以通过编程API（例如JAX-WS和JAX-RS）来构建和开发服务，这些服务例如SOAP，XML / HTTP，RESTful HTTP或CORBA，并且可以通过各种传输方式（例如HTTP，JMS或JBI）工作。</p><p><b>CXF包含广泛的功能集，但主要集中在以下领域:</b><br>    <red>Web服务标准支持</red>： CXF支持各种Web服务标准，包括SOAP，WS-I基本配置文件，WSDL，WS-Addressing，WS-Policy，WS-ReliableMessaging，WS-Security，WS-SecurityPolicy，WS-SecureConverstation和WS-Trust（部分）。<br>    <red>前端模板</red>： CXF支持多种“前端”编程模型。<br>CXF实现了JAX-WS API。与参考实现相比，CXF JAX-WS支持包括对该标准的一些扩展，使其大大易于使用：它会自动为请求和响应bean类生成代码，对于简单情况不需要WSDL。<br>它还包括一个“简单前端”，该前端允许创建没有注释的客户端和端点。CXF支持使用WSDL进行合同优先开发和从Java开始的代码优先开发。<br><b>对于REST，CXF还支持JAX-RS</b>:<br>    <red>易用性</red>： CXF旨在直观易用。有简单的API可以快速构建代码优先服务，Maven插件使工具集成变得容易，JAX-WS API支持，Spring 2.x XML支持使配置变得简单，等等。<br>    <red>二进制和旧版协议支持</red>： CXF旨在提供一种可插拔的体系结构，该体系结构不仅支持XML，而且还支持非XML类型的绑定（例如JSON和CORBA）以及任何类型的传输。</p><h4 id="为什么使用cxf构建webService"><a href="#为什么使用cxf构建webService" class="headerlink" title="为什么使用cxf构建webService"></a>为什么使用cxf构建webService</h4><p><b>CXF实现了JAX-WS API，使构建Web服务变得容易。JAX-WS包含许多不同的领域</b>：<br>    1、从Java类生成WSDL，并从WSDL生成Java类(<small>自底向上、自顶向下的开发模型</small>)<br>    2、提供程序API，使您可以创建简单的消息接收服务器端点<br>    3、调度API，使您可以将原始XML消息发送到服务器端点<br>除此之外CXF还支持各种Web服务规范，包括WS-Addressing，WS-Policy，WS-ReliableMessaging和WS-Security。<br>最重要的一点，作为Apache的顶级项目，spring是cxf的头等公民，它支持Spring2.0XML语法，使得cxf基于spring构建webService接口变得非常简单。</p><h2 id="code-view"><a href="#code-view" class="headerlink" title="code view"></a>code view</h2><p>因为该工程是作为平台jar包依赖到其他项目中去的，所以只需要新建一个maven工程就可以了。</p><h3 id="maven-jar包依赖"><a href="#maven-jar包依赖" class="headerlink" title="maven jar包依赖"></a>maven jar包依赖</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.cxf&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;cxf-spring-boot-starter-jaxws&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.3.6&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p><red>[tip]</red>这里选用的是2020年3月30日发布的最新3.3.6版本,之前验证的时候，本地springBoot version 是<small><red>2.3.0.RELEASE</red></small>，运行各种报错，然后才发现最新的cxf springboot<small><red>2.3.0.RELEASE</red></small> 还未适配..<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/9.png" alt="图片地址"></p><p>幸好平台的所有项目springboot的版本号都不高,只要是2.1.13以下的服务集成该jar都能正常运行。</p><h3 id="webserver接口"><a href="#webserver接口" class="headerlink" title="webserver接口"></a>webserver接口</h3><p>定义WebService的订阅接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * KpiService</span></span><br><span class="line"><span class="comment"> * webService 属性：</span></span><br><span class="line"><span class="comment"> * [name]：此属性的值包含XML Web Service的名称。在默认情况下，该值是实现XML Web Service的类的名称，wsdl:portType 的名称。缺省值为 Java 类的简单名称 + Service。</span></span><br><span class="line"><span class="comment"> * [targetNamespace]：默认的值为 "http://&#123;packageName&#125;/" ，可以通过此变量指定一个自定义的上下文。</span></span><br><span class="line"><span class="comment"> * [serviceName]：对外发布的服务名，指定Web Service的服务名称：wsdl:service。缺省值为 Java 类的简单名称 + Service。</span></span><br><span class="line"><span class="comment"> * [endpointInterface]：接口的包路径</span></span><br><span class="line"><span class="comment"> * [portName]：wsdl:portName的值。缺省值为WebService.name+Port</span></span><br><span class="line"><span class="comment"> * [wsdlLocation]：指定用于定义 Web Service 的 WSDL 文档的 Web 地址</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@blame</span> xm</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebService</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CxfWebService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * webMethod 属性：</span></span><br><span class="line"><span class="comment">     * [operationName]：指定与此方法相匹配的wsdl:operation 的名称。缺省值为 Java 方法的名称。</span></span><br><span class="line"><span class="comment">     * [action]：定义此操作的行为。对于 SOAP 绑定，此值将确定 SOAPAction 头的值。缺省值为 Java 方法的名称。</span></span><br><span class="line"><span class="comment">     * [exclude]：指定是否从 Web Service 中排除该方法。缺省值为 false。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param xml文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@WebMethod</span>(operationName = <span class="string">"operationName"</span>)</span><br><span class="line">    <span class="function">String <span class="title">getValue</span><span class="params">(@WebParam(name = <span class="string">"param"</span>)</span> String param)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebService</span>(name = <span class="string">"test"</span>, targetNamespace = <span class="string">"test"</span>, endpointInterface = <span class="string">"com.sillybilly.test.cxf.service.CxfWebService"</span>, serviceName = <span class="string">"CxfWebService"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CxfWebServiceImpl</span> <span class="keyword">implements</span> <span class="title">CxfWebService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">(String param)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//todo parse xml</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world"</span>;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义接口配置"><a href="#定义接口配置" class="headerlink" title="定义接口配置"></a>定义接口配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.sillybilly.test.cxf"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CxfWebServiceConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;common.sysName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String sysName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;common.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String serviceName;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;common.targetNamespace&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String targetNamespace;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;common.operationName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String operationName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = Bus.DEFAULT_BUS_ID)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> SpringBus <span class="title">springBus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SpringBus springBus = <span class="keyword">new</span> SpringBus();</span><br><span class="line">        <span class="keyword">return</span> springBus;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Endpoint <span class="title">endpoint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        EndpointImpl endpoint = <span class="keyword">new</span> EndpointImpl(springBus(), newServiceInstance());</span><br><span class="line">        endpoint.publish(<span class="string">"/common"</span>);</span><br><span class="line">        <span class="keyword">return</span> endpoint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 为了防止与springmvc的DispatcherServlet冲突 需要重定义bean名称</span></span><br><span class="line"><span class="comment">     * 且只能为cxfServletRegistration</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"cxfServletRegistration"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">dispatcherServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//注册servlet 拦截/ws 开头的请求 不设置 默认为：/services/*</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> CXFServlet(), <span class="string">"/"</span> + sysName + <span class="string">"/services/*"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CxfWebService <span class="title">newServiceInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//修改webservice注解</span></span><br><span class="line">            <span class="comment">//name、endpointInterface、targetNamespace</span></span><br><span class="line">            Map&lt;String, Object&gt; webServiceConfig = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">            webServiceConfig.put(<span class="string">"name"</span>, serviceName);</span><br><span class="line">            webServiceConfig.put(<span class="string">"targetNamespace"</span>, targetNamespace);</span><br><span class="line">            WebService webService = CxfWebService<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">WebService</span>.<span class="title">class</span>)</span>;</span><br><span class="line">            changeAnnotationValue(webService, webServiceConfig);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//修改method注解</span></span><br><span class="line">            Map&lt;String, Object&gt; methodConfig = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">            methodConfig.put(<span class="string">"operationName"</span>, operationName);</span><br><span class="line">            Method method = CxfWebService.class.getMethod("getValue", String.class);</span><br><span class="line">            WebMethod webMethod = method.getAnnotation(WebMethod<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            changeAnnotationValue(webMethod, methodConfig);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        CxfWebService kpiService = <span class="keyword">new</span> CxfWebServiceImpl();</span><br><span class="line">        <span class="keyword">return</span> kpiService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">changeAnnotationValue</span><span class="params">(Annotation annotation, Map&lt;String, Object&gt; newValues)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"加载注解 [&#123;&#125;]"</span>,annotation.annotationType().getCanonicalName());</span><br><span class="line">        InvocationHandler handler = Proxy.getInvocationHandler(annotation);</span><br><span class="line">        Field f;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            f = handler.getClass().getDeclaredField(<span class="string">"memberValues"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Map&lt;String, Object&gt; memberValues;</span><br><span class="line">        memberValues = (Map&lt;String, Object&gt;) f.get(handler);</span><br><span class="line">        <span class="keyword">for</span> (String key : newValues.keySet()) &#123;</span><br><span class="line">            Object newValue = newValues.get(key);</span><br><span class="line">            memberValues.put(key, newValue);</span><br><span class="line">        &#125;</span><br><span class="line">        memberValues.entrySet().forEach(c-&gt;log.info(<span class="string">"[&#123;&#125;]-&gt;[&#123;&#125;]"</span>,c.getKey(),c.getValue()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终WSDL 接口访问地址应该是 ip:port/{sysName}/services/common?wsdl ,这样一个webService的上下文就已经定义好了。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>新建一个SpringBoot工程，引入该jar包，配置相关yaml文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">common:</span><br><span class="line">  name: testservice</span><br><span class="line">  targetNamespace: http:<span class="comment">//pulish.address/test</span></span><br><span class="line">  operationName: testInterface</span><br><span class="line">  sysName : testSys</span><br></pre></td></tr></table></figure><p>运行之后，控制台打印：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/2.png" alt="result"><br>访问localhost:8080/testSys/services/common?wsdl<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/3.png" alt="result"></p><h2 id="通过现有WSDL自顶向下生成类框架"><a href="#通过现有WSDL自顶向下生成类框架" class="headerlink" title="通过现有WSDL自顶向下生成类框架"></a>通过现有WSDL自顶向下生成类框架</h2><p>为了测试接口的可用性，我们需要编写客户端代码测试。为了方便快捷，我这里使用idea自带的webService代码生成器。因为服务端是用cxf构建的，所以这里我们需要下载cxf,下载地址:<a href="http://cxf.apache.org/download.html" target="_blank" rel="noopener">http://cxf.apache.org/download.html</a> ，然后在idea中引入，如图：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/4.png" alt="result"><br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/5.png" alt="result"><br>输入webservice接口地址：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/6.png" alt="result"><br>点击ok后，最终生成的java文件<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/7.png" alt="result"></p><p>找到Client主类，就能拿到服务端返回的结果了，运行效果图：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/webservice/8.png" alt="result"></p><h2 id="LAST-BUT-NOT-LEAST"><a href="#LAST-BUT-NOT-LEAST" class="headerlink" title="LAST BUT NOT LEAST"></a>LAST BUT NOT LEAST</h2><p>在webService接口中的数据传输对象都是xml格式的，所以我们需要将xml转换为我们日常使用的java业务对象，一般性的我们使用<small>JAXB</small>，类似的实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * java对象转换为xml文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj  java对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> load java对象.Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> xml文件的String</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JAXBException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">beanToXml</span><span class="params">(Object obj, Class&lt;?&gt; load)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        JAXBContext context = JAXBContext.newInstance(load);</span><br><span class="line">        Marshaller marshaller = context.createMarshaller();</span><br><span class="line">        marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, <span class="keyword">false</span>);</span><br><span class="line">        StringWriter writer = <span class="keyword">new</span> StringWriter();</span><br><span class="line">        marshaller.marshal(obj, writer);</span><br><span class="line">        <span class="keyword">return</span> writer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * xml文件配置转换为对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param xml</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> load  java对象.Class</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> java对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> JAXBException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">xmlToBean</span><span class="params">(String param, Class&lt;T&gt; load)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">        JAXBContext context = JAXBContext.newInstance(load);</span><br><span class="line">        Unmarshaller unmarshaller = context.createUnmarshaller();</span><br><span class="line">        <span class="keyword">return</span> (T) unmarshaller.unmarshal(<span class="keyword">new</span> StringReader(param));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后不出意外的在解析xml文件时发生异常:<red>javax.xml.bind.UnmarshalException: 意外的元素 (uri:””, local:””) </red></p><p>存在的解决方法是:将待解析的java实体类上加上@XmlRootElement(namespace=”${targetNamespace}”)注解 这里的namespace是webService上下文的targetNamespace变量。<br>当然也可以和上面的实现一样，根据配置动态加载：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改XmlRootElement注解</span></span><br><span class="line">Map&lt;String,Object&gt; xmlConfig = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">xmlConfig.put(<span class="string">"namespace"</span>,targetNamespace);</span><br><span class="line">XmlRootElement xmlRootElement = Info<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">XmlRootElement</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="comment">//changeAnnotationValue 在CxfWebServiceConfig配置类已经定义</span></span><br><span class="line">changeAnnotationValue(xmlRootElement,xmlConfig);</span><br></pre></td></tr></table></figure><p>至此，webservice接口定下来之后，就可以愉快的实现业务逻辑了。</p>]]></content>
      
      
      <categories>
          
          <category> webservice </category>
          
          <category> cxf </category>
          
          <category> RPC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cxf </tag>
            
            <tag> webservice </tag>
            
            <tag> xml/http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch-high-level-client</title>
      <link href="/elasticsearch-high-level-client.html"/>
      <url>/elasticsearch-high-level-client.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>项目中需要对新闻发布内容做全文检索，基于原本的mysql数据库已经无法满足现有的需求了，所以需要用到es+ik分词器作为技术栈，经过调研发现适用于es的java客户端主流的有三种：<small><red>Java High Level REST Client</red></small>、<small><red>JestClient</red></small>、<small><red>spring-data-elasticsearch</red></small>。（当然还有es版本弃子：Java Low Level REST Client，底层是基于transport完成数据访问，而es7.0之后不在支持transport故不在考虑范围内）。<br>去<a href="https://github.com/spring-projects/spring-data-elasticsearch" target="_blank" rel="noopener">同性交友网站</a>看了下spring-data-es，发现它本身也是推荐JestClient，再然后才是自家的java客户端。<br>对比JestClient和Java-High-Level-REST-Client：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JestClient:底层基于HttpClient+GSON提供集群访问与数据映射,在ES操作易用性方面与Java High Level REST Client部分伯仲，但是其多版本兼容性比后者强很多。虽然使用有龟速之称的GSON切不能替换，但是其性能应该能满足大部分业务场景。</span><br><span class="line">Java-High-Level-REST:很多设计也借鉴了Jest,虽然有严格的版本控制，但有默认的调优参数，其性能会更加优秀。</span><br></pre></td></tr></table></figure><p>在综合考虑之下。选用了Java High Level REST作为java client,毕竟es自己的客户端，更新迭代比jestClient快，而且社区活跃，文档齐全。<a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/index.html" target="_blank" rel="noopener">api文档</a></p><a id="more"></a><h2 id="es安装"><a href="#es安装" class="headerlink" title="es安装"></a>es安装</h2><p>es下载地址: <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a><br>ik分词器下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases" target="_blank" rel="noopener">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>es解压后运行/bin目录下的elasticsearch.bat即可。<br>在es plugins下创建ik文件夹，将下载的ik分词器解压到该目录，运行es,效果图：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/2.png" alt="es启动"></p><p>在浏览器输入localhost:9200即可查看es的版本信息：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/1.png" alt="es运行"><br>通过 “192.168.66.128:9200/_cat/indices?v” 可以查看es索引情况<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/5.png" alt="result"><br>通过 “localhost:9200/_search” 查看 es 中的所有数据 ，当然也可以指定es索引(localhost:9200/{index}/_search),如果是多个索引以逗号分开{index1,index2}如图：<br><img src = "https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/6.png" height="400" width="300" /></p><p>kibana下载地址：<a href="https://www.elastic.co/cn/downloads/kibana" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/kibana</a><br>默认解压后即可运行：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/3.png" alt="result"><br>通过kibana客户端访问：localhost:5601 测试分词结果：</p><p>默认的分词（standard）：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/8.png" alt="result"><br>ik_max_word:<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/7.png" alt="result"><br>ik_smart:<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/9.png" alt="result"></p><p>显然，es默认的分词器对中文非常不友好，所以推荐用ik_max_word对检索文档进行细粒度分词，再用ik_smart匹配检索。</p><h2 id="基于Java-High-Level-REST-esJava客户端使用"><a href="#基于Java-High-Level-REST-esJava客户端使用" class="headerlink" title="基于Java High Level REST esJava客户端使用"></a>基于Java High Level REST esJava客户端使用</h2><h3 id="maven-jar添加"><a href="#maven-jar添加" class="headerlink" title="maven jar添加"></a>maven jar添加</h3><p>新建Springboot项目，添加jar包：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--es java客户端--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!--es检索--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.4.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>这里的version版本需要和自己安装的es版本保持一致。</p><h3 id="pom文件"><a href="#pom文件" class="headerlink" title="pom文件"></a>pom文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch:</span><br><span class="line">  host: $&#123;ES_HOST:localhost&#125;</span><br><span class="line">  port: $&#123;ES_PORT:<span class="number">9200</span>&#125;</span><br><span class="line">  username:</span><br><span class="line">  password:</span><br></pre></td></tr></table></figure><p>定义es的ip:port，如果有账号密码也可自行添加。es集群则ip以’,’分开。</p><h3 id="java实现"><a href="#java实现" class="headerlink" title="java实现"></a>java实现</h3><h4 id="获取配置信息，创建client"><a href="#获取配置信息，创建client" class="headerlink" title="获取配置信息，创建client"></a>获取配置信息，创建client</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.username&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;elasticsearch.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(destroyMethod = <span class="string">"close"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">restClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//es集群ip以','分开</span></span><br><span class="line">        HttpHost[] httpHosts = Arrays.stream(host.split(<span class="string">","</span>)).map(m-&gt;<span class="keyword">new</span> HttpHost(m,port)).filter(Objects::nonNull).toArray(HttpHost[]::<span class="keyword">new</span>);</span><br><span class="line">        <span class="keyword">final</span> CredentialsProvider credentialsProvider = <span class="keyword">new</span> BasicCredentialsProvider();</span><br><span class="line">        credentialsProvider.setCredentials(AuthScope.ANY,</span><br><span class="line">                <span class="keyword">new</span> UsernamePasswordCredentials(userName, password));</span><br><span class="line"></span><br><span class="line">        RestClientBuilder builder = RestClient.builder(httpHosts)</span><br><span class="line">                .setHttpClientConfigCallback(httpClientBuilder -&gt; httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider));</span><br><span class="line"></span><br><span class="line">        RestHighLevelClient client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> client;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="基于es的索引api调用"><a href="#基于es的索引api调用" class="headerlink" title="基于es的索引api调用"></a>基于es的索引api调用</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsIndexService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * type:keyword不分词，text分词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createEsIndex</span><span class="params">(String index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        XContentBuilder builder = XContentFactory.jsonBuilder()</span><br><span class="line">                .startObject()</span><br><span class="line">                .field(<span class="string">"properties"</span>)</span><br><span class="line">                .startObject()</span><br><span class="line">                .field(<span class="string">"newsId"</span>).startObject().field(<span class="string">"index"</span>, <span class="string">"true"</span>).field(<span class="string">"type"</span>, <span class="string">"integer"</span>).endObject()</span><br><span class="line">                .field(<span class="string">"newsAuthor"</span>).startObject().field(<span class="string">"index"</span>, <span class="string">"true"</span>).field(<span class="string">"type"</span>, <span class="string">"text"</span>).endObject()</span><br><span class="line">                .field(<span class="string">"newsPublishTime"</span>).startObject().field(<span class="string">"index"</span>, <span class="string">"true"</span>).field(<span class="string">"type"</span>, <span class="string">"date"</span>).field(<span class="string">"format"</span>, <span class="string">"strict_date_optional_time||epoch_millis"</span>).endObject()</span><br><span class="line">                .field(<span class="string">"newsUpdateTime"</span>).startObject().field(<span class="string">"index"</span>, <span class="string">"true"</span>).field(<span class="string">"type"</span>, <span class="string">"date"</span>).field(<span class="string">"format"</span>, <span class="string">"strict_date_optional_time||epoch_millis"</span>).endObject()</span><br><span class="line">                .field(<span class="string">"clob"</span>).startObject().field(<span class="string">"index"</span>,<span class="string">"true"</span>).field(<span class="string">"type"</span>,<span class="string">"text"</span>).field(<span class="string">"analyzer"</span>,<span class="string">"ik_max_word"</span>).endObject()</span><br><span class="line">                .endObject()</span><br><span class="line">                .endObject();</span><br><span class="line">        CreateIndexRequest createIndexRequest = <span class="keyword">new</span> CreateIndexRequest(index);</span><br><span class="line">        createIndexRequest.mapping(builder);</span><br><span class="line">        client.indices().createAsync(createIndexRequest, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;CreateIndexResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(CreateIndexResponse createIndexResponse)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"EsIndexService.createIndex index:&#123;&#125; status:&#123;&#125;"</span>, index, createIndexResponse.isShardsAcknowledged());</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"EsIndexService.createIndex exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delEsIndex</span><span class="params">(String index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> acknowledged = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            DeleteIndexRequest deleteIndexRequest = <span class="keyword">new</span> DeleteIndexRequest(index);</span><br><span class="line">            <span class="comment">//设置IndicesOptions 解决不可用的索引以及如何扩展通配符表达式</span></span><br><span class="line">            deleteIndexRequest.indicesOptions(IndicesOptions.LENIENT_EXPAND_OPEN);</span><br><span class="line">            AcknowledgedResponse delete = client.indices().delete(deleteIndexRequest, RequestOptions.DEFAULT);</span><br><span class="line">            acknowledged = delete.isAcknowledged();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> acknowledged;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断索引是否存在</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isIndexExists</span><span class="params">(String index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> exists = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            GetIndexRequest getIndexRequest = <span class="keyword">new</span> GetIndexRequest(index);</span><br><span class="line">            getIndexRequest.humanReadable(<span class="keyword">true</span>);</span><br><span class="line">            exists = client.indices().exists(getIndexRequest,RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> exists;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>es的索引相当于oracle/mysql中的数据库，所以可以在配置文件中预定es index，在spring bean都实例化后，判断索引是否创建，若没有该索引则创建。很重要的一点，当我们调用GET ip:9200/mappping中字段的type为text才会进行分词，而es内置的分词器对中文并不友好，所以中文检索的字段需要添加ik_max_word（最大细度）分词。<br>for example:<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/4.png" height="450" width="300" /></p><h4 id="es文档的增删（包含批量操作）"><a href="#es文档的增删（包含批量操作）" class="headerlink" title="es文档的增删（包含批量操作）"></a>es文档的增删（包含批量操作）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsCommonService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    ObjectMapper objectMapper;</span><br><span class="line"></span><br><span class="line">    EsCommonService() &#123;</span><br><span class="line">        objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建索引 并插入数据</span></span><br><span class="line"><span class="comment">     * es7.0之前可以设置type(每个type具有相同的文档结构)</span></span><br><span class="line"><span class="comment">     * es6.0后type废除</span></span><br><span class="line"><span class="comment">     * es7.0后 每个索引对应一个默认的Type:"_doc"</span></span><br><span class="line"><span class="comment">     * 索引内文档id不存在 response.status = create</span></span><br><span class="line"><span class="comment">     * 若索引内文档id存在 response.status = update</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newsInfo 新闻检索内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index    索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEsDocument</span><span class="params">(NewsInfo newsInfo, String index)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建索引index,指定文件编号id,存入文档source</span></span><br><span class="line">        IndexRequest indexRequest = <span class="keyword">new</span> IndexRequest(index)</span><br><span class="line">                .id(String.valueOf(newsInfo.getNewsId()))</span><br><span class="line">                .source(convertNewsInfoToMap(newsInfo), XContentType.JSON);</span><br><span class="line">        <span class="comment">//服务器超时或无响应时-同步api会引发ResponseException</span></span><br><span class="line">        <span class="comment">//IndexResponse response = client.index(indexRequest, RequestOptions.DEFAULT);</span></span><br><span class="line">        <span class="comment">//异步响应 错误时记录日志信息</span></span><br><span class="line">        client.indexAsync(indexRequest, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;IndexResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(IndexResponse indexResponse)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"EsCommonService.createEsIndex newsId:&#123;&#125; index:&#123;&#125; status:&#123;&#125;"</span>, newsInfo.getNewsId(), index, indexResponse.getResult().name());</span><br><span class="line">                <span class="comment">// 如果有分片副本失败，可以获得失败原因信息</span></span><br><span class="line">                ReplicationResponse.ShardInfo info = indexResponse.getShardInfo();</span><br><span class="line">                <span class="keyword">if</span> (info.getFailed() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (ReplicationResponse.ShardInfo.Failure failure : info.getFailures()) &#123;</span><br><span class="line">                        String reason = failure.reason();</span><br><span class="line">                        log.warn(<span class="string">"cause："</span> + reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"EsCommonServic.createEsIndex exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除索引中数据</span></span><br><span class="line"><span class="comment">     * 索引内文档id存在 response.status = deleted</span></span><br><span class="line"><span class="comment">     * 若索引内文档id不存在 response.status = not_found</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id    新闻id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteEsDocument</span><span class="params">(String index, String id)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(index, id);</span><br><span class="line">        client.deleteAsync(deleteRequest, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;DeleteResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(DeleteResponse deleteResponse)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"EsCommonService.deleteEsDocument newsId:&#123;&#125; index:&#123;&#125; status:&#123;&#125;"</span>, id, index, deleteResponse.getResult().name());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"EsCommonServic.onFailure exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量插入es文档(如果index|id存在则update)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newsInfos 新闻内容列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index     索引名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiInsertEsDocument</span><span class="params">(List&lt;NewsInfo&gt; newsInfos, String index)</span> </span>&#123;</span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest(index);</span><br><span class="line">        newsInfos.forEach(newsInfo -&gt; request.add(<span class="keyword">new</span> IndexRequest()</span><br><span class="line">                .id(String.valueOf(newsInfo.getNewsId()))</span><br><span class="line">                .source(convertNewsInfoToMap(newsInfo), XContentType.JSON)));</span><br><span class="line">        client.bulkAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BulkResponse bulkItemResponses)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"EsCommonService.MultiInsertEsDocument hasFailures:&#123;&#125;"</span>, bulkItemResponses.hasFailures());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"EsCommonServic.MultiInsertEsDocument exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文档</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids   文档id列表</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiDeleteEsDocument</span><span class="params">(String index, List&lt;String&gt; ids)</span> </span>&#123;</span><br><span class="line">        BulkRequest request = <span class="keyword">new</span> BulkRequest(index);</span><br><span class="line">        ids.forEach(id -&gt; request.add(<span class="keyword">new</span> DeleteRequest().id(id)));</span><br><span class="line">        client.bulkAsync(request, RequestOptions.DEFAULT, <span class="keyword">new</span> ActionListener&lt;BulkResponse&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(BulkResponse bulkItemResponses)</span> </span>&#123;</span><br><span class="line">                log.info(<span class="string">"EsCommonService.MultiDeleteEsDocument hasFailures:&#123;&#125;"</span>, bulkItemResponses.hasFailures());</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                log.error(<span class="string">"EsCommonServic.MultiDeleteEsDocument exception"</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 中文检索</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document 查询入参</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index    索引内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SearchResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SearchResponse <span class="title">searchEsDocument</span><span class="params">(ProfileDocument document, String... index)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        SearchRequest request = <span class="keyword">new</span> SearchRequest(index);</span><br><span class="line">        SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"></span><br><span class="line">        builder.query(getQueryBuilder(document));</span><br><span class="line">        <span class="comment">//自定义排序机制按照id降序 默认 sort by _score</span></span><br><span class="line">        builder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">"_id"</span>).order(SortOrder.DESC));</span><br><span class="line">        <span class="comment">//细粒度排除检索字段</span></span><br><span class="line">        <span class="comment">//builder.fetchSource(includes,excludes);</span></span><br><span class="line">        <span class="comment">//设置检索偏移量和显示条数</span></span><br><span class="line">        builder.from(document.getOffset());</span><br><span class="line">        builder.size(document.getPerSize());</span><br><span class="line">        <span class="comment">//控制最大检索时间</span></span><br><span class="line">        builder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS));</span><br><span class="line">        request.source(builder);</span><br><span class="line">        <span class="comment">//执行检索 超时抛出IO异常 服务器返回4xx or 5xx会引发ElasticsearchException</span></span><br><span class="line">        SearchResponse searchResponse = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> searchResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据查询条件构建QueryBuilder</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> BoolQueryBuilder <span class="title">getQueryBuilder</span><span class="params">(ProfileDocument document)</span> </span>&#123;</span><br><span class="line">        BoolQueryBuilder boolQueryBuilder = <span class="keyword">new</span> BoolQueryBuilder();</span><br><span class="line">        <span class="comment">//must:and多条件查询 should:or查询</span></span><br><span class="line">        Object authorBuilder = getNewsAuthorBuilder(document);</span><br><span class="line">        Object publishBuilder = rangeNewsPublishTime(document);</span><br><span class="line">        Object updateBuilder = rangeNewsUpdateTime(document);</span><br><span class="line">        Object contentBuilder = getContentBuilder(document);</span><br><span class="line">        <span class="comment">//设置默认元素"null",防止builder为空导致创建流失败</span></span><br><span class="line">        Flux.just(authorBuilder, publishBuilder, updateBuilder, contentBuilder)</span><br><span class="line">                .filter(f-&gt;!<span class="string">"null"</span>.equals(f))</span><br><span class="line">                .doOnNext(builder -&gt; boolQueryBuilder.must((QueryBuilder) builder)).subscribe();</span><br><span class="line">        <span class="keyword">return</span> boolQueryBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Jackson对象转map</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> newsInfo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">convertNewsInfoToMap</span><span class="params">(NewsInfo newsInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> objectMapper.convertValue(newsInfo, Map<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在es大多数操作中都包含同步和异步两种，这里是基于异步的操作，将同步的异常处理通过listener的形式体现出来，然后由我们自己指定如何处理响应或潜在的失败。<br>NewsInfo和ProfileDocument两个实体类,分别定义了es文档内容、es联合检索条件(包含偏移量和pageSize)。</p><h4 id="检索条件Builder工具类"><a href="#检索条件Builder工具类" class="headerlink" title="检索条件Builder工具类"></a>检索条件Builder工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryBuilderUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新闻作者 精确匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getNewsAuthorBuilder</span><span class="params">(ProfileDocument document)</span></span>&#123;</span><br><span class="line">        String newsAuthor = document.getNewsAuthor();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == newsAuthor)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QueryBuilders.termQuery(<span class="string">"newsAuthor"</span>,newsAuthor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发布时间 范围匹配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">rangeNewsPublishTime</span><span class="params">(ProfileDocument document)</span></span>&#123;</span><br><span class="line">        Date startTime = document.getStartNewsPublishTime();</span><br><span class="line">        Date endTime = document.getEndNewsPublishTime();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == startTime || <span class="keyword">null</span> == endTime)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QueryBuilders.rangeQuery(<span class="string">"newsPublishTime"</span>).from(startTime).to(endTime).format(<span class="string">"strict_date_optional_time||epoch_millis"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新闻修改时间 范围匹配</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">rangeNewsUpdateTime</span><span class="params">(ProfileDocument document)</span></span>&#123;</span><br><span class="line">        Date startTime = document.getStartNewsUpdateTime();</span><br><span class="line">        Date endTime = document.getEndNewsUpdateTime();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == startTime || <span class="keyword">null</span> == endTime)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QueryBuilders.rangeQuery(<span class="string">"newsUpdateTime"</span>).from(startTime).to(endTime).format(<span class="string">"strict_date_optional_time||epoch_millis"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * content字段匹配</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> document</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getContentBuilder</span><span class="params">(ProfileDocument document)</span></span>&#123;</span><br><span class="line">        String clob = document.getCob();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == clob)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> QueryBuilders.matchQuery(<span class="string">"clob"</span>, clob)</span><br><span class="line">                <span class="comment">//启动模糊查询 莱温斯坦距离 AUTO:3,6</span></span><br><span class="line">                .fuzziness(Fuzziness.AUTO)</span><br><span class="line">                <span class="comment">//匹配前缀长度</span></span><br><span class="line">                .prefixLength(<span class="number">0</span>)</span><br><span class="line">                <span class="comment">//最大扩展项</span></span><br><span class="line">                .maxExpansions(<span class="number">50</span>)</span><br><span class="line">                <span class="comment">//使用ik中文分词器</span></span><br><span class="line">                .analyzer(<span class="string">"ik_smart"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在使用时调用reactor的Flux.just参数不能为空，故”null”代替null（仅为了写代码方便，不是最佳实践）。</p><h3 id="Result"><a href="#Result" class="headerlink" title="Result"></a>Result</h3><p>用postman对部分字段测试联合检索，例如clob字段包含”处处”，offset=0,分页数=10，索引名=1时，检索内容如下：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/10.png" alt="result"></p><p>加上author=sillybilly时，测试效果：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/elasticsearch/11.png" alt="result"><br>至此，简单的es检索功能就完成了。<br>当然还有很多其他的功能需要完善比如：<br>1、HighlightBuilder类处理的检索字段加亮显示<br>2、es全量同步、增量同步问题（考虑用logstash轮询？还是利用mysql数据库仿logstash造个定时job轮询的车轱辘？）</p>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> elasticsearch </tag>
            
            <tag> db </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx本地缓存</title>
      <link href="/nginx%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98.html"/>
      <url>/nginx%E6%9C%AC%E5%9C%B0%E7%BC%93%E5%AD%98.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>通常nginx作为一个很强大的高性能Web和反向代理服务，在没有F5的情况下用来作为负载均衡器都是一种很不错的选择。而实际的使用中我发现nginx的作用远不止于此，本文在此主要讲述nginx作为缓存服务器的使用和实现。<br><br>nginx支持类似Squid的缓存功能，分为两种。一种是永久缓存，即指定一个文件将用户访问的数据缓存在该文件中，并且不会过期；另一种是临时缓存，顾名思义可以指定过期策略、缓存空间大小，存在第三方插件支持(purge模块)，用来清除某个路径缓存。比较坑的是，只有付费版的nginx plus支持路径匹配删除,例如：https//sillybilly-share.top/* 删除缓存key值匹配https//sillybilly-share.top的所有缓存内容，第三方插件只能全路径匹配，网上也看到一些用lua脚本写的删除策略，但都是遍历删除，当缓存文件很大时清除缓存的效率就会低下。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>在配置永久缓存和临时缓存之前，需要将nginx编译安装完成。这里在linux环境下操作（window下编译第三方模块太麻烦了）。<br>如果linux没有安装编译工具和库文件的需要执行：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</span><br></pre></td></tr></table></figure><p>为了让nginx支持rewrite功能需要下载pcre包，官网地址：<a href="http://downloads.sourceforge.net/project/pcre/pcre" target="_blank" rel="noopener">pcre</a><br>进入解压后的pcre目录下,编译后安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@user pcre-8.35]<span class="comment"># ./configure</span></span><br><span class="line">[root@user pcre-8.35]<span class="comment"># make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><p>然后下载nginx源码包以及第三方purge模块，nginx下载地址：<a href="http://nginx.org/download" target="_blank" rel="noopener">nginx</a>，purge模块：<a href="http://labs.frickle.com/nginx_ngx_cache_purge" target="_blank" rel="noopener">purge</a><br>执行命令编译安装，同时加入第三方purge模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/webserver/nginx --with-http_stub_status_module --with-http_ssl_module --with-pcre=/usr/<span class="built_in">local</span>/src/pcre-8.45 （pcre安装地址） --add-module=/usr/ngx_cache_purge-2.3 (purge模块解压地址)</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>此时进入nginx目录，执行./sbin/nginx -v，出现版本号就没问题了。</p><h2 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h2><h3 id="临时缓存"><a href="#临时缓存" class="headerlink" title="临时缓存"></a>临时缓存</h3><p>http层级定义临时缓存保存策略:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxy_temp_path &#x2F;apps&#x2F;nginx&#x2F;short-temp;</span><br><span class="line">proxy_cache_path &#x2F;apps&#x2F;nginx&#x2F;short-cache levels&#x3D;1:2 keys_zone&#x3D;nginx-cache:100m inactive&#x3D;7d max_size&#x3D;10g;</span><br></pre></td></tr></table></figure><p>说明：<br>proxy_temp_path：缓存临时文件，该文件需和proxy_cache_path在统一分区<br>proxy_cache_path：定义缓存文件路径为/apps/nginx/short-cache，key由两层目录结构（第一层是key值md5最后一位字符，第二层是key值md5倒数第2、3位字符），缓存名称为nginx-cache，缓存空间大小为100m,内容7天未被访问则清除该缓存，最大硬盘缓存空间为10g。</p><p>定义location正则匹配:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">location ~* ~* \.(jpeg|jpg|png|css|js)$ &#123;</span><br><span class="line">            add_header Cache-Control no-cache;</span><br><span class="line">    proxy_pass  http:&#x2F;&#x2F;ip:port;</span><br><span class="line">    proxy_cache nginx-cache;</span><br><span class="line">    proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">    proxy_cache_valid 200 304 1d;</span><br><span class="line">    proxy_set_header Host $host:$server_port;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header Range $http_range;</span><br><span class="line">    add_header  Nginx-Cache &quot;$upstream_cache_status&quot;;</span><br><span class="line">    proxy_next_upstream http_500 http_502 http_503 error timeout invalid_header;</span><br><span class="line">    expires 1d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br>将后缀为.jpg/.png等请求路由到某个服务。<br>proxy_cache:定义配置的缓存名<br>proxy_cache_key：以域名、URL、请求参数合成缓存key值经过md5hash到二级缓存目录中去<br>proxy_cache_valid：可以给不同http状态码设置不同的缓存时间<br>…<br>proxy_next_upstream:对于服务器返回的502，504和执行超时等错误，将请求转发给upstream中的另一台服务器，实现故障转移</p><h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4><p>对于http1.0遗留的Pragma:no-cache响应头：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/nginx/program.jpg" alt="result"><br>nginx会略过该请求不做任何处理(请求不会被缓存)，所以需要添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">proxy_hide_header Pragma;</span><br><span class="line">proxy_ignore_headers Expires;</span><br><span class="line">proxy_ignore_headers Cache-Control;</span><br></pre></td></tr></table></figure><p>定义缓存清除配置:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location ~ &#x2F;purge(&#x2F;.*) &#123;</span><br><span class="line">            allow              127.0.0.1;</span><br><span class="line">            deny               all;</span><br><span class="line">            proxy_cache_purge  nginx-cache $host$1$is_args$args;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>说明：<br>purge的调用也十分简单，只需在原请求路径前加上purge即可，例如：<a href="https://sillybilly-share.top/1.html">https://sillybilly-share.top/1.html</a> 经过缓存后，调用 <a href="https://sillybilly-share.top/purge/1.html">https://sillybilly-share.top/purge/1.html</a> 即可</p><h3 id="永久缓存"><a href="#永久缓存" class="headerlink" title="永久缓存"></a>永久缓存</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">location ~* \.(html)$ &#123;</span><br><span class="line">   if ($request_uri ~ \.($is_args$args)$ )&#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;ip:port;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (!-e $request_filename) &#123;</span><br><span class="line">            proxy_pass http:&#x2F;&#x2F;ip:port;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">        root &#x2F;apps&#x2F;nginx&#x2F;long-cache;</span><br><span class="line">        autoindex on;</span><br><span class="line">        proxy_store on;</span><br><span class="line">        proxy_store_access user:rw group:rw all:r;</span><br><span class="line">        proxy_temp_path &#x2F;apps&#x2F;nginx&#x2F;long-temp;</span><br><span class="line">        proxy_set_header x-real-ip $remote_addr;</span><br><span class="line">        proxy_set_header x-forwarded-for $proxy_add_x_forwarded_for;                                    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：<br>这样就指定了一个文件目录为/apps/nginx/long-cache的地址，用来缓存所有为.html结尾的请求资源。<br>$request_uri 如果携带参数(表明为非静态资源)，不访问本地缓存，从后端服务器读取资源；<br>!-e $request_filename，如果为ture,则本地缓存没有该文件，走服务器访问资源。</p>]]></content>
      
      
      <categories>
          
          <category> nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> cache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于amazonaws s3的分片上传(前后端实现)</title>
      <link href="/%E5%9F%BA%E4%BA%8Eamazonaws-s3%E7%9A%84%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0.html"/>
      <url>/%E5%9F%BA%E4%BA%8Eamazonaws-s3%E7%9A%84%E5%88%86%E7%89%87%E4%B8%8A%E4%BC%A0-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>s3对象存储在单个操作上文件上传的最大值为5个G，所以对于大文件的上传肯定需要使用分片功能。<br>使用分段上传可提供以下优势：<br>1、提高吞吐量 – 可以并行上传分段以提高吞吐量。<br>2、从任何网络问题中快速恢复 - 由于网络原因导致的上传失败，分段的操作可以避免文件再次全量上传，提高上传效率。<br>3、暂停和恢复对象上传 – 启动分段上传后，在一段时间内逐步上传对象分段，不存在过期期限，所以可以显式地完成或中止分段上传。<br>4、在不知道对象大小的情况前就可以开始上传 – 您可以在创建对象时将其上传。<br>s3推荐启动分段上传的阈值为100M,可以根据业务需求自己定义。基本的对象操作官网示例demo:<a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UploadingObjects.html" target="_blank" rel="noopener">s3开发人员指南</a>。</p><a id="more"></a><h2 id="分片上传实现"><a href="#分片上传实现" class="headerlink" title="分片上传实现"></a>分片上传实现</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>新建一个springboot+thymeleaf工程，并添加相关jar包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.9&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;!-- AmazonS3对象存储 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.amazonaws&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aws-java-sdk-s3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.11.592&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.amazonaws&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;aws-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.11.592&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;27.0.1-jre&lt;/version&gt;</span><br><span class="line">    &lt;!-- thymeleaf --&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>yml文件配置thymeleaf和开放字节上传限制</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: 8090</span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  thymeleaf:</span><br><span class="line">    prefix: classpath:&#x2F;templates&#x2F;</span><br><span class="line">    suffix: .html</span><br><span class="line">  devtools:</span><br><span class="line">    restart:</span><br><span class="line">      #需要实时更新的目录</span><br><span class="line">      additional-paths: resources&#x2F;**,static&#x2F;**,templates&#x2F;**</span><br><span class="line">  servlet:</span><br><span class="line">    multipart:</span><br><span class="line">      max-file-size: 4096MB</span><br><span class="line">      max-request-size: 4096MB</span><br></pre></td></tr></table></figure><h3 id="后端接口实现"><a href="#后端接口实现" class="headerlink" title="后端接口实现"></a>后端接口实现</h3><p>定义一个s3接口类,预定义出一些方法用于Controller层调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AwsS3Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 大文件分片上传 max-5TB 每段最小5MB</span></span><br><span class="line"><span class="comment">     * 建议100MB以上文件上传启动分段</span></span><br><span class="line"><span class="comment">     * 在上传期间更改分段的大小或者事先不知道上传的数据大小的情况下用此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id 文件id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 桶键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 分片文件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chunks 总分片数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chunk 当前分片</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">uploadAppenderFile</span><span class="params">(String id,String key, MultipartFile file,<span class="keyword">int</span> chunks,<span class="keyword">int</span> chunk)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认建议使用此方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> stream 上传源文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">uploadByTransferManager</span><span class="params">(String key,InputStream stream,<span class="keyword">long</span> length)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>s3有两种分段上传方式，一种是高级API即第二种实现(这里可以直接去操作指南看)，另一种是低级API即第一种实现，这里用第一种方式，因为数据的分片是前端来做。</p><p>接口实现的处理（第一种）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsS3ServiceImpl</span> <span class="keyword">implements</span> <span class="title">AwsS3Service</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmazonawsS3utils amazonawsS3utils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadAppenderFile</span><span class="params">(String id, String key, MultipartFile file, <span class="keyword">int</span> chunks, <span class="keyword">int</span> chunk)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = amazonawsS3utils.getConnection();</span><br><span class="line">        String bucketName = amazonawsS3utils.getBucketName();</span><br><span class="line"></span><br><span class="line">        String uploadId = PartETagsCacheUtils.getUploadId(id,bucketName,key,amazonS3);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedInputStream stream = <span class="keyword">new</span> BufferedInputStream(file.getInputStream());</span><br><span class="line">            <span class="keyword">long</span> partSize = file.getSize();</span><br><span class="line">            <span class="comment">//上传请求参数设置 必需参数：BucketName，Key，UploadId，PartNumber，PartSize(partNumber between 1 and 10,000)</span></span><br><span class="line">            UploadPartRequest partRequest = <span class="keyword">new</span> UploadPartRequest()</span><br><span class="line">                    .withBucketName(bucketName)</span><br><span class="line">                    .withKey(key)</span><br><span class="line">                    .withUploadId(uploadId)</span><br><span class="line">                    .withPartNumber(chunk + <span class="number">1</span>)</span><br><span class="line">                    .withPartSize(partSize)</span><br><span class="line">                    .withInputStream(stream);</span><br><span class="line">            <span class="comment">//配置最大缓冲区大小</span></span><br><span class="line">            partRequest.getRequestClientOptions().setReadLimit(<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>);</span><br><span class="line">            <span class="comment">//partRequest.setGeneralProgressListener(progressEvent -&gt; log.info("data upload:&#123;&#125;", progressEvent.getBytesTransferred()));</span></span><br><span class="line">            UploadPartResult uploadResult = amazonS3.uploadPart(partRequest);</span><br><span class="line">            PartETagsCacheUtils.addPartETag(id, uploadResult.getPartETag());</span><br><span class="line">            List&lt;PartETag&gt; partETags = PartETagsCacheUtils.getPartETags(id);</span><br><span class="line">            <span class="comment">//完成上传</span></span><br><span class="line">            <span class="keyword">if</span> (partETags.size == chunks)&#123;</span><br><span class="line">                </span><br><span class="line">                CompleteMultipartUploadRequest compRequest = <span class="keyword">new</span> CompleteMultipartUploadRequest(bucketName, key, uploadId, partETags);</span><br><span class="line">                amazonS3.completeMultipartUpload(compRequest);</span><br><span class="line">                PartETagsCacheUtils.cleanCache(id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            log.info(<span class="string">"IO异常,&#123;&#125;"</span>, e.getMessage());</span><br><span class="line">            PartETagsCacheUtils.cleanCache(id);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SdkClientException e) &#123;</span><br><span class="line">            <span class="comment">//终止分段上传</span></span><br><span class="line">            amazonS3.abortMultipartUpload(<span class="keyword">new</span> AbortMultipartUploadRequest(bucketName, key, uploadId));</span><br><span class="line">            log.info(<span class="string">"Failed to upload, &#123;&#125;"</span>, e.getMessage());</span><br><span class="line">            PartETagsCacheUtils.cleanCache(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AmazonawsS3utils类可以参考之前的内容（差不多）(<a href="https://sillybilly-share.top/ceph%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-amasonaws-s3-api%E9%AA%8C%E8%AF%81.html">api验证</a>),PartETagsCacheUtils类用于缓存分段上传的PartETag以及不同文件上传的uploadId。简单的实现如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:      sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:        2020/4/8 16:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 分段上传信息本地缓存</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PartETagsCacheUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个列表保存某个文件所有分段的 PartETag</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, List&lt;PartETag&gt;&gt; partETagList = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">//分段上传&lt;文件id，uploadId&gt;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; uploadIds = <span class="keyword">new</span> ConcurrentHashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addPartETag</span><span class="params">(String id, PartETag partETag)</span> </span>&#123;</span><br><span class="line">        List&lt;PartETag&gt; partETags = partETagList.get(id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == partETags)&#123;</span><br><span class="line">            partETags = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        partETags.add(partETag);</span><br><span class="line">        partETagList.put(id,partETags);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;PartETag&gt; <span class="title">getPartETags</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> partETagList.get(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">cleanCache</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        partETagList.remove(id);</span><br><span class="line">        uploadIds.remove(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> String <span class="title">getUploadId</span><span class="params">(String id, String bucketName, String key, AmazonS3 amazonS3)</span></span>&#123;</span><br><span class="line">        String uploadId = uploadIds.get(id);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == uploadId)&#123;</span><br><span class="line">            InitiateMultipartUploadRequest initRequest = <span class="keyword">new</span> InitiateMultipartUploadRequest(bucketName, key)</span><br><span class="line">                    .withCannedACL(CannedAccessControlList.PublicRead);</span><br><span class="line">            <span class="comment">//启动分段上传，并返回包含上传ID的InitiateMultipartUploadResult</span></span><br><span class="line">            InitiateMultipartUploadResult initResult = amazonS3.initiateMultipartUpload(initRequest);</span><br><span class="line">            uploadId = initResult.getUploadId();</span><br><span class="line">            uploadIds.put(id,uploadId);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> uploadId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以用Controller层去调用该方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AwsS3Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AwsS3Service awsS3Service;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/uploadAppenderFile"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadAppenderFile</span><span class="params">(DataUploadVO dataUploadVO)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        log.info(<span class="string">"开启分段信息：&#123;&#125;"</span>,dataUploadVO.toString());</span><br><span class="line">        String key = dataUploadVO.getName();</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span>==dataUploadVO.getChunks())&#123;</span><br><span class="line">            <span class="comment">//todo 不走分片</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> chunks = Integer.parseInt(dataUploadVO.getChunks());</span><br><span class="line">        <span class="keyword">int</span> chunk = Integer.parseInt(dataUploadVO.getChunk());</span><br><span class="line">        MultipartFile file = dataUploadVO.getFile();</span><br><span class="line">        String id = dataUploadVO.getId();</span><br><span class="line">        awsS3Service.uploadAppenderFile(id,key,file,chunks,chunk);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DataUploadVO封装了前端发送的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataUploadVO</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当前文件id 文件ID，如WU_FILE_1，后面数字代表当前传的是第几个文件,后续使用此ID来创建临时目录，将属于该文件ID的所有分片全部放在同一个文件夹中</span></span><br><span class="line">    String id;</span><br><span class="line">    <span class="comment">//当前所传文件的分片总数</span></span><br><span class="line">    String chunks;</span><br><span class="line">    <span class="comment">//当前所传文件的当前分片数</span></span><br><span class="line">    String chunk;</span><br><span class="line">    <span class="comment">//文件名称，如07-中文分词器和业务域的配置.avi</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//当前所传分片数据</span></span><br><span class="line">    MultipartFile file;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">//* 可选参数</span></span><br><span class="line">     <span class="comment">//* guid 可省略；每个文件有自己唯一的guid，后续测试中发现，每个分片也有自己的guid，所以不能使用guid来确定分片属于哪个文件。</span></span><br><span class="line">     <span class="comment">//* md5value 文件的MD5值</span></span><br><span class="line">     <span class="comment">//* type 文件类型，可选，在这里没有用到</span></span><br><span class="line">     <span class="comment">//* lastModifiedDate 文件修改日期，可选，在这里没有用到</span></span><br><span class="line">     <span class="comment">//* size  当前所传分片大小，可选，没有用到</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然100兆以下的文件不走分片，chunks为null,可以直接调用putObject上传数据。</p><h3 id="前端实现"><a href="#前端实现" class="headerlink" title="前端实现"></a>前端实现</h3><p>这里主要用前端将数据包分片传给我们的oss服务器，所以我选择了百度的webupload插件，地址：<a href="http://fex.baidu.com/webuploader/doc/" target="_blank" rel="noopener">webupload官网</a>，我们可以使用staticfile提供的cdn版本，或者下载源码放在自己的项目中，这里我们直接下载放入自己的项目中。然后根据thymeleaf模板的方式引入资源。<br>upload.html:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入CSS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;css/webuploader.css&#125;"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入JS--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-3.1.1.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">th:src</span>=<span class="string">"@&#123;js/webuploader.js&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Main content --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"margin-top: 20px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>大文件上传<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"margin-top: 50px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"uploader"</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"fileList"</span> <span class="attr">class</span>=<span class="string">"uploader-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--存放文件的容器--&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btns container"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"picker"</span> <span class="attr">class</span>=<span class="string">"webuploader-container"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">"float: left; margin-right: 10px"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">                        选择文件 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span></span></span><br><span class="line"><span class="tag">                                    <span class="attr">class</span>=<span class="string">"webuploader-element-invisible"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"UploadBtn"</span> <span class="attr">class</span>=<span class="string">"webuploader-pick"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">"float: left; margin-right: 10px"</span>&gt;</span>开始上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"StopBtn"</span> <span class="attr">class</span>=<span class="string">"webuploader-pick"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">style</span>=<span class="string">"float: left; margin-right: 10px"</span> <span class="attr">status</span>=<span class="string">"suspend"</span>&gt;</span>暂停上传<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        $list = $(<span class="string">'#fileList'</span>);</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> flie_count = <span class="number">0</span>;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> uploader = WebUploader.create(&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//设置选完文件后是否自动上传</span></span></span><br><span class="line"><span class="actionscript">            auto: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//swf文件路径</span></span></span><br><span class="line"><span class="actionscript">            swf: <span class="string">'js/Uploader.swf'</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 文件接收服务端。</span></span></span><br><span class="line"><span class="actionscript">            server: <span class="string">'/uploadAppenderFile'</span>,</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 选择文件的按钮。可选。</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 内部根据当前运行是创建，可能是input元素，也可能是flash.</span></span></span><br><span class="line"><span class="actionscript">            pick: <span class="string">'#picker'</span>,</span></span><br><span class="line"><span class="actionscript">            chunked: <span class="literal">true</span>, <span class="comment">//开启分块上传</span></span></span><br><span class="line">            chunkSize: 10 * 1024 * 1024,</span><br><span class="line"><span class="actionscript">            chunkRetry: <span class="number">3</span>,<span class="comment">//网络问题上传失败后重试次数</span></span></span><br><span class="line"><span class="actionscript">            threads: <span class="number">5</span>, <span class="comment">//上传并发数</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//fileNumLimit :1,</span></span></span><br><span class="line"><span class="actionscript">            fileSizeLimit: <span class="number">5000</span> * <span class="number">1024</span> * <span class="number">1024</span>,<span class="comment">//总文件大小</span></span></span><br><span class="line"><span class="actionscript">            fileSingleSizeLimit: <span class="number">3000</span> * <span class="number">1024</span> * <span class="number">1024</span>, <span class="comment">//单个文件最大值</span></span></span><br><span class="line"><span class="actionscript">            resize: <span class="literal">false</span><span class="comment">//不压缩</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//选择文件类型</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//accept: &#123;</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    title: 'Video',</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    extensions: 'mp4,avi',</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//    mimeTypes: 'video/*'</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//&#125;</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 当有文件被添加进队列的时候</span></span></span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'fileQueued'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">            $list.append('<span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"' + file.id + '"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>' +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                '<span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"info"</span>&gt;</span>' + file.name + '<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">fileId</span>=<span class="string">"' + file.id + '"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger btn-delete"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-trash"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span>' +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">                '<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"state"</span>&gt;</span>正在计算文件MD5...请等待计算完毕后再点击上传！<span class="tag">&lt;/<span class="name">p</span>&gt;</span>' +</span></span></span><br><span class="line"><span class="actionscript">                <span class="string">'&lt;/div&gt;'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.info(<span class="string">"id=file_"</span>+flie_count);</span></span><br><span class="line">            flie_count++;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//删除要上传的文件</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//每次添加文件都给btn-delete绑定删除方法</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">".btn-delete"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//console.log($(this).attr("fileId"));//拿到文件id</span></span></span><br><span class="line"><span class="javascript">                uploader.removeFile(uploader.getFile($(<span class="keyword">this</span>).attr(<span class="string">"fileId"</span>), <span class="literal">true</span>));</span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).parent().parent().fadeOut();<span class="comment">//视觉上消失了</span></span></span><br><span class="line"><span class="javascript">                $(<span class="keyword">this</span>).parent().parent().remove();<span class="comment">//DOM上删除了</span></span></span><br><span class="line">            &#125;);</span><br><span class="line"><span class="actionscript">            <span class="comment">//uploader.options.formData.guid = WebUploader.guid();//每个文件都附带一个guid，以在服务端确定哪些文件块本来是一个</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//console.info("guid= "+WebUploader.guid());</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">//md5计算</span></span></span><br><span class="line">            uploader.md5File(file)</span><br><span class="line"><span class="actionscript">                .progress(<span class="function"><span class="keyword">function</span><span class="params">(percentage)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">'Percentage:'</span>, percentage);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="actionscript">                <span class="comment">// 完成</span></span></span><br><span class="line"><span class="actionscript">                .then(<span class="function"><span class="keyword">function</span> <span class="params">(fileMd5)</span> </span>&#123; <span class="comment">// 完成</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> end = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(<span class="string">"before-send-file  preupload: file.size="</span>+file.size+<span class="string">" file.md5="</span>+fileMd5);</span></span><br><span class="line"><span class="actionscript">                    file.wholeMd5 = fileMd5;<span class="comment">//获取到了md5</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//uploader.options.formData.md5value = file.wholeMd5;//每个文件都附带一个md5，便于实现秒传</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">                    $(<span class="string">'#'</span> + file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'MD5计算完毕，可以点击上传了'</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.info(<span class="string">"MD5="</span>+fileMd5);</span></span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        <span class="comment">// 文件上传过程中创建进度条实时显示。</span></span></span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadProgress'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file, percentage)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> $li = $(<span class="string">'#'</span> + file.id),</span></span><br><span class="line"><span class="actionscript">                $percent = $li.find(<span class="string">'.progress .progress-bar'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 避免重复创建</span></span></span><br><span class="line">            if (!$percent.length) &#123;</span><br><span class="line"><span class="javascript">                $percent = $(<span class="string">'&lt;div class="progress progress-striped active"&gt;'</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">                    '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">style</span>=<span class="string">"width: 0%"</span>&gt;</span>' +</span></span></span><br><span class="line"><span class="actionscript">                    <span class="string">'&lt;/div&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">                    <span class="string">'&lt;/div&gt;'</span>).appendTo($li).find(<span class="string">'.progress-bar'</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            $li.find(<span class="string">'p.state'</span>).text(<span class="string">'上传中'</span>);</span></span><br><span class="line"><span class="actionscript">            $percent.css(<span class="string">'width'</span>, percentage * <span class="number">100</span> + <span class="string">'%'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">//发送前填充数据</span></span></span><br><span class="line"><span class="actionscript">        uploader.on( <span class="string">'uploadBeforeSend'</span>, <span class="function"><span class="keyword">function</span><span class="params">( block, data )</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// block为分块数据。</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">            <span class="comment">// file为分块对应的file对象。</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> file = block.file;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> fileMd5 = file.wholeMd5;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 修改data可以控制发送哪些携带数据。</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.info(<span class="string">"fileName= "</span>+file.name+<span class="string">" fileMd5= "</span>+fileMd5+<span class="string">" fileId= "</span>+file.id);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.info(<span class="string">"input file= "</span>+ flie_count);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 将存在file对象中的md5数据携带发送过去。</span></span></span><br><span class="line"><span class="actionscript">            data.md5value = fileMd5;<span class="comment">//md5</span></span></span><br><span class="line"><span class="javascript">            data.fileName_ = $(<span class="string">"#s_"</span>+file.id).val();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"fileName_: "</span>+data.fileName_);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">// 删除其他数据</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">// delete data.key;</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span>(block.chunks&gt;<span class="number">1</span>)&#123; <span class="comment">//文件大于chunksize 分片上传</span></span></span><br><span class="line"><span class="actionscript">                data.isChunked = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.info(<span class="string">"data.isChunked= "</span>+data.isChunked);</span></span><br><span class="line"><span class="actionscript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="actionscript">                data.isChunked = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.info(<span class="string">"data.isChunked="</span>+data.isChunked);</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadSuccess'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#'</span> + file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'已上传'</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#'</span> + file.id).find(<span class="string">".progress"</span>).find(<span class="string">".progress-bar"</span>).attr(<span class="string">"class"</span>, <span class="string">"progress-bar progress-bar-success"</span>);</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#'</span> + file.id).find(<span class="string">".info"</span>).find(<span class="string">'.btn'</span>).fadeOut(<span class="string">'slow'</span>);<span class="comment">//上传完后删除"删除"按钮</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#StopBtn'</span>).fadeOut(<span class="string">'slow'</span>);</span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadError'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#'</span> + file.id).find(<span class="string">'p.state'</span>).text(<span class="string">'上传出错'</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//上传出错后进度条变红</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'#'</span> + file.id).find(<span class="string">".progress"</span>).find(<span class="string">".progress-bar"</span>).attr(<span class="string">"class"</span>, <span class="string">"progress-bar progress-bar-danger"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//添加重试按钮</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//为了防止重复添加重试按钮，做一个判断</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//var retrybutton = $('#' + file.id).find(".btn-retry");</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//$('#' + file.id)</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> ($(<span class="string">'#'</span> + file.id).find(<span class="string">".btn-retry"</span>).length &lt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="handlebars"><span class="xml">                var btn = $('<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">fileid</span>=<span class="string">"' + file.id + '"</span> <span class="attr">class</span>=<span class="string">"btn btn-success btn-retry"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-refresh"</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>');</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#'</span> + file.id).find(<span class="string">".info"</span>).append(btn);<span class="comment">//.find(".btn-danger")</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            $(<span class="string">".btn-retry"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">                <span class="comment">//console.log($(this).attr("fileId"));//拿到文件id</span></span></span><br><span class="line"><span class="javascript">                uploader.retry(uploader.getFile($(<span class="keyword">this</span>).attr(<span class="string">"fileId"</span>)));</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadComplete'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file)</span> </span>&#123;<span class="comment">//上传完成后回调</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//$('#' + file.id).find('.progress').fadeOut();//上传完删除进度条</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//$('#' + file.id + 'btn').fadeOut('slow')//上传完后删除"删除"按钮</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadFinished'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//上传完后的回调方法</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//alert("所有文件上传完毕");</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//提交表单</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#UploadBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">            uploader.upload();<span class="comment">//上传</span></span></span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        $(<span class="string">"#StopBtn"</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log($(<span class="string">'#StopBtn'</span>).attr(<span class="string">"status"</span>));</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> status = $(<span class="string">'#StopBtn'</span>).attr(<span class="string">"status"</span>);</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (status == <span class="string">"suspend"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"当前按钮是暂停，即将变为继续"</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#StopBtn"</span>).html(<span class="string">"继续上传"</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#StopBtn"</span>).attr(<span class="string">"status"</span>, <span class="string">"continuous"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"当前所有文件==="</span>+uploader.getFiles());</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"=============暂停上传=============="</span>);</span></span><br><span class="line"><span class="actionscript">                uploader.stop(<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"=============所有当前暂停的文件============="</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(uploader.getFiles(<span class="string">"interrupt"</span>));</span></span><br><span class="line"><span class="actionscript">            &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"当前按钮是继续，即将变为暂停"</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#StopBtn"</span>).html(<span class="string">"暂停上传"</span>);</span></span><br><span class="line"><span class="javascript">                $(<span class="string">"#StopBtn"</span>).attr(<span class="string">"status"</span>, <span class="string">"suspend"</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">"===============所有当前暂停的文件=============="</span>);</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(uploader.getFiles(<span class="string">"interrupt"</span>));</span></span><br><span class="line"><span class="actionscript">                uploader.upload(uploader.getFiles(<span class="string">"interrupt"</span>));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="actionscript">        uploader.on(<span class="string">'uploadAccept'</span>, <span class="function"><span class="keyword">function</span> <span class="params">(file, response)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (response._raw === <span class="string">'&#123;"error":true&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里需要注意官网提供的css文件，没有下载进度条的样式，需要自己写入，额外添加的样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.progress</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line"><span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">1px</span> <span class="number">2px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress</span><span class="selector-class">.active</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line"><span class="attribute">-webkit-animation</span>: progress-bar-stripes <span class="number">2s</span> linear infinite;</span><br><span class="line"><span class="attribute">animation</span>: progress-bar-stripes <span class="number">2s</span> linear infinite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.progress-striped</span> <span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">45deg</span>,rgba(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.15</span>) <span class="number">25%</span>,transparent <span class="number">25%</span>,transparent <span class="number">50%</span>,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.15</span>) <span class="number">50%</span>,<span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.15</span>) <span class="number">75%</span>,transparent <span class="number">75%</span>,transparent);</span><br><span class="line"><span class="attribute">background-size</span>: <span class="number">40px</span> <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">-webkit-linear-gradient</span>(top,#<span class="number">428</span>bca <span class="number">0</span>,#<span class="number">3071</span>a9 <span class="number">100%</span>);</span><br><span class="line"><span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom,#<span class="number">428</span>bca <span class="number">0</span>,#<span class="number">3071</span>a9 <span class="number">100%</span>);</span><br><span class="line"><span class="attribute">background-repeat</span>: repeat-x;</span><br><span class="line"><span class="attribute">filter</span>: progid:DXImageTransform.Microsoft.<span class="built_in">gradient</span>(startColorstr=’#ff428bca’,endColorstr=’#ff3071a9’,GradientType=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.progress-bar</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line"><span class="attribute">line-height</span>: <span class="number">20px</span>;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line"><span class="attribute">text-align</span>: center;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#428bca</span>;</span><br><span class="line"><span class="attribute">box-shadow</span>: inset <span class="number">0</span> -<span class="number">1px</span> <span class="number">0</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.15</span>);</span><br><span class="line"><span class="attribute">transition</span>: width .<span class="number">6s</span> ease;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>最后，我们就可以启动项目输入ip+端口进行测试了,截取某段效果图如下：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/ceph/3.png" alt="result"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ceph </category>
          
          <category> oss </category>
          
          <category> amazonaws s3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ceph </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty ByteBuf使用与释放</title>
      <link href="/netty-ByteBuf%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8A%E6%94%BE.html"/>
      <url>/netty-ByteBuf%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%87%8A%E6%94%BE.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>在了解netty的byteBuf方法之前，我们需要对JVM的内存分配有一定的认知。这里引用网上的一张JVM内存模型图:</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/netty/jvm.png" alt="JVM内存模型"></p><a id="more"></a><p>JVM的内存分配机制大概如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1、方法区（Method Area）：存放已被加载的类信息、常量、静态变量、即时编译器编译后的代码数据等。（即持久代），回收目标主要是常量池的回收和已加载类的卸载，各线程共享</span><br><span class="line">2、堆区（Heap）：java内存最大的一块，所有对象实例、数组都存放在java堆（new出来的东西），GC回收最频繁的地方，线程共享</span><br><span class="line">3、虚拟机栈（VM Stack）：存放基本数据类型、对象的引用、方法出口等，线程私有（定义了两种异常类型StackOverFlowError(栈溢出)和OutOfMemoryError（内存溢出））</span><br><span class="line">4、本地方法栈（Native Method Stack）：和虚拟栈相似，只不过它服务于Native方法，线程私有</span><br><span class="line">5、程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，用于记录正在执行的虚拟机字节指令地址，线程私有（此内存区是唯一不会抛出OutOfMemoryError的区域）</span><br></pre></td></tr></table></figure><h2 id="netty-ByteBuf解析"><a href="#netty-ByteBuf解析" class="headerlink" title="netty-ByteBuf解析"></a>netty-ByteBuf解析</h2><h3 id="netty提供内存泄漏的检测机制"><a href="#netty提供内存泄漏的检测机制" class="headerlink" title="netty提供内存泄漏的检测机制"></a>netty提供内存泄漏的检测机制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">禁用（DISABLED） - 完全禁止泄露检测，省点消耗。</span><br><span class="line">简单（SIMPLE） - 默认等级，告诉我们取样的1%的ByteBuf是否发生了泄露，但总共一次只打印一次，看不到就没有了。</span><br><span class="line">高级（ADVANCED） - 告诉我们取样的1%的ByteBuf发生泄露的地方。每种类型的泄漏（创建的地方与访问路径一致）只打印一次。对性能有影响。</span><br><span class="line">偏执（PARANOID） - 跟高级选项类似，但此选项检测所有ByteBuf，而不仅仅是取样的那1%。对性能有绝大的影响。</span><br></pre></td></tr></table></figure><p>一般我们可以使用-D参数，把防漏等级从默认的simple升到advanced，就能具体看到被泄漏的ByteBuf被创建和访问的地方，而在项目中问题定位到ByteBuf对象的释放上，在解决内存溢出之前，我们需要了解netty中ByteBuf对象的内存分配与释放机制。从netty4之后，ByteBuf对象的生命周期由它们的引用计数（reference counts）管理，而不是由垃圾收集器（garbage collector）管理了。ByteBuf是最值得注意的，它使用了引用计数来改进分配内存和释放内存的性能。</p><h3 id="何为引用计数器？"><a href="#何为引用计数器？" class="headerlink" title="何为引用计数器？"></a>何为引用计数器？</h3><p>对于ByteBuf来说，分为池化（Pooled）和非池化（Unpooled）两种分配内存的方式。其中UnpooledHeapByteBuf 底下的byte[]能够依赖JVM GC自然回收，而UnpooledDirectByteBuf底下是DirectByteBuffer，除了等JVM GC，最好也能主动进行回收；而PooledHeapByteBuf 和 PooledDirectByteBuf，则必须要主动将用完的byte[]/ByteBuffer放回池里，否则内存就要爆掉。所以，Netty ByteBuf需要在JVM的GC机制之外，有自己的引用计数器和回收过程。这种感觉就是又回到大学里写c++的时候，自己malloc对象要自己free。 但又并不完全一样,具体体现在：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">所有ByteBuf的引用计数器初始值为1。</span><br><span class="line">调用release()，将计数器减1，等于零时， deallocate()被调用，各种回收。</span><br><span class="line">调用retain()，将计数器加1，即使ByteBuf在别的地方被人release()了，在本Class没喊cut之前，不要把它释放掉。</span><br><span class="line">由duplicate(), slice()和order()所衍生的ByteBuf，与原对象共享底下的buffer，也共享引用计数器，所以它们经常需要调用retain()来显示自己的存在。</span><br><span class="line">当引用计数器为0，底下的buffer已被回收，即使ByteBuf对象还在，对它的各种访问操作都会抛出异常</span><br></pre></td></tr></table></figure><h3 id="ByteBuf之slice-retainedSlice"><a href="#ByteBuf之slice-retainedSlice" class="headerlink" title="ByteBuf之slice()/retainedSlice()"></a>ByteBuf之slice()/retainedSlice()</h3><p>ByteBuf.duplicate(), ByteBuf.slice()和ByteBuf.order(ByteOrder)创建了子缓冲，这些缓存共享了它们的父缓冲（parent buffer）的一部分内存。子缓冲没有自己的引用计数，而是共享父缓冲的引用计数。注意父缓冲和它的子缓冲共享同样的引用计数，当创建子缓冲时并不会增加对象的引用计数。因此，如果你要传递（pass）一个子缓冲给你的程序中的其他组件的话，你得先调用retain()。</p><p>在这里，主要讲下我对于slice()和retainedSlice()方法的粗略理解。我们现在都知道，每当我们创建一个ByteBuf对象时，当前的ByteBuf对象的引用计数器初始为1。而当我们调用slice()方法时，子缓冲和父缓冲共享同一块内存，但它们的读写指针是不共享的，所以我们经常用这个方法来copy一份数据出来（算是浅拷贝的一种但读写指针互不影响？我不知道这么理解对不对）。那么retainedSlice()是否为slice()+retained()方法结合呢？JPA中对这两个方法解释如下：</p><p>retainedSlice:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Returns a retained slice of this buffer&#39;s readable bytes. Modifying the content of the returned buffer or this buffer affects each other&#39;s content while they maintain separate indexes and marks. This method is identical to buf.slice(buf.readerIndex(), buf.readableBytes()). This method does not modify readerIndex or writerIndex of this buffer.</span><br></pre></td></tr></table></figure><p>slice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Returns a slice of this buffer&#39;s readable bytes. Modifying the content of the returned buffer or this buffer affects each other&#39;s content while they maintain separate indexes and marks. This method is identical to buf.slice(buf.readerIndex(), buf.readableBytes()). This method does not modify readerIndex or writerIndex of this buffer.</span><br></pre></td></tr></table></figure><p>其实看不出retainedSlice与slice+retained的方法有什么区别，然而这和ByteBuf对象是否池化有很大关系。在非池化的ByteBuf中，retainedSlice()应该和slice()一样，拷贝的子缓冲和父缓冲共享同一个引用计数，不过就是多调用了retain()方法，使其引用计数器+1了而已；而在池化的ByteBuf中，retainedSlice()得到子缓冲他对象初始refCnt都是1，这里无论之前的父缓冲refCnf是多少。并且可以通过测试得出，它们的引用计数器各自独立互不影响，除了一个特殊情况（子缓冲refCnt=0，即被释放掉了，那么父缓冲的计数器才会-1）</p><p>可以用代码验证一下：</p><p>非池化验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ByteBuf byteBuf = Unpooled.copiedBuffer(<span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">6</span>]);</span><br><span class="line">ByteBuf copyBuf = byteBuf.retainedSlice(<span class="number">0</span>,byteBuf.readableBytes());</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled())&#123;</span><br><span class="line">    log.debug(<span class="string">"byteBuf refCnt,&#123;&#125;"</span>,byteBuf.refCnt());</span><br><span class="line">    log.debug(<span class="string">"copyBuf refCnt,&#123;&#125;"</span>,copyBuf.refCnt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/netty/1.png" alt="result"></p><p>池化验证：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PooledByteBufAllocator allocator = PooledByteBufAllocator.DEFAULT;</span><br><span class="line">ByteBuf byteBuf = allocator.directBuffer(<span class="number">10</span>);</span><br><span class="line">ByteBuf copyBuf = byteBuf.retainedSlice(<span class="number">0</span>,byteBuf.readableBytes());</span><br><span class="line"><span class="keyword">if</span> (log.isDebugEnabled())&#123;</span><br><span class="line">    log.debug(<span class="string">"byteBuf refCnt,&#123;&#125;"</span>,byteBuf.refCnt());</span><br><span class="line">    log.debug(<span class="string">"copyBuf refCnt,&#123;&#125;"</span>,copyBuf.refCnt());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/netty/2.png" alt="result"></p><p>最重要的是，我们在netty定义的handler中传递的ByteBuf都是池化的，所以对于此对象的复制与释放就需要格外注意了。</p><h3 id="存在的内存溢出问题"><a href="#存在的内存溢出问题" class="headerlink" title="存在的内存溢出问题"></a>存在的内存溢出问题</h3><p>回到项目中内存溢出的问题，大部分存在调用slice(),retainedSlice()的地方，大都是集中在继承ByteToMessageDecoder类的decode粘包解包逻辑里面。这个解包处理是自定义的，所以我去翻看了一下netty自带的解包器的处理，大概看个最简单的例子：<br>FixedLengthFrameDecoder（它本身也是继承的ByteToMessageDecoder）<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/netty/3.png" alt="result"></p><p>可以看到该解包器用于处理定长的数据报文,in.readableBytes()大于数据解包长度时，我们就读取数据,并通过out.add()将解出的数据包传给下一个handler。而这里调用了readRetainedSlice()方法。read使其读指针右移我们不做讨论，既然它调用了retainedSlice()方法，那么in这个ByteBuf引用计数器必定进行了+1操作，所以我们需要在下一个handler中释放掉这个引用的子缓冲，这样在handler中的in的引用计数器才会保持在1的状态。所以我们会看到Netty在Handler链的最末补了一个TailHandler，如果此时消息仍然是ReferenceCounted类型就会被release掉。一般而言，我们会在下一个handler中继承SimpleChannelHandler类，该类可以自动释放decode方法传进来解包完的msg对象。如果不然，需要我们在业务处理完，手动调用ReferenceCountUtil.release(msg);这样保证资源的释放回收，减少内存溢出的可能。</p><p>项目中的decode解包完是通过netty直接发给其他服务的，所以并不会有下一个handler去释放资源，所有的资源都要在当前class用完释放掉。起初的做法是将所有用到retainedSlice()地方都在最后释放掉，但似乎内存损耗并没有得到显著的遏止。</p><p>再次排查，发现slice()这个方法不太好，虽然slice()方法引用了父缓冲且并不会增加父缓冲的引用计数，所以这个方法用出来，其对象必然不能释放，否则父缓冲就被释放掉了（数据就没了）。再回过头来想想父缓冲是必不能释放的，那这些大量的子引用类型变量就一直存在着，在推到几千万条数据报文的时候，这些可恶的无法释放的变量是不是就是导致内存溢出的罪魁祸首？</p><p>想到这里，我终于明白了为什么netty在自定义解包器的时候用retainedSlice去引用父类型，而不是用slice()方法。虽然slice()方法同样可以将解包结果推给下个handler（而且在下个handler并不需要继承SimpleChannelHandler，换句话说并不需要手动释放msg），但由于缓冲区中ByteBuf对象一直需要保持活跃用于数据传输，slice()方法产生的大量引用不被释放是不能忍受的。因此，每次调用slice()必然会去调用retain()，这样我们才可以去释放这个子引用，很明显简洁程度没有retainedSlice高。另外还是避免代码里出现大量这种深、浅拷贝的引用类型对象（特别还是JVM回收不了，需要手动释放的）。</p>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> netty </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springcloudstream 集成kafka和rabbitmq</title>
      <link href="/springcloudstream-%E9%9B%86%E6%88%90kafka%E5%92%8Crabbitmq.html"/>
      <url>/springcloudstream-%E9%9B%86%E6%88%90kafka%E5%92%8Crabbitmq.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>业务中不同消息中间件的切换，需要修改大量的代码，增加了业务开发者的负担。所以我们需要寻求一种解决方案用来兼容多种消息中间件，springcloudstream就是一个很好的选择，它提供许多可以简化消息驱动微服务应用程序编写的抽象和原语，目前springcloudstream支持的binder有RabbitMQ、Apache Kafka、Amazon Kinesis、Google PubSub等。在这里用springcloudstream编写简单的demo同时集成kafka和rabbitmq,验证消息中间件的可用性。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>创建一个springboot工程,并添加核心jar包:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-stream-kafka&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-stream&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>其他依赖</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">        &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-stream-test-support&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;Hoxton.SR1&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="yml配置"><a href="#yml配置" class="headerlink" title="yml配置"></a>yml配置</h3><p>配置文件是spingcloudstream的核心，这样有利于消息组件的变更。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">18080</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  application:</span><br><span class="line">    name: msg-integrate</span><br><span class="line">  cloud:</span><br><span class="line">    stream:</span><br><span class="line">      bindings:</span><br><span class="line">        mq_output:     #自定义消息通道（默认output/input）</span><br><span class="line">          binder: rabbit-demo  #指定要连接binders中kafka或rabbitmq</span><br><span class="line">          destination: mq-dest  #kafka中的topic  rabbit中的exchange</span><br><span class="line">          content-type: text/plain  #消息发送类型 json格式则为application/json</span><br><span class="line">        mq_input:</span><br><span class="line">          binder: rabbit-demo</span><br><span class="line">          destination: mq-dest</span><br><span class="line">          content-type: text/plain   #消息接收类型</span><br><span class="line">          group: mq-cus   #消息分组 防止多个实例下的重复消费</span><br><span class="line">        kafka_output:</span><br><span class="line">          binder: kafka-demo</span><br><span class="line">          destination: kafka-dest</span><br><span class="line">          content_type: text/plain</span><br><span class="line">        kafka_input:</span><br><span class="line">          binder: kafka-demo</span><br><span class="line">          destination: kafka-dest</span><br><span class="line">          content_type: text/plain</span><br><span class="line">          group: kafka-cus</span><br><span class="line">          listener:</span><br><span class="line">            concurrency: 3 #根据分区决定消费线程数</span><br><span class="line">          consumer:</span><br><span class="line">            group-id: kafka-consumer</span><br><span class="line">            enable-auto-commit: <span class="keyword">true</span></span><br><span class="line">            auto-offset-reset: earliest #从提交的offset开始消费</span><br><span class="line">            max-poll-records: <span class="number">1000</span></span><br><span class="line">      binders:</span><br><span class="line">        kafka-demo:   #kafka配置</span><br><span class="line">          type: kafka</span><br><span class="line">          environment:</span><br><span class="line">            spring:</span><br><span class="line">              cloud:</span><br><span class="line">                stream:</span><br><span class="line">                  kafka:</span><br><span class="line">                    binder:</span><br><span class="line">                      brokers: ip:port #集群以，分开</span><br><span class="line">                      auto-add-partitions: true   #根据需要自动创建新分区</span><br><span class="line">                      auto-create-topics: true    #自动创建主题 若为false且主题不存在 binder无法启动</span><br><span class="line">                      min-partition-count: 1      #仅在设置autoCreateTopics或autoAddPartitions时有效 全局分区的最小个数</span><br><span class="line">        rabbit-demo:  #rabbit配置</span><br><span class="line">          type: rabbit</span><br><span class="line">          environment:</span><br><span class="line">            spring:</span><br><span class="line">              rabbitmq:</span><br><span class="line">                addresses: ip</span><br><span class="line">                port: <span class="number">5672</span></span><br><span class="line">                username: admin</span><br><span class="line">                password: admin</span><br></pre></td></tr></table></figure><p>binders为不同消息组件的配置，在自定义消息通道时可以指定配置的消息binder,具体说明标注于yml文件上。</p><h3 id="自定义消息通道"><a href="#自定义消息通道" class="headerlink" title="自定义消息通道"></a>自定义消息通道</h3><p>springcloudstream有默认通道（input,out）,而配置文件中的mq_output、mq_input、kafka_output、kafka_input为代码中自定义的消息通道</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:04</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">KafkaChannel</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//kafka消息通道</span></span><br><span class="line">    String KAFKA_OUT_PUT = <span class="string">"kafka_output"</span>;</span><br><span class="line"></span><br><span class="line">    String KAFKA_IN_PUT = <span class="string">"kafka_input"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(KAFKA_OUT_PUT)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">kafkaOutput</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="meta">@Input</span>(KAFKA_IN_PUT)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">kafkaInput</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 10:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MqChannel</span> </span>&#123;</span><br><span class="line">    <span class="comment">//rabbitmq 消息生产者通道</span></span><br><span class="line">    String MQ_OUT_PUT = <span class="string">"mq_output"</span>;</span><br><span class="line">    <span class="comment">//消费者通道</span></span><br><span class="line">    String MQ_IN_PUT = <span class="string">"mq_input"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Output</span>(MQ_OUT_PUT)</span><br><span class="line">    <span class="function">MessageChannel <span class="title">OutPut</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Input</span>(MQ_IN_PUT)</span><br><span class="line">    <span class="function">SubscribableChannel <span class="title">InPut</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写消息的生产者"><a href="#编写消息的生产者" class="headerlink" title="编写消息的生产者"></a>编写消息的生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:53</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableBinding</span>(KafkaChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">KafkaMsgProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaChannel source;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送一个Message到此频道。如果消息发送成功，则该方法返回true。</span></span><br><span class="line"><span class="comment">     * 如果由于非致命原因而无法发送消息，则该方法返回false。</span></span><br><span class="line"><span class="comment">     * 如果发生不可恢复的错误，该方法还可能引发RuntimeException</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> msg</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> source.kafkaOutput().send(MessageBuilder.withPayload(msg).setHeader(<span class="string">"flag"</span>,<span class="string">"test"</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableBinding</span>(MqChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqMsgProducer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Output</span>(MqChannel.MQ_OUT_PUT)</span><br><span class="line">    <span class="keyword">private</span> MessageChannel channel;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">sendMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> channel.send(MessageBuilder.withPayload(msg).build());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写消息的消费者"><a href="#编写消息的消费者" class="headerlink" title="编写消息的消费者"></a>编写消息的消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:54</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableBinding</span>(KafkaChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">KafkaMsgConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(value = KafkaChannel.KAFKA_IN_PUT,condition = <span class="string">"headers['flag']=='test'"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieve0</span><span class="params">(Object payload)</span></span>&#123;</span><br><span class="line">        log.info(<span class="string">"kafka receive &#123;&#125;"</span>,payload);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@EnableBinding</span>(MqChannel<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MqMsgConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@StreamListener</span>(MqChannel.MQ_IN_PUT)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">messageInPut</span><span class="params">(Message&lt;String&gt; message)</span> </span>&#123;</span><br><span class="line">        log.info(<span class="string">"rabbit receive：&#123;&#125;"</span>,message.getPayload());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里demo就已经完成了springcloudstream对kafka和rabbitmq消息收发的处理。整个工程只需要简单配置消息组件的可选项，并且完全屏蔽了它的底层实现，方便迁移。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>为了验证程序的正确性，编写controller层相关代码，然后用postman进行测试。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:17</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaMsgProducer kafkaMsgProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/testKafka"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testKafka</span><span class="params">(@RequestParam(<span class="string">"msg"</span>)</span>String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> kafkaMsgProducer.sendMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/31 11:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MqController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MqMsgProducer mqMessageProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/testMq"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">testMq</span><span class="params">(@RequestParam(<span class="string">"msg"</span>)</span>String msg)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mqMessageProducer.sendMsg(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调试结果"><a href="#调试结果" class="headerlink" title="调试结果"></a>调试结果</h3><p>kafka：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/springcloudstream/1.png" alt="result"><br>rabbitmq：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/springcloudstream/2.png" alt="result"><br>控制台输出：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/springcloudstream/3.png" alt="result"></p>]]></content>
      
      
      <categories>
          
          <category> spring </category>
          
          <category> springcloudstream </category>
          
          <category> kafka </category>
          
          <category> rabbitmq </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> spring </tag>
            
            <tag> springcloudstream </tag>
            
            <tag> kafka </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>netty实现tcp和websocket之间的通信</title>
      <link href="/netty%E5%AE%9E%E7%8E%B0tcp%E5%92%8Cwebsocket%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1.html"/>
      <url>/netty%E5%AE%9E%E7%8E%B0tcp%E5%92%8Cwebsocket%E4%B9%8B%E9%97%B4%E7%9A%84%E9%80%9A%E4%BF%A1.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>公司要求做一个中间层，用来实现pos机和web端之间的通信。由于年前做通信网关的时候，我接触了些netty的皮毛，深知netty在通信编程中的地位以及强大的api实现，所以这次我也准备用netty来实现此功能。</p><h2 id="netty代码实现"><a href="#netty代码实现" class="headerlink" title="netty代码实现"></a>netty代码实现</h2><p>首先根据官网demo写一个主类用于监听pos机和web端的接入</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:      sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:        2020/3/25 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 服务启动类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketServer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SocketServer</span><span class="params">(<span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        EventLoopGroup bossGroup = <span class="keyword">new</span> NioEventLoopGroup(); <span class="comment">// (1)EpollEventLoop</span></span><br><span class="line">        EventLoopGroup workerGroup = <span class="keyword">new</span> NioEventLoopGroup();<span class="comment">//EpollEventLoopGroup</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ServerBootstrap b = <span class="keyword">new</span> ServerBootstrap(); <span class="comment">// (2)</span></span><br><span class="line">            <span class="comment">//开启内存泄漏调试</span></span><br><span class="line">            ResourceLeakDetector.setLevel(ResourceLeakDetector.Level.ADVANCED);</span><br><span class="line">            b.group(bossGroup, workerGroup)</span><br><span class="line">                    .channel(NioServerSocketChannel<span class="class">.<span class="keyword">class</span>) // (3)</span></span><br><span class="line"><span class="class">                    .<span class="title">childHandler</span>(<span class="title">new</span> <span class="title">ChannelInitializer</span>&lt;<span class="title">SocketChannel</span>&gt;() </span>&#123; <span class="comment">// (4)</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initChannel</span><span class="params">(SocketChannel ch)</span> </span>&#123;</span><br><span class="line">                            ChannelPipeline pipeline = ch.pipeline();</span><br><span class="line">                            <span class="comment">//pipeline.addLast(new ReadTimeoutHandler(60)); // 长时间不写会断</span></span><br><span class="line">                            <span class="comment">// ====================== 增加心跳支持 start    ======================</span></span><br><span class="line">                            <span class="comment">// 针对客户端，如果在3分钟时没有向服务端发送读写心跳(ALL)，则主动断开</span></span><br><span class="line">                            <span class="comment">// 如果是读空闲或者写空闲，不处理</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> IdleStateHandler(NETTY_READ_TIMEOUT, NETTY_WRITE_TIMEOUT, NETTY_ALL_TIMEOUT));</span><br><span class="line">                            <span class="comment">// 自定义的空闲状态检测</span></span><br><span class="line">                            <span class="comment">//判断是websocket 还是普通socket</span></span><br><span class="line">                            <span class="comment">//如果是websocket 则添加HttpServerCodec()等   否则添加new ProtobufDecoder（）等</span></span><br><span class="line">                            pipeline.addLast(<span class="keyword">new</span> SocketChooseHandler());</span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .option(ChannelOption.SO_BACKLOG, <span class="number">128</span>)          <span class="comment">// (5)</span></span><br><span class="line">                    .childOption(ChannelOption.SO_KEEPALIVE, <span class="keyword">true</span>); <span class="comment">// (6)</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果需要绑定多个端口 保留</span></span><br><span class="line">            <span class="comment">//List&lt;ChannelFuture&gt; futures = new ArrayList&lt;&gt;();</span></span><br><span class="line">            <span class="comment">//futures.add(b.bind(8080));</span></span><br><span class="line">            <span class="comment">//futures.add(b.bind(8081));</span></span><br><span class="line">            <span class="comment">//for (ChannelFuture f : futures) &#123;</span></span><br><span class="line">            <span class="comment">//    f.channel().closeFuture().sync();</span></span><br><span class="line">            <span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绑定端口，开始接收进来的连接</span></span><br><span class="line">            ChannelFuture f = b.bind(port).sync(); <span class="comment">// (7)</span></span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"Server start listen at "</span> + port );</span><br><span class="line">            <span class="comment">// 等待服务器  socket 关闭 。</span></span><br><span class="line">            <span class="comment">// 在这个例子中，这不会发生，但你可以优雅地关闭你的服务器。</span></span><br><span class="line">            f.channel().closeFuture().sync();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            workerGroup.shutdownGracefully();</span><br><span class="line">            bossGroup.shutdownGracefully();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> port;</span><br><span class="line">        <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            port = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            port = <span class="number">8080</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> SocketServer(port).run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NETTY_READ_TIMEOUT, NETTY_WRITE_TIMEOUT, NETTY_ALL_TIMEOUT是读写超时时间,可以根据需要自行设置。SocketChooseHandler是自己定义的handler处理类，主要用来区分不同的通信协议。<br>下面是SocketChooseHandler代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:      sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:        2020/3/25 16:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 区分tcpsocket和websocket</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SocketChooseHandler</span> <span class="keyword">extends</span> <span class="title">ByteToMessageDecoder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认暗号长度为23(随便取吧)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_LENGTH = <span class="number">23</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * WebSocket握手的协议前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String WEBSOCKET_PREFIX = <span class="string">"GET /"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> PipelineAdd pipelineAdd = <span class="keyword">new</span> PipelineAdd();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">decode</span><span class="params">(ChannelHandlerContext ctx, ByteBuf in, List&lt;Object&gt; out)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String protocol = getBufStart(in);</span><br><span class="line">        <span class="keyword">if</span> (protocol.startsWith(WEBSOCKET_PREFIX)) &#123;</span><br><span class="line">            <span class="comment">//对于 webSocket ，不设置超时断开</span></span><br><span class="line">            ctx.pipeline().remove(IdleStateHandler<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            pipelineAdd.websocketAdd(ctx);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ByteBuf buf = Unpooled.copiedBuffer(<span class="string">"$$"</span>.getBytes());</span><br><span class="line">            ctx.pipeline().addLast(<span class="keyword">new</span> DelimiterBasedFrameDecoder(<span class="number">1024</span>, buf));</span><br><span class="line">            ctx.pipeline().addLast(<span class="keyword">new</span> StringDecoder());</span><br><span class="line">            ctx.pipeline().addLast(<span class="keyword">new</span> StringEncoder());</span><br><span class="line">            ctx.pipeline().addLast(<span class="keyword">new</span> ConnectorIdleState());</span><br><span class="line">            ctx.pipeline().addLast(<span class="string">"devicehandler"</span>,<span class="keyword">new</span> DeviceServerHandler());</span><br><span class="line">        &#125;</span><br><span class="line">        in.resetReaderIndex();</span><br><span class="line">        ctx.pipeline().remove(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getBufStart</span><span class="params">(ByteBuf in)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> length = in.readableBytes();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (length &gt; MAX_LENGTH) &#123;</span><br><span class="line">            length = MAX_LENGTH;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 标记读位置</span></span><br><span class="line">        in.markReaderIndex();</span><br><span class="line">        <span class="keyword">byte</span>[] content = <span class="keyword">new</span> <span class="keyword">byte</span>[length];</span><br><span class="line">        in.readBytes(content);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">"&#123;&#125;,已上线"</span>,ctx.channel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为websocket协议请求头会带上’GET /‘标志，所以通过getBufStart方法把tcp和web端的消息做个区分，不同的协议走不同的handler处理类。这里的DelimiterBasedFrameDecoder处理粘包，因为我们的消息格式设计的很简单，消息类型会以”$$“结尾，所以这里用netty自带的解析器就可以了。</p><h3 id="websocket处理"><a href="#websocket处理" class="headerlink" title="websocket处理"></a>websocket处理</h3><p>netty有相关处理websocket握手协议的api,当然这也是我选择用netty作为技术栈的原因。通过上文的pipelineAdd.websocketAdd(ctx)处理websocket协议，websocketAdd的方法是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:      sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:        2020/3/25 16:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: websoceket协议添加请求头处理handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PipelineAdd</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">websocketAdd</span><span class="params">(ChannelHandlerContext ctx)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HttpServerCodec：将请求和应答消息解码为HTTP消息</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"http-codec"</span>,<span class="keyword">new</span> HttpServerCodec());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// HttpObjectAggregator：将HTTP消息的多个部分合成一条完整的HTTP消息</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"aggregator"</span>,<span class="keyword">new</span> HttpObjectAggregator(<span class="number">65535</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ChunkedWriteHandler：向客户端发送HTML5文件,文件过大会将内存撑爆</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"http-chunked"</span>,<span class="keyword">new</span> ChunkedWriteHandler());</span><br><span class="line"></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"WebSocketAggregator"</span>,<span class="keyword">new</span> WebSocketFrameAggregator(<span class="number">65535</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析uri 带?参数</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"url-explained"</span>,<span class="keyword">new</span> CustomUrlHandler());</span><br><span class="line">        <span class="comment">//用于处理websocket, /ws为访问websocket时的uri</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"ProtocolHandler"</span>, <span class="keyword">new</span> WebSocketServerProtocolHandler(<span class="string">"/ws"</span>));</span><br><span class="line">        <span class="comment">//消息处理</span></span><br><span class="line">        ctx.pipeline().addLast(<span class="string">"webhandler"</span>,<span class="keyword">new</span> WebServerHandler());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中CustomUrlHandler和WebServerHandler是自己定义的handler，其他是api实现。<br>CustomUrlHandler是用于web端的登录校验用的，伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/25 16:14</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 请求url参数解析</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomUrlHandler</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置web端登录超时时间为10分钟 防止恶意重试</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> OVER_TIME = <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 只针对FullHttpRequest类型的做处理，其它类型的自动放过</span></span><br><span class="line">        <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> FullHttpRequest) &#123;</span><br><span class="line">            FullHttpRequest request = (FullHttpRequest) msg;</span><br><span class="line">            String uri = request.uri();</span><br><span class="line">            <span class="keyword">int</span> idx = uri.indexOf(<span class="string">"?"</span>);</span><br><span class="line">            <span class="keyword">if</span> (idx &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                String query = uri.substring(idx + <span class="number">1</span>);</span><br><span class="line">                <span class="comment">// uri中参数的解析使用的是jetty-util包，其性能比自定义及正则性能高。</span></span><br><span class="line">                MultiMap values = <span class="keyword">new</span> MultiMap();</span><br><span class="line">                UrlEncoded.decodeTo(query, values, <span class="string">"UTF-8"</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//根据约定算法 -- 登录校验</span></span><br><span class="line">                <span class="keyword">boolean</span> isValid = loginValidate(values);</span><br><span class="line">                <span class="keyword">if</span> (isValid) &#123;</span><br><span class="line">                    <span class="comment">//登录成功-保存当前登录信息</span></span><br><span class="line">                    saveWebInfo(***);</span><br><span class="line"></span><br><span class="line">                    request.setUri(uri.substring(<span class="number">0</span>, idx));</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//验证失败 关闭连接</span></span><br><span class="line">                    ctx.disconnect();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.fireChannelRead(msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span> sillybilly</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span> values Verification validity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span> 2020/3/4</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span> [values, ts]</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">loginValidate</span><span class="params">(MultiMap values)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//ts超时？</span></span><br><span class="line">        <span class="keyword">long</span> parmTime = StringToLong(ts).orElseGet(() -&gt; <span class="number">0L</span>);</span><br><span class="line">        <span class="comment">//long diffTime = Clock.systemUTC().millis() - parmTime;</span></span><br><span class="line">        <span class="keyword">long</span> current = Clock.systemUTC().millis();</span><br><span class="line">        <span class="keyword">long</span> diffTime = current - parmTime;</span><br><span class="line">        <span class="keyword">if</span> (diffTime &gt; OVER_TIME) &#123;</span><br><span class="line">            log.info(<span class="string">"CustomUrlHandler.loginValidate 验证超时,&#123;&#125;"</span>, ts);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//根据约定算法验证登录者身份信息 成功返回true 失败false</span></span><br><span class="line">        <span class="keyword">return</span> ?;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>WebServerHandler是handler的尾链，用来处理成功登录的web端与pos机通信，web端信息和pos机信息分别存放在两个不同本地缓存中，根据登录的身份码完成一对一通信。<br>WebServerHandler伪代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/25 16:16</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: web端tailhandler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebServerHandler</span> <span class="keyword">extends</span> <span class="title">SimpleChannelInboundHandler</span>&lt;<span class="title">WebSocketFrame</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// WebSocket消息处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (msg <span class="keyword">instanceof</span> WebSocketFrame) &#123;</span><br><span class="line">                String webSocketInfo = ((TextWebSocketFrame) msg).text().trim();</span><br><span class="line">                log.debug(<span class="string">"receive webSocket Info:&#123;&#125;"</span>, webSocketInfo);</span><br><span class="line">                <span class="comment">//找到与其对应的tcp连接并发送消息</span></span><br><span class="line">                tcpInfO = findTcpInfo()</span><br><span class="line">                ChannelWriteUtils.channelWrite(tcpInfO,webSocketInfo);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            log.info(<span class="string">"WebServerHandler.channelRead 非心跳，非规范业务消息类型"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"client: "</span> + ctx.channel() + <span class="string">" disconnect"</span>);</span><br><span class="line">        <span class="comment">//同时删除对应本地缓存信息</span></span><br><span class="line">        deleteCache(***);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        cause.printStackTrace();</span><br><span class="line">        <span class="keyword">if</span> (ctx.channel().isActive()) &#123;</span><br><span class="line">            ctx.channel().close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">channelRead0</span><span class="params">(ChannelHandlerContext channelHandlerContext, WebSocketFrame webSocketFrame)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="tcp处理"><a href="#tcp处理" class="headerlink" title="tcp处理"></a>tcp处理</h3><p>tcp端需要处理心跳连接，每次心跳都需要进行缓存。心跳即为ping-pong处理，pos机每次ping结束，netty服务端都需要发送一个pong信息，以便tcp和netty都能确定双方的存活状态。伪代码大概如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>:      sillybilly</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:        2020/5/27 13:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 心跳发送处理</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>:     1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectorIdleState</span> <span class="keyword">extends</span> <span class="title">ChannelInboundHandlerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> </span>&#123;</span><br><span class="line">        String heartBeats = String.valueOf(msg);</span><br><span class="line">        <span class="comment">//json字符串不合法 解析失败？</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> 发送的信息为心跳信息&#123;</span><br><span class="line">                <span class="comment">//更新redis缓存 pos机心跳的时间戳</span></span><br><span class="line">                updataHeartBeatsTs();</span><br><span class="line">                <span class="comment">//逻辑处理 存入pos机代码</span></span><br><span class="line">                checkAndSave(ctx.channel());</span><br><span class="line">                <span class="comment">//将pong写回pos机</span></span><br><span class="line">                writeBackHeartBeats(sth.);</span><br><span class="line">                <span class="comment">//释放bytebuf</span></span><br><span class="line">                ReferenceCountUtil.release(msg);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> 此前已登录&#123;</span><br><span class="line">                <span class="comment">//将信息转给下个handler</span></span><br><span class="line">                    ctx.fireChannelRead(msg);</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    ReferenceCountUtil.release(msg);</span><br><span class="line">                    log.info(<span class="string">"ConnectorIdleState.channelRead 心跳未接入成功"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e)&#123;</span><br><span class="line">            ReferenceCountUtil.release(msg);</span><br><span class="line">            log.warn(<span class="string">"ConnectorIdleState.channelRead 非心跳，非规范业务消息类型"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.debug(<span class="string">"client: "</span> + ctx.channel().remoteAddress() + <span class="string">" disconnect"</span>);</span><br><span class="line">        <span class="comment">//清缓存</span></span><br><span class="line">        deleteCache(***);</span><br><span class="line">        <span class="keyword">super</span>.channelInactive(ctx);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>我们可以写一个tcp客户端和web端测试一下，tcp客户端可以用netty编写，也可以用直接用Telent连接，这里忽略。<br>websocket:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;WebSocket客户端&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> socket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (window.WebSocket) &#123;</span><br><span class="line">    <span class="comment">//？后面携带自身信息，包含当前时间戳</span></span><br><span class="line">        socket = <span class="keyword">new</span> WebSocket(<span class="string">"ws://localhost:8080/ws?********"</span>);</span><br><span class="line"></span><br><span class="line">        socket.onmessage = function (event) &#123;</span><br><span class="line">            <span class="keyword">var</span> ta = document.getElementById(<span class="string">'responseText'</span>);</span><br><span class="line">            ta.value = ta.value + <span class="string">"\n"</span> + event.data;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        socket.onopen = function (event) &#123;</span><br><span class="line">            <span class="keyword">var</span> ta = document.getElementById(<span class="string">'responseText'</span>)</span><br><span class="line">            ta.value = <span class="string">"连接开启"</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.onclose = function (event) &#123;</span><br><span class="line">            <span class="keyword">var</span> ta = document.getElementById(<span class="string">'responseText'</span>);</span><br><span class="line">            ta.value = ta.value + <span class="string">"\n"</span> + <span class="string">"连接关闭"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">'浏览器不支持WebSocket！'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">send</span><span class="params">(message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!window.WebSocket) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (socket.readyState == WebSocket.OPEN) &#123;</span><br><span class="line">            socket.send(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            alert(<span class="string">"连接尚未开启"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;form onsubmit=<span class="string">"return false;"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;textarea name="message" style="width: 400px;height:200px"&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"button"</span> value=<span class="string">"发送数据"</span> onclick=<span class="string">"send(this.form.message.value)"</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h3&gt;服务端输出：&lt;/h3&gt;</span><br><span class="line"></span><br><span class="line">    &lt;textarea id="responseText" style="width: 400px;height: 300px;"&gt;&lt;/textarea&gt;</span><br><span class="line"></span><br><span class="line">    &lt;input type=<span class="string">"button"</span> onclick=<span class="string">"javascript: document.getElementById('responseText').value=''"</span> value=<span class="string">"清除内容"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> netty </category>
          
      </categories>
      
      
        <tags>
            
            <tag> netty </tag>
            
            <tag> tcp </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java8之CompletableFuture初识</title>
      <link href="/java8%E4%B9%8BCompletableFuture%E5%88%9D%E8%AF%86.html"/>
      <url>/java8%E4%B9%8BCompletableFuture%E5%88%9D%E8%AF%86.html</url>
      
        <content type="html"><![CDATA[<h2 id="提要"><a href="#提要" class="headerlink" title="提要"></a>提要</h2><p>在jdk5中增加了很多新的并发处理机制，对于多线程处理有了很大的优化。我们通常会选择通过Future接口构建异步的应用，因为在之前的多线程的实现中，不管是继承thread类还是实现runnable接口，都无法保证获取到之前的执行结果。我们现在可以通过实现Callable接口，并用Future来接收多线程的执行结果。</p><h2 id="Callable处理demo"><a href="#Callable处理demo" class="headerlink" title="Callable处理demo"></a>Callable处理demo</h2><p>通过kafka多线程消费举个例子(伪代码):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> threads)</span> </span>&#123;</span><br><span class="line"><span class="comment">//threads核心数 10-最大线程数 0L-空闲等待时间</span></span><br><span class="line"><span class="keyword">var</span> executors = <span class="keyword">new</span> ThreadPoolExecutor(threads, <span class="number">10</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line"><span class="keyword">new</span> ArrayBlockingQueue(<span class="number">1000</span>), <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"><span class="comment">//启动一个子线程来监听消息</span></span><br><span class="line">Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"><span class="comment">/*采用循环不断从kafka里捞数据*/</span></span><br><span class="line">ConsumerRecords&lt;String, String&gt; records = <span class="comment">//todo 返回数据;</span></span><br><span class="line">List&lt;Callable&lt;String&gt;&gt; consumerWork = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">final</span> ConsumerRecord record : records) &#123;</span><br><span class="line">consumerWork.add(writeData(record));</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Future&lt;String&gt;&gt; futures = executors.invokeAll(consumerWork);</span><br><span class="line"><span class="comment">//拿到futures结果</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">log.error(<span class="string">"Test.execute()-&gt;&#123;&#125;"</span>,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>下面是实现Callable的耗时任务(伪代码):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Callable&lt;String&gt; <span class="title">writeData</span><span class="params">(ConsumerRecord record)</span> </span>&#123;</span><br><span class="line">Callable&lt;String&gt; run = <span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO 耗时任务逻辑</span></span><br><span class="line">    <span class="comment">/*业务处理*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">   run();</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">   <span class="keyword">return</span> run;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看起来挺不错的，可是当我们真正去调用get()方法时，当前线程会去等待异步任务的执行。换言之，主线程会被阻塞，大大增加了异步操作的时耗。</p><h2 id="CompletableFuture使用"><a href="#CompletableFuture使用" class="headerlink" title="CompletableFuture使用"></a>CompletableFuture使用</h2><h3 id="实际开发场景"><a href="#实际开发场景" class="headerlink" title="实际开发场景"></a>实际开发场景</h3><ol><li>针对Future的完成事件，我们希望可以得到它完成后的返回结果，又不想阻塞主线程的运行</li><li>面对Future集合来讲，很难将List中的future结果依赖关系描述出来，我们希望在所有future完成结束后去做一些事情</li><li>在异步计算中，存在某两个业务处理独立计算，而其中一个依赖前一个的运算结果。<br>如上的几种场景，是future的短板，它本身缺乏一种观察者模式去监听线程处理状态从而得到回调结果。面对这样的局限性，在java8中CompletableFuture提供了较为不错的api实现</li></ol><h3 id="CompletableFuture常见API解析"><a href="#CompletableFuture常见API解析" class="headerlink" title="CompletableFuture常见API解析"></a>CompletableFuture常见API解析</h3><p>注：所有没有指定Executor的方法会使用ForkJoinPool.commonPool() 作为它的线程池执行异步代码</p><h4 id="创建异步任务runAsync和supplyAsync"><a href="#创建异步任务runAsync和supplyAsync" class="headerlink" title="创建异步任务runAsync和supplyAsync"></a>创建异步任务runAsync和supplyAsync</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; var0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asyncSupplyStage(asyncPool, var0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">supplyAsync</span><span class="params">(Supplier&lt;U&gt; var0, Executor var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asyncSupplyStage(screenExecutor(var1), var0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable var0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asyncRunStage(asyncPool, var0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">runAsync</span><span class="params">(Runnable var0, Executor var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> asyncRunStage(screenExecutor(var1), var0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runAsync方法没有返回值，异步操作完就结束了,而supplyAsync方法类似submit方法，支持返回值。</p><h4 id="异步任务执行完时的回调方法whenComplete和exceptionally"><a href="#异步任务执行完时的回调方法whenComplete和exceptionally" class="headerlink" title="异步任务执行完时的回调方法whenComplete和exceptionally"></a>异步任务执行完时的回调方法whenComplete和exceptionally</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenComplete</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniWhenCompleteStage((Executor)<span class="keyword">null</span>, var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniWhenCompleteStage(asyncPool, var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">whenCompleteAsync</span><span class="params">(BiConsumer&lt;? <span class="keyword">super</span> T, ? <span class="keyword">super</span> Throwable&gt; var1, Executor var2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniWhenCompleteStage(screenExecutor(var2), var1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> CompletableFuture&lt;T&gt; <span class="title">exceptionally</span><span class="params">(Function&lt;Throwable, ? extends T&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniExceptionallyStage(var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这些方法都是上述创建的异步任务完成后 (也可能是抛出异常后结束) 所执行的方法。whenComplete和whenCompleteAsync方法的区别在于：<br>    &emsp;前者是由上面的线程继续执行，而后者是将whenCompleteAsync的任务继续交给线程池去做决定。<br>exceptionally则是上面的任务执行抛出异常后所要执行的方法。<br>值得注意的是：哪怕supplyAsync抛出了异常，whenComplete也会执行，意思就是，只要supplyAsync执行结束，它就会执行，不管是不是正常执行完。exceptionally只有在异常的时候才会执行。其实，在whenComplete的参数内e就代表异常了，判断它是否为null，就可以判断是否有异常，只不过这样的做法，我们不提倡。whenComplete和exceptionally这两个谁在前，谁先执行。 此类的回调方法，哪怕主线程已经执行结束，回调方法依然可以继续等待异步任务执行完成再触发得到执行结果。</p><h4 id="thenApply和handle方法"><a href="#thenApply和handle方法" class="headerlink" title="thenApply和handle方法"></a>thenApply和handle方法</h4><p>如果两个任务之间有依赖关系，比如B任务依赖于A任务的执行结果，那么就可以使用这两个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApply</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniApplyStage((Executor)<span class="keyword">null</span>, var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniApplyStage(asyncPool, var1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">thenApplyAsync</span><span class="params">(Function&lt;? <span class="keyword">super</span> T, ? extends U&gt; var1, Executor var2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniApplyStage(screenExecutor(var2), var1);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handle</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniHandleStage((Executor)<span class="keyword">null</span>, var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; var1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniHandleStage(asyncPool, var1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;U&gt; <span class="function">CompletableFuture&lt;U&gt; <span class="title">handleAsync</span><span class="params">(BiFunction&lt;? <span class="keyword">super</span> T, Throwable, ? extends U&gt; var1, Executor var2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.uniHandleStage(screenExecutor(var2), var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法，效果是一样的。区别在于，当A任务执行出现异常时，thenApply方法不会执行，而handle 方法一样会去执行，因为在handle方法里，我们可以处理异常，而前者不行。<br>这里延伸两个方法thenAccept和thenRun。其实和上面两个方法差不多，都是等待前面一个任务执行完 再执行。区别就在于thenAccept接收前面任务的结果，且无需return。而thenRun只要前面的任务执行完成，它就执行，不关心前面的执行结果如何如果前面的任务抛了异常，非正常结束，这两个方法是不会执行的，所以处理不了异常情况。</p><h4 id="allOf方法"><a href="#allOf方法" class="headerlink" title="allOf方法"></a>allOf方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CompletableFuture&lt;Void&gt; <span class="title">allOf</span><span class="params">(CompletableFuture... var0)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> andTree(var0, <span class="number">0</span>, var0.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，不止存在两个异步任务，可能有几十上百个。我们需要等这些任务都完成后，再来执行相应的操作。那怎么集中监听所有任务执行结束与否呢？ allOf方法可以帮我们完成<br>它接收一个可变入参，既可以接收CompletableFuture单个对象，可以接收其数组对象。</p><h2 id="代码重构"><a href="#代码重构" class="headerlink" title="代码重构"></a>代码重构</h2><p>大致了解jdk8中对多线程异步流处理之后，我们对刚开始的代码进一步修改（对应业务-&gt;某两个业务处理独立计算，而其中一个依赖前一个的运算结果）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(<span class="keyword">int</span> threads)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> executors = <span class="keyword">new</span> ThreadPoolExecutor(threads, <span class="number">10</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue(<span class="number">1000</span>), <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123; </span><br><span class="line">            <span class="comment">/*采用循环不断从kafka里捞数据*/</span></span><br><span class="line">            ConsumerRecords&lt;String, String&gt; records = <span class="comment">//todo 返回数据;</span></span><br><span class="line">            <span class="comment">//基于异步的流式编程</span></span><br><span class="line">            Flux.fromIterable(records)</span><br><span class="line">                    .doOnNext(a -&gt; CompletableFuture.supplyAsync(()-&gt;&#123;   <span class="comment">//创建异步任务</span></span><br><span class="line">                        <span class="keyword">return</span> parse1(a);  <span class="comment">//todo 处理d中数据</span></span><br><span class="line">                    &#125;,executors).thenAcceptAsync(b-&gt;parse2(b)))  <span class="comment">//取得parse1处理后的数据进行下一步处理</span></span><br><span class="line">                    .subscribe();  <span class="comment">//订阅处理流</span></span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h2><table><thead><tr><th align="center"></th><th align="center">Futrue</th><th align="center">FutureTask</th><th align="center">CompletionService</th><th align="center">CompletableFuture</th></tr></thead><tbody><tr><td align="center">原理</td><td align="center">Futrue接口</td><td align="center">RunnableFuture的实现类</td><td align="center">阻塞队列+FutureTask接口</td><td align="center">Future<T>CompletionStage<T>实现类</td></tr><tr><td align="center">支持任务完成先后顺序</td><td align="center">支持</td><td align="center">未知</td><td align="center">支持</td><td align="center">支持</td></tr><tr><td align="center">异常捕捉</td><td align="center">代码实现</td><td align="center">代码实现</td><td align="center">代码实现</td><td align="center">源生API支持</td></tr><tr><td align="center">建议</td><td align="center">CPU高速轮询，耗资源</td><td align="center">功能不对口，并发任务这一块多套一层</td><td align="center">没有JDK8CompletableFuture之前最好的方案</td><td align="center">API极端丰富，配合流式编程，速度飞起，推荐使用</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> multi-thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ceph对象存储-amasonaws s3 api验证</title>
      <link href="/ceph%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-amasonaws-s3-api%E9%AA%8C%E8%AF%81.html"/>
      <url>/ceph%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8-amasonaws-s3-api%E9%AA%8C%E8%AF%81.html</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>  Ceph的软件库为客户端应用程序对基于RADOS对象的存储系统提供了直接访问，并为Ceph的某些高级功能（包括RADOS块设备（RBD），RADOS网关（RGW）和Ceph文件系统（ CephFS）提供技术支持。其中Ceph对象网关(RGW)是在librados之上构建的对象存储接口，旨在为应用程序提供通往Ceph存储集群的RESTful网关。Ceph对象存储支持两个接口,它同时兼容amazonaws s3和OpenStack swift。本文主要通过s3调用ceph的对象存储功能，验证数据上传下载的稳定性。<br>  在ceph官方上查阅s3的api(java)，其实文档已经很老旧了，用来验证程序可能会出现很多问题，地址:<a href="https://docs.ceph.com/docs/master/radosgw/s3/java/" target="_blank" rel="noopener">ceph官网</a><br>  推荐直接去amazonaws官网找资料，地址:<a href="https://docs.amazonaws.cn/AWSJavaSDK/latest/javadoc/index.html" target="_blank" rel="noopener">amazonaws s3 api</a></p><a id="more"></a><h2 id="AmazonS3-maven相关依赖"><a href="#AmazonS3-maven相关依赖" class="headerlink" title="AmazonS3 maven相关依赖"></a>AmazonS3 maven相关依赖</h2><p>首先创建一个maven工程，添加AmazonAws S3相关jar包</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- AmazonS3对象存储 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.amazonaws&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;aws-java-sdk-s3&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.11.592&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.amazonaws&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;aws-java-sdk-core&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;1.11.592&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">   &lt;groupId&gt;com.google.guava&lt;/groupId&gt;</span><br><span class="line">   &lt;artifactId&gt;guava&lt;/artifactId&gt;</span><br><span class="line">   &lt;version&gt;27.0.1-jre&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="s3-api基本方法"><a href="#s3-api基本方法" class="headerlink" title="s3 api基本方法"></a>s3 api基本方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AmazonawsS3utils</span> </span>&#123;</span><br><span class="line"><span class="comment">//s3用户身份验证accessKey、secretKey 配置信息在yml文件中</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;accessKey:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;secretKey:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line">    <span class="comment">//服务器地址</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;endPoint:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String endPoint;</span><br><span class="line">    <span class="comment">//自定义一个bucket值</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;bucketName:null&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AmazonS3 amazonS3 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> AmazonS3 <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amazonS3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (amazonS3 == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    AWSCredentials credentials = <span class="keyword">new</span> BasicAWSCredentials(accessKey, secretKey);</span><br><span class="line">                    ClientConfiguration clientConfig = <span class="keyword">new</span> ClientConfiguration();</span><br><span class="line">                    clientConfig.setProtocol(Protocol.HTTP);</span><br><span class="line">                    <span class="comment">////设置用于签署此客户端请求的签名算法的名称。如果未设置或显式设置为null，客户端将根据服务和区域的支持的签名算法的配置文件选择使用的签名算法。</span></span><br><span class="line">                    clientConfig.setSignerOverride(<span class="string">"S3SignerType"</span>);</span><br><span class="line">                    amazonS3 = AmazonS3ClientBuilder.standard()</span><br><span class="line">                            .withEndpointConfiguration(<span class="keyword">new</span> AwsClientBuilder.EndpointConfiguration(endPoint, Regions.US_EAST_1.name()))</span><br><span class="line">                            .withPathStyleAccessEnabled(<span class="keyword">true</span>)</span><br><span class="line">                            .withClientConfiguration(clientConfig)</span><br><span class="line">                            .withCredentials(<span class="keyword">new</span> AWSStaticCredentialsProvider(credentials))</span><br><span class="line">                            .build();</span><br><span class="line">                    <span class="keyword">if</span> (!amazonS3.doesBucketExistV2(bucketName)) &#123;</span><br><span class="line">                        amazonS3.createBucket(bucketName);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> amazonS3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(String amazonS3Key, InputStream inputStream, ObjectMetadata objectMetadata)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        PutObjectRequest request = <span class="keyword">new</span> PutObjectRequest(bucketName, amazonS3Key, inputStream, objectMetadata);</span><br><span class="line">        <span class="comment">//设置大小接近100MB.</span></span><br><span class="line">        request.getRequestClientOptions().setReadLimit(<span class="number">1024</span> * <span class="number">1204</span> * <span class="number">100</span>);</span><br><span class="line">        amazonS3.putObject(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">download</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        GetObjectRequest request = <span class="keyword">new</span> GetObjectRequest(bucketName, key);</span><br><span class="line">        S3Object object = amazonS3.getObject(request);</span><br><span class="line">        <span class="keyword">return</span> object.getObjectContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String key, File file)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        amazonS3.getObject(<span class="keyword">new</span> GetObjectRequest(bucketName, key), file);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">downloadLength</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        <span class="keyword">return</span> amazonS3.getObjectMetadata(bucketName, key).getContentLength();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        amazonS3.deleteObject(bucketName, key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ObjectMetadata <span class="title">getObjectMetadata</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        ObjectMetadata objectMetadata = amazonS3.getObjectMetadata(bucketName, key);</span><br><span class="line">        <span class="keyword">return</span> objectMetadata;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> URL <span class="title">getGeneratePresignedUrl</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        GeneratePresignedUrlRequest request = <span class="keyword">new</span> GeneratePresignedUrlRequest(bucketName,key);</span><br><span class="line">        <span class="comment">//一个预签名URL，可用于访问Amazon S3资源，而无需URL用户知道账户的AWS安全凭证</span></span><br><span class="line">        <span class="keyword">return</span> amazonS3.generatePresignedUrl(request);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">        <span class="keyword">boolean</span> b = amazonS3.doesObjectExist(bucketName, key);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExistByKey</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(key)) &#123;</span><br><span class="line">            AmazonS3 amazonS3 = <span class="keyword">this</span>.getConnection();</span><br><span class="line">            <span class="keyword">boolean</span> b = amazonS3.doesObjectExist(bucketName, key);</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="验证上传的可用性和下载稳定性"><a href="#验证上传的可用性和下载稳定性" class="headerlink" title="验证上传的可用性和下载稳定性"></a>验证上传的可用性和下载稳定性</h2><p>首先创建类实现上传功能,并注入AmazonawsS3utils工具类<br>SpeedVerifyService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedVerifyService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmazonawsS3utils amazonawsS3utils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key s3桶键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 源地址路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(String key, String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        FileInputStream stream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        ObjectMetadata data = <span class="keyword">new</span> ObjectMetadata();</span><br><span class="line">        <span class="comment">//大文件上需要预设文件长度，否则会出现outOfMemoryError</span></span><br><span class="line">        data.setContentLength(file.length());</span><br><span class="line">        amazonawsS3utils.upload(key, stream, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过创建Junit测试类上传不同格式的文件，在确保程序正常运行，且数据未丢包的情况下，开始侧重验证下载功能</p><h3 id="单线程验证"><a href="#单线程验证" class="headerlink" title="单线程验证"></a>单线程验证</h3><p>s3提供了不同的下载接口，我们这里直接用getObject(GetObjectRequest getObjectRequest, File destinationFile)指定下载路径下载ceph上的文件。验证程序要求计算下载过程中的最大速率、平均速率以及总耗时。所以需要开启一个子线程来实时计算已下载文件的大小。在原SpeedVerifyService.java添加以下代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: silly-billy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2020/3/20 14:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 上传 下载 删除 测速</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedVerifyService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmazonawsS3utils amazonawsS3utils;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key s3桶键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 源地址路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> FileNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">upload</span><span class="params">(String key, String path)</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        FileInputStream stream = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">        ObjectMetadata data = <span class="keyword">new</span> ObjectMetadata();</span><br><span class="line">        <span class="comment">//大文件上需要预设文件长度，否则会出现outOfMemoryError</span></span><br><span class="line">        data.setContentLength(file.length());</span><br><span class="line">        amazonawsS3utils.upload(key, stream, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除指定桶-键文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        amazonawsS3utils.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载文件</span></span><br><span class="line"><span class="comment">     * key-bucket对应键下对象</span></span><br><span class="line"><span class="comment">     * path本地下载地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> CompletableFuture&lt;Map&lt;String, Double&gt;&gt; showDownloadDetails(String key, String path) &#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(path);</span><br><span class="line">        <span class="comment">//开启一个子线程用于测速</span></span><br><span class="line">        CompletableFuture&lt;Map&lt;String, Double&gt;&gt; future = dowloadListening(key, file);</span><br><span class="line">        <span class="comment">//文件下载</span></span><br><span class="line">        amazonawsS3utils.download(key, file);</span><br><span class="line">        <span class="keyword">return</span> future;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载测速并返回异步结果</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> CompletableFuture&lt;Map&lt;String, Double&gt;&gt; dowloadListening(String key, File file) &#123;</span><br><span class="line">        ThreadFactory namedThreadFactory = <span class="keyword">new</span> ThreadFactoryBuilder()</span><br><span class="line">                .setNameFormat(<span class="string">"test-speed-%d"</span>).build();</span><br><span class="line">        ExecutorService singleThreadPool = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">300</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;(<span class="number">1024</span>), namedThreadFactory, <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">        CompletableFuture&lt;Map&lt;String, Double&gt;&gt; resultFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            Map&lt;String, Double&gt; resultMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                log.info(<span class="string">"测速线程启动,&#123;&#125;"</span>,Thread.currentThread().getName());</span><br><span class="line">                <span class="comment">//文件大小</span></span><br><span class="line">                <span class="keyword">long</span> length = amazonawsS3utils.downloadLength(key);</span><br><span class="line">                <span class="comment">//下载速度集合</span></span><br><span class="line">                List&lt;Double&gt; speeds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="comment">//上一次时间节点</span></span><br><span class="line">                <span class="keyword">long</span> lastTime = Clock.systemUTC().millis();</span><br><span class="line">                <span class="comment">//当前时间节点</span></span><br><span class="line">                <span class="keyword">long</span> currentTime;</span><br><span class="line">                <span class="comment">//上一次文件大小</span></span><br><span class="line">                <span class="keyword">long</span> lastFileSize = <span class="number">0L</span>;</span><br><span class="line">                <span class="comment">//已下载文件大小</span></span><br><span class="line">                <span class="keyword">long</span> currentFileSize;</span><br><span class="line">                <span class="comment">//开始下载时间</span></span><br><span class="line">                <span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="number">0L</span> == startTime)&#123;</span><br><span class="line">                        startTime = Clock.systemUTC().millis();</span><br><span class="line">                    &#125;</span><br><span class="line">                    currentFileSize = file.length();</span><br><span class="line">                    <span class="keyword">if</span> (currentFileSize &gt;= length) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (speeds.isEmpty()) &#123;</span><br><span class="line">                            log.info(<span class="string">"已下载文件"</span>);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        currentTime = Clock.systemUTC().millis();</span><br><span class="line">                        <span class="comment">//单位 kb/s</span></span><br><span class="line">                        <span class="keyword">double</span> speed = (<span class="number">1000</span> * (currentFileSize - lastFileSize)) / (<span class="number">1024</span> * (currentTime - lastTime));</span><br><span class="line">                        speeds.add(speed);</span><br><span class="line">                        log.info(<span class="string">"实时速度：&#123;&#125;kb/s"</span>, speed);</span><br><span class="line">                        log.info(<span class="string">"当前进度：&#123;&#125;%"</span>, (currentFileSize / (<span class="keyword">double</span>) length) * <span class="number">100</span>);</span><br><span class="line">                        <span class="keyword">double</span> consumeTime = (currentTime - startTime) / <span class="number">1000</span>;</span><br><span class="line">                        <span class="keyword">double</span> maxSpeed = speeds.stream().distinct().max(Double::compareTo).get();</span><br><span class="line">                        <span class="keyword">double</span> avgSpeed = speeds.stream().mapToDouble(x -&gt; x).average().getAsDouble();</span><br><span class="line">                        log.info(<span class="string">"下载完成,总耗时：&#123;&#125;s"</span>, consumeTime);</span><br><span class="line">                        log.info(<span class="string">"最大时速：&#123;&#125;kb/s"</span>, maxSpeed);</span><br><span class="line">                        log.info(<span class="string">"平均时速：&#123;&#125;kb/s"</span>, avgSpeed);</span><br><span class="line">                        resultMap.put(<span class="string">"耗时"</span>, consumeTime);</span><br><span class="line">                        resultMap.put(<span class="string">"最大下载速度"</span>, maxSpeed);</span><br><span class="line">                        resultMap.put(<span class="string">"平均下载速度"</span>, (<span class="keyword">double</span>) Math.round(avgSpeed * <span class="number">100</span>) / <span class="number">100</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    currentTime = Clock.systemUTC().millis();</span><br><span class="line">                    <span class="keyword">long</span> size = currentFileSize - lastFileSize;</span><br><span class="line">                    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="comment">//未下载</span></span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">double</span> speed = (<span class="number">1000</span> * size) / (<span class="number">1024</span> * (currentTime - lastTime));</span><br><span class="line">                    lastTime = currentTime;</span><br><span class="line">                    lastFileSize = currentFileSize;</span><br><span class="line">                    speeds.add(speed);</span><br><span class="line">                    log.info(<span class="string">"实时速度：&#123;&#125;kb/s"</span>, speed);</span><br><span class="line">                    log.info(<span class="string">"当前进度：&#123;&#125;%"</span>, (currentFileSize / (<span class="keyword">double</span>) length) * <span class="number">100</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125;, singleThreadPool);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!singleThreadPool.isShutdown()) &#123;</span><br><span class="line">            singleThreadPool.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultFuture;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后可以通过测试类或者用添加web依赖，用postman进行测试，我们这里新建一个Controller，调用showDownloadDetails(key,file)方法,然后抛出异步返回结果<br>SpeedVerifyController.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpeedVerifyController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    SpeedVerifyService speedVerifyService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  通键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 下载保存路径</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/showSpeedDetails"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Double&gt; <span class="title">showSpeedDetails</span><span class="params">(@RequestParam(<span class="string">"key"</span>)</span> String key, @<span class="title">RequestParam</span><span class="params">(<span class="string">"path"</span>)</span> String path) </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Map&lt;String, Double&gt; resultMap = speedVerifyService.showDownloadDetails(key, path).get();</span><br><span class="line">            <span class="keyword">return</span> resultMap;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            log.error(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2020-03-23 23:06:02.493 INFO  com.set.cephverify.service.SpeedVerifyService - 下载线程启动,Thread[http-nio-8080-exec-1,5,main]</span><br><span class="line">2020-03-23 23:06:02.498 INFO  com.set.cephverify.service.SpeedVerifyService - 测速线程启动,test-speed-0</span><br><span class="line">2020-03-23 23:06:03.057 INFO  com.set.cephverify.service.SpeedVerifyService - 实时速度：350.0kb&#x2F;s</span><br><span class="line">2020-03-23 23:06:03.057 INFO  com.set.cephverify.service.SpeedVerifyService - 当前进度：0.11664949383248767%</span><br><span class="line">2020-03-23 23:06:04.098 INFO  com.set.cephverify.service.SpeedVerifyService - 实时速度：1066.0kb&#x2F;s</span><br><span class="line">2020-03-23 23:06:04.099 INFO  com.set.cephverify.service.SpeedVerifyService - 当前进度：11.643242433961678%</span><br><span class="line">...</span><br><span class="line">2020-03-23 23:07:04.877 INFO  com.set.cephverify.service.SpeedVerifyService - 实时速度：1965.0kb&#x2F;s</span><br><span class="line">2020-03-23 23:07:04.877 INFO  com.set.cephverify.service.SpeedVerifyService - 当前进度：97.21021070550222%</span><br><span class="line">2020-03-23 23:07:05.877 INFO  com.set.cephverify.service.SpeedVerifyService - 实时速度：268.0kb&#x2F;s</span><br><span class="line">2020-03-23 23:07:05.877 INFO  com.set.cephverify.service.SpeedVerifyService - 当前进度：100.0%</span><br><span class="line">2020-03-23 23:07:05.884 INFO  com.set.cephverify.service.SpeedVerifyService - 下载完成,总耗时：62.0s</span><br><span class="line">2020-03-23 23:07:05.884 INFO  com.set.cephverify.service.SpeedVerifyService - 最大时速：2036.0kb&#x2F;s</span><br><span class="line">2020-03-23 23:07:05.885 INFO  com.set.cephverify.service.SpeedVerifyService - 平均时速：659.2kb&#x2F;s</span><br></pre></td></tr></table></figure><p>postman异步返回值：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/ceph/1.png" alt="result"><br>由于我这里是用VPN挂的网络环境，所以速度慢了很多，网络正常的话测试是十几M/s。<br>尝试下载不同大小的文件(1M-2GB),不同的文件格式(mp3,mp4,txt,exe…),程序执行完成后，根据下载路径打开文件，确保文件未曾损坏或缺失。</p><h3 id="多线程验证"><a href="#多线程验证" class="headerlink" title="多线程验证"></a>多线程验证</h3><p>接着我们需要开启多个线程在ceph服务器上下载同一个文件，以此模拟多用户同时下载某个文件时，确认ceph服务器是否能够提供有效的下载支持以及验证ceph的稳定性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟多用户同时下载文件，ceph性能验证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key s3桶键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> threadNum 线程数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> path 下载保存路径 n个线程对应n个path</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;CompletableFuture&lt;Map&lt;String,Double&gt;&gt;&gt; showMultiDownloadDetails(String key,<span class="keyword">int</span> threadNum,<span class="keyword">final</span> String... path)&#123;</span><br><span class="line">        <span class="comment">//开启多线程</span></span><br><span class="line">        <span class="keyword">var</span> executor = <span class="keyword">new</span> ThreadPoolExecutor(threadNum, <span class="number">300</span>, <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">1000</span>), <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line">        List&lt;CompletableFuture&lt;Map&lt;String,Double&gt;&gt;&gt; futures = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; threadNum; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = i;</span><br><span class="line">            <span class="comment">//保存异步处理结果</span></span><br><span class="line">            CompletableFuture.supplyAsync(()-&gt;showDownloadDetails(key,path[index]),executor)</span><br><span class="line">                    .thenAccept(result-&gt;&#123;</span><br><span class="line">                        <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                            <span class="comment">//同一时间多个线程进入arrayList.add方法会出现不安全问题--数据覆盖</span></span><br><span class="line">                            futures.add(result);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (futures.size() &lt; threadNum) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//while(true)这种方式判断的执行级别过高，会阻塞其他子线程的执行</span></span><br><span class="line">                    <span class="comment">//所以每次判断后需要sleep一段时间</span></span><br><span class="line">                    Thread.sleep(<span class="number">100L</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.info(e.getMessage());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!executor.isShutdown())&#123;</span><br><span class="line">            executor.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> futures;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>耗时任务调用单线程的下载逻辑即可，这里简单的通过异步结果数组个数和线程数做判断，用来确定所有异步future返回了结果(因为实现逻辑的线程数和任务处理个数是一致的)，抛弃这个特殊情况，一般多个异步任务判断是否全部执行完毕，是通过定义volatile字段的数值描述线程执行状态。<br>注：在多线程的任务调度中，可以通过jdk原生命令调用jps命令获取java运行的pid,然后通过jstack命令查看每个执行线程的堆栈信息，排查问题。</p><p>新建一个测试类测试一下结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showDownloadDetails</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException, IOException </span>&#123;</span><br><span class="line">        </span><br><span class="line">    String key = ***;</span><br><span class="line">    <span class="keyword">int</span> threadNum = ***;</span><br><span class="line">    String[] paths = ***;</span><br><span class="line">    <span class="keyword">var</span> futures = speedVerifyService.showMultiDownloadDetails(key, threadNum, paths);</span><br><span class="line">        </span><br><span class="line">    System.err.println(</span><br><span class="line">        futures.stream().map(m-&gt;&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> m.get();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">)；</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>控制台打印结果：<br><img src="https://cdn.jsdelivr.net/gh/silly-billy/eurekademo@blog_info/static/ceph/2.png" alt="result"><br>经过多次测试，ceph下载文件在单线程状态下没有任何问题。<br>在多线程状态下，ceph的下载速率随着线程数增多，下载速率会变慢。(发现所有线程总的下载速率和单线程情况下几乎一致，可能用的同一个连接的缘故)<br>如果文件格式过大，比如1G以上的文件，如果开启超过60个线程，会出现丢包的情况,甚至少数线程并没有执行s3的download方法，查看线程堆栈信息，发现此类线程一直处于wait状态。文件越大，可同时开启的线程数就越少，具体问题未知(有空去问问运维)。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
          <category> ceph </category>
          
          <category> oss </category>
          
          <category> amazonaws s3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> ceph </tag>
            
            <tag> oss </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
